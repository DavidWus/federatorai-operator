// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ClusterRoleBinding\admission-controllerCRB.yaml
// ClusterRoleBinding\alameda-datahubCRB.yaml
// ClusterRoleBinding\alameda-evictionerCRB.yaml
// ClusterRoleBinding\alameda-grafanaCRB.yaml
// ClusterRoleBinding\alameda-operatorCRB.yaml
// ClusterRole\admission-controllerCR.yaml
// ClusterRole\aggregate-alameda-admin-edit-alamedaCR.yaml
// ClusterRole\alameda-datahubCR.yaml
// ClusterRole\alameda-evictionerCR.yaml
// ClusterRole\alameda-grafanaCR.yaml
// ClusterRole\alameda-operatorCR.yaml
// ServiceAccount\admission-controllerSA.yaml
// ServiceAccount\alameda-aiSA.yaml
// ServiceAccount\alameda-datahubSA.yaml
// ServiceAccount\alameda-evictionerSA.yaml
// ServiceAccount\alameda-grafanaSA.yaml
// ServiceAccount\alameda-operatorSA.yaml
// CustomResourceDefinition\alamedarecommendationsCRD.yaml
// CustomResourceDefinition\alamedascalersCRD.yaml
// ConfigMap\dashboards-config.yaml
// ConfigMap\grafana-datasources.yaml
// Deployment\admission-controllerDM.yaml
// Deployment\alameda-aiDM.yaml
// Deployment\alameda-datahubDM.yaml
// Deployment\alameda-evictionerDM.yaml
// Deployment\alameda-grafanaDM.yaml
// Deployment\alameda-influxdbDM.yaml
// Deployment\alameda-operatorDM.yaml
// Service\admission-controllerSV.yaml
// Service\alameda-datahubSV.yaml
// Service\alameda-grafanaSV.yaml
// Service\alameda-influxdbSV.yaml
// PersistentVolumeClaim\admission-controller-log.yaml
// PersistentVolumeClaim\alameda-ai-log.yaml
// PersistentVolumeClaim\alameda-datahub-log.yaml
// PersistentVolumeClaim\alameda-evictioner-log.yaml
// PersistentVolumeClaim\alameda-operator-log.yaml
// PersistentVolumeClaim\my-alamedagrafanaPVC.yaml
// PersistentVolumeClaim\my-alamedainfluxdbPVC.yaml
// Secret\admission-controller-tls.yaml
// Secret\alameda-influxdb.yaml

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataClusterRoleBindingadmissioncontrollerCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\x31\x4e\xc0\x30\x0c\x45\xf7\x48\xb9\x43\x2e\xd0\x22\x36\x94\x0d" +
	"\x18\xd8\x8b\xc4\xee\x26\x2e\x98\xa6\x76\xe4\x38\x1d\x38\x3d\x6a\x45\x07\x04\x42\x62\xfe\xf6\x7b\x0f\x2a\xbd\xa0" +
	"\x36\x12\x8e\x41\x67\x48\x23\x74\x7b\x13\xa5\x0f\x30\x12\x1e\xd7\xbb\x36\x92\xdc\xec\xb7\xde\xad\xc4\x39\x86\xc7" +
	"\xd2\x9b\xa1\x4e\x52\xf0\x81\x38\x13\xbf\x7a\xb7\xa1\x41\x06\x83\xe8\x5d\x08\x0c\x1b\xc6\xb0\x60\x46\x05\x13\x05" +
	"\x1a\x20\x6f\xd4\x0e\xc3\x90\x84\x4d\xa5\x14\x54\xef\x54\x0a\x4e\xb8\x9c\x3f\x50\xe9\x49\xa5\xd7\x3f\x12\x8e\xb3" +
	"\x1f\x05\xff\xf1\xb5\x3e\xbf\x63\xb2\x76\x0a\x87\x2f\xd6\x33\xea\x4e\x09\xef\x53\x92\xce\x76\x2c\x17\xf0\x77\xc8" +
	"\xb5\xb7\x0a\xe9\xbb\xf5\x33\x00\x00\xff\xff\xf1\x2b\x30\x0e\x48\x01\x00\x00")

func bindataClusterRoleBindingadmissioncontrollerCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingadmissioncontrollerCRByaml,
		"ClusterRoleBinding/admission-controllerCRB.yaml",
	)
}



func bindataClusterRoleBindingadmissioncontrollerCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingadmissioncontrollerCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/admission-controllerCRB.yaml",
		size: 328,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingalamedadatahubCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xb1\x6a\xc3\x30\x10\xc6\xf1\x5d\xa0\x77\xd0\x0b\xd8\xa5\x5b\xd1" +
	"\xd6\x76\xe8\xee\x42\xf7\xb3\x74\xae\xaf\x96\x75\xe2\x74\xf2\xd0\xa7\x0f\x4e\x02\x21\x18\x42\xe6\xfb\xdf\xf7\x83" +
	"\x42\x3f\x28\x95\x38\x7b\x27\x23\x84\x1e\x9a\xce\x2c\xf4\x0f\x4a\x9c\xfb\xe5\xad\xf6\xc4\x2f\xdb\xab\x35\x0b\xe5" +
	"\xe8\xdd\x67\x6a\x55\x51\x06\x4e\xf8\x41\x39\x52\xfe\xb5\x66\x45\x85\x08\x0a\xde\x1a\xe7\x32\xac\xe8\xdd\x84\x11" +
	"\x05\x94\x05\xa8\x83\x04\x2b\x46\xe8\xf6\x64\x6e\xa3\x35\xc2\x09\x07\x9c\xce\x39\x14\xfa\x12\x6e\xe5\x81\xbe\x67" +
	"\x07\xfc\x49\xaa\xb6\xf1\x0f\x83\x56\x6f\x4d\x77\x1d\xf9\x46\xd9\x28\xe0\x7b\x08\xdc\xb2\xde\x76\x0e\xbf\x97\x43" +
	"\x2d\x10\xee\x95\x53\x00\x00\x00\xff\xff\x4c\xd6\xf1\xee\x33\x01\x00\x00")

func bindataClusterRoleBindingalamedadatahubCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingalamedadatahubCRByaml,
		"ClusterRoleBinding/alameda-datahubCRB.yaml",
	)
}



func bindataClusterRoleBindingalamedadatahubCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingalamedadatahubCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-datahubCRB.yaml",
		size: 307,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingalamedaevictionerCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x31\x6e\xc3\x30\x0c\x45\x77\x01\xba\x83\x2e\x60\x17\xdd\x0a\x6d" +
	"\x6d\x87\xee\x2e\xd0\x9d\x96\xe8\x86\xb1\x2c\x0a\x14\xe5\x21\xa7\x0f\x9c\x04\x08\x82\x04\x41\x66\xf2\xbd\xf7\xa1" +
	"\xd0\x1f\x4a\x25\xce\xde\xc9\x08\xa1\x87\xa6\x3b\x16\x3a\x80\x12\xe7\x7e\xfe\xa8\x3d\xf1\xdb\xfa\x6e\xcd\x4c\x39" +
	"\x7a\xf7\x9d\x5a\x55\x94\x81\x13\x7e\x51\x8e\x94\xff\xad\x59\x50\x21\x82\x82\xb7\xc6\xb9\x0c\x0b\x7a\x37\x61\x44" +
	"\x01\x65\x01\xea\x20\xc1\x82\x11\x3a\x5c\x29\x6c\x52\x14\x6b\x84\x13\x0e\x38\x9d\x08\x28\xf4\x23\xdc\xca\x93\x01" +
	"\xdb\xdb\x5d\xff\xf5\x5a\x6d\xe3\x1e\x83\x56\x6f\x4d\x77\xf1\xfc\xa2\xac\x14\xf0\x33\x04\x6e\x59\xaf\xaa\x47\xf8" +
	"\xf9\x56\x0b\x84\xdb\xd6\x31\x00\x00\xff\xff\x22\x7a\x42\xcd\x3c\x01\x00\x00")

func bindataClusterRoleBindingalamedaevictionerCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingalamedaevictionerCRByaml,
		"ClusterRoleBinding/alameda-evictionerCRB.yaml",
	)
}



func bindataClusterRoleBindingalamedaevictionerCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingalamedaevictionerCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-evictionerCRB.yaml",
		size: 316,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingalamedagrafanaCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x3d\x4e\x04\x31\x0c\xc5\xf1\x3e\x52\xee\x90\x0b\xcc\x20\x3a\x94" +
	"\x0e\x28\xe8\x17\x89\xfe\x6d\xe2\x59\xcc\xce\xd8\x91\xe3\x6c\xc1\xe9\x11\x1f\x12\x42\x23\xa1\xad\xfd\xfc\xff\xa1" +
	"\xf1\x0b\x59\x67\x95\x9c\xec\x88\x32\x63\xf8\xab\x1a\xbf\xc3\x59\x65\x3e\xdf\xf5\x99\xf5\xe6\x72\x1b\xc3\x99\xa5" +
	"\xe6\xf4\xb8\x8e\xee\x64\x07\x5d\xe9\x81\xa5\xb2\x9c\x62\xd8\xc8\x51\xe1\xc8\x31\xa4\x24\xd8\x28\xa7\x85\x2a\x19" +
	"\x5c\x0d\x3c\x61\xc5\x46\x15\xd3\xc9\xb0\x40\x10\x83\xe9\x4a\x07\x5a\xbe\xe6\x68\xfc\x64\x3a\xda\x3f\xfa\xe7\x6c" +
	"\x87\x5f\x49\xf5\x71\x7c\xa3\xe2\x3d\xc7\x30\xfd\x44\x9e\xc9\x2e\x5c\xe8\xbe\x14\x1d\xe2\xbf\x9d\xdd\xef\xf7\xa1" +
	"\x37\x94\xbf\xca\x47\x00\x00\x00\xff\xff\x58\x50\xf9\xdf\x33\x01\x00\x00")

func bindataClusterRoleBindingalamedagrafanaCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingalamedagrafanaCRByaml,
		"ClusterRoleBinding/alameda-grafanaCRB.yaml",
	)
}



func bindataClusterRoleBindingalamedagrafanaCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingalamedagrafanaCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-grafanaCRB.yaml",
		size: 307,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555914359, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingalamedaoperatorCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xb1\x6a\xc3\x30\x10\x06\xe0\x5d\xa0\x77\xd0\x0b\xd8\xa5\x5b\xd1" +
	"\xd6\x76\xe8\xee\x42\xf7\xb3\x74\x6e\x2e\x96\x75\xe2\x74\xf2\x90\xa7\x0f\x89\x03\x21\x18\x42\xd6\xbb\xff\xff\x3f" +
	"\x28\xf4\x87\x52\x89\xb3\x77\x32\x42\xe8\xa1\xe9\x81\x85\x4e\xa0\xc4\xb9\x9f\x3f\x6a\x4f\xfc\xb6\xbe\x5b\x33\x53" +
	"\x8e\xde\x7d\xa7\x56\x15\x65\xe0\x84\x5f\x94\x23\xe5\x7f\x6b\x16\x54\x88\xa0\xe0\xad\x71\x2e\xc3\x82\xde\x4d\x18" +
	"\x51\x40\x59\x80\x3a\x48\xb0\x60\x84\x8e\xcb\x76\xb2\x46\x38\xe1\x80\xd3\x35\x0f\x85\x7e\x84\x5b\x79\xc2\x5f\x62" +
	"\x3b\xfd\x55\xab\xb6\xf1\x88\x41\xab\xb7\xa6\xbb\xad\xfc\xa2\xac\x14\xf0\x33\x04\x6e\x59\xef\x43\xfb\xf2\xf6\xa9" +
	"\x05\xc2\xa3\x73\x0e\x00\x00\xff\xff\x3b\x4d\x10\x29\x36\x01\x00\x00")

func bindataClusterRoleBindingalamedaoperatorCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingalamedaoperatorCRByaml,
		"ClusterRoleBinding/alameda-operatorCRB.yaml",
	)
}



func bindataClusterRoleBindingalamedaoperatorCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingalamedaoperatorCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-operatorCRB.yaml",
		size: 310,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleadmissioncontrollerCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x31\x6f\xbc\x30\x0c\xc5\x77\x24\xbe\x43\x74\x3b\xfc\xf5\xdf\x2a" +
	"\xd6\x0e\xdd\x3b\x74\x37\x89\x01\x8b\x10\x47\xb6\x73\x55\xfb\xe9\x2b\xca\xa9\xb0\x50\xdd\xa9\xd9\x5e\xe4\x97\xdf" +
	"\x7b\x31\x64\x7a\x43\x51\xe2\xd4\x39\xe9\xc1\xb7\x50\x6c\x62\xa1\x4f\x30\xe2\xd4\xce\x4f\xda\x12\xff\xbb\xfe\xaf" +
	"\xab\x99\x52\xe8\xdc\x73\x2c\x6a\x28\xaf\x1c\xb1\xae\x16\x34\x08\x60\xd0\xd5\x95\x73\x09\x16\xec\xdc\x80\x01\x05" +
	"\x8c\x05\xa8\x81\xb0\x90\xae\x4f\x37\x9e\x93\x09\xc7\x88\x52\x57\x52\x22\xea\xb7\xa3\x71\x90\xe9\x45\xb8\xe4\x4d" +
	"\xaf\xa7\x71\x97\x1f\x9b\xe0\x48\x6a\x72\x4c\x72\xd9\xe6\x04\x95\x8b\x78\x3c\xfa\x96\x62\x60\x94\xc6\x77\xec\x27" +
	"\xe6\xd9\x73\x1a\x68\x2c\x9b\x5b\xb7\xb1\x2b\x4a\x7f\xb4\x8c\x68\xbb\xf0\x82\x60\xb8\xeb\x92\xc3\x4d\x9f\xe4\xfc" +
	"\x25\x4b\xe6\x70\x0f\x32\x92\x1e\x54\x06\xf3\xd3\x39\x0f\x72\xd6\x73\xa2\x60\x8e\xe4\x41\xd1\x74\xbf\x0c\x98\x23" +
	"\x7f\x2c\x98\xec\x91\x34\x8f\xd7\xbd\xc1\xd7\x9f\xde\x37\xfd\x77\xe4\xda\xb8\xe5\x8c\x49\x27\x1a\xac\x25\x3e\x4f" +
	"\xb0\x37\xdd\xf6\x7e\x2f\xfc\x2b\x00\x00\xff\xff\xb5\x2b\xfb\x62\xff\x02\x00\x00")

func bindataClusterRoleadmissioncontrollerCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleadmissioncontrollerCRyaml,
		"ClusterRole/admission-controllerCR.yaml",
	)
}



func bindataClusterRoleadmissioncontrollerCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleadmissioncontrollerCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/admission-controllerCR.yaml",
		size: 767,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleaggregatealamedaadmineditalamedaCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xbf\x6a\x33\x31\x10\xc4\x7b\xc3\xbd\x83\x70\x7f\xf7\xf1\x75\xe1" +
	"\xda\x14\xe9\x53\xa4\x9f\x93\x86\xf3\x62\xfd\x39\x56\x2b\x07\xf2\xf4\x41\xbe\xd8\xee\x42\x02\xe9\x7e\xec\xce\xec" +
	"\x8c\x84\x4d\xde\xa8\x55\x4a\x9e\x9d\x2e\xf0\x13\x9a\x9d\x8a\xca\x07\x4c\x4a\x9e\xce\x4f\x75\x92\xf2\xef\xf2\x7f" +
	"\x38\x9c\x25\x87\xd9\x3d\xc7\x56\x8d\xfa\x5a\x22\x87\x43\xa2\x21\xc0\x30\x0f\x07\xe7\x32\x12\x67\x87\x75\x55\xae" +
	"\x30\x8e\x88\x48\x0c\x18\x11\x92\xe4\x91\x41\xec\x36\xea\xea\x88\x85\xb1\x5e\x8d\xee\x9b\xe0\xc7\x39\x2b\xfb\xa5" +
	"\xd9\x1d\x4d\x1b\x8f\xbf\x72\xf6\xf4\x87\x51\x5b\x64\x8f\x1e\x1d\x36\x79\xd1\xd2\xb6\xbd\xc8\xe8\xd0\xac\x54\x8f" +
	"\x28\x79\x9d\x7c\xc9\x06\xc9\xd4\x3a\x41\xfa\x5a\x59\x4b\x53\xcf\xbb\x78\x7f\x4d\xd7\x53\x6b\x9f\x5d\xa8\xcb\x6d" +
	"\xbb\xd2\x76\x88\x52\xbf\xc8\x2b\x61\xdc\xb9\x6d\xe1\xce\x81\x91\x9d\xff\xa6\x8f\xd2\x97\x94\x98\xc3\xf5\x3b\x7e" +
	"\xd2\xeb\x1d\xe6\x4f\x9f\x01\x00\x00\xff\xff\xc6\xe3\x80\x4c\x09\x02\x00\x00")

func bindataClusterRoleaggregatealamedaadmineditalamedaCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleaggregatealamedaadmineditalamedaCRyaml,
		"ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml",
	)
}



func bindataClusterRoleaggregatealamedaadmineditalamedaCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleaggregatealamedaadmineditalamedaCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml",
		size: 521,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRolealamedadatahubCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x31\x4f\xc3\x40\x0c\x85\xf7\x48\xf9\x0f\x56\x99\x13\xc4\x86\xb2" +
	"\x32\xb0\x22\x06\x76\x37\xf7\xda\x58\xcd\x9d\x0f\xdb\x57\x09\x7e\x3d\x4a\x8b\xaa\x76\xba\xf3\xf3\xd3\xf7\x6c\x73" +
	"\x95\x2f\x98\x8b\x96\x89\x6c\xcf\xf3\xc8\x2d\x16\x35\xf9\xe5\x10\x2d\xe3\xe9\xd5\x47\xd1\xe7\xf3\x4b\xdf\x9d\xa4" +
	"\xa4\x89\xde\xd6\xe6\x01\xfb\xd4\x15\x7d\x97\x11\x9c\x38\x78\xea\x3b\xa2\xc2\x19\x13\x1d\x90\x60\x1c\x6a\x2c\x03" +
	"\xaf\x9c\x91\x78\xd8\x2c\x4b\xdb\xf7\x9d\xb5\x15\x3e\xf5\xdd\x13\x7d\xc0\xb2\xf8\x16\x4b\x07\x35\xfa\x6e\xb0\x1f" +
	"\xaa\xa6\x19\xb1\xa0\x39\xb5\x92\x60\x17\xa4\x57\x9e\x41\x5a\x51\x7c\x91\x43\x0c\x59\x8b\x84\x9a\x94\x23\xf5\xdd" +
	"\x40\x5c\xe5\xdd\xb4\x55\x9f\x68\x1b\x62\xa0\xdd\x6e\x7b\x0d\xae\xcd\x66\xdc\xe4\x1b\xca\xb7\xfa\x0c\xdb\xdf\x5a" +
	"\x47\xc4\x23\xe9\x2a\x73\x0b\xf5\x99\x57\x29\xc7\x71\xd6\x12\x2c\x05\xe6\x23\xcb\x23\xff\xdf\x7c\x5d\xd5\x30\x6b" +
	"\xce\x28\xe9\x72\xbd\xbb\xa8\xbb\xa4\xed\xd3\x6a\xe2\xc0\x5f\x00\x00\x00\xff\xff\xcf\xba\x16\xbd\x7c\x01\x00\x00" +
	"")

func bindataClusterRolealamedadatahubCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRolealamedadatahubCRyaml,
		"ClusterRole/alameda-datahubCR.yaml",
	)
}



func bindataClusterRolealamedadatahubCRyaml() (*asset, error) {
	bytes, err := bindataClusterRolealamedadatahubCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-datahubCR.yaml",
		size: 380,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555379301, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRolealamedaevictionerCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x4e\x04\x31\x0c\x44\xfb\x95\xf2\x0f\xd1\xf5\x1b\x44\x87\xd2" +
	"\x52\xd0\x53\xd0\xfb\x92\xe1\xb0\x2e\x89\x57\xb6\x73\x05\x5f\x8f\xf6\xe0\x0a\xa4\xad\x3c\x7a\xb2\xc7\xa3\xa1\x8d" +
	"\x3f\xa0\xc6\x32\x72\xd4\x33\x95\x44\xd3\xbf\x44\xf9\x9b\x9c\x65\xa4\xeb\x8b\x25\x96\xa7\xdb\x73\x58\xae\x3c\x6a" +
	"\x8e\xaf\x6d\x9a\x43\xdf\xa5\x21\x2c\x1d\x4e\x95\x9c\x72\x58\x62\x1c\xd4\x91\xe3\x27\x2a\x94\x5c\x94\x78\xa5\x46" +
	"\x1d\x95\x56\xdc\xb8\xec\x6e\xd0\xb0\xe8\x6c\xb0\x1c\x96\x35\xd2\xc6\x6f\x2a\x73\xb3\xfb\xf5\x1a\x4f\xa7\x7d\x2a" +
	"\x4c\xa6\x16\x3c\xe8\x26\xd5\x76\x75\x83\x9e\x1f\xec\x02\xff\x15\x15\x0d\x8e\x23\x33\x9a\x2e\x56\xa8\xf1\xb8\xa4" +
	"\x22\xc3\x89\x07\xd4\x12\xf1\xd1\x8f\xbf\x9c\xfb\x3e\xd4\xfe\x31\x45\x91\xde\x31\xea\xbd\x8e\xa3\x24\x3f\x01\x00" +
	"\x00\xff\xff\x84\x7e\x10\x71\x41\x01\x00\x00")

func bindataClusterRolealamedaevictionerCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRolealamedaevictionerCRyaml,
		"ClusterRole/alameda-evictionerCR.yaml",
	)
}



func bindataClusterRolealamedaevictionerCRyaml() (*asset, error) {
	bytes, err := bindataClusterRolealamedaevictionerCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-evictionerCR.yaml",
		size: 321,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555914359, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRolealamedagrafanaCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\xa1\x6e\x04\x31\x0c\x44\x79\xa4\xfc\x83\x75\x3c\x5b\x95\x55\xa1" +
	"\x05\xe5\x05\xe5\x73\x1b\xdf\xd5\xba\x6c\x1c\xd9\xc9\x82\x7e\x7d\x15\xb2\x68\x34\x33\x7a\x0f\x5d\x7e\xd8\x5c\xb4" +
	"\x65\xb2\x3b\xf6\x0d\x73\xfc\xaa\xc9\x1f\x86\x68\xdb\x5e\x1f\xbe\x89\xbe\x9d\xef\x31\xbc\xa4\x95\x4c\x9f\x75\xfa" +
	"\x60\xfb\xd6\xca\x31\x1c\x3c\x50\x30\x90\x63\x20\x6a\x38\x38\xd3\x83\x0b\x1b\x86\x1a\x24\xa1\xe2\xe0\x82\xf4\x34" +
	"\x3c\xd0\x10\x83\xcd\xca\x9e\x63\x48\x84\x2e\x5f\xa6\xb3\x7b\xa6\xc5\x26\xba\xdd\x56\x1a\xbb\x4e\xdb\xf9\x9a\x97" +
	"\xd4\x3b\x76\xf6\xd5\x4f\xb6\xfb\x75\x3d\x79\xfc\x07\x00\x00\xff\xff\xc5\xb2\xe3\xa2\xbd\x00\x00\x00")

func bindataClusterRolealamedagrafanaCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRolealamedagrafanaCRyaml,
		"ClusterRole/alameda-grafanaCR.yaml",
	)
}



func bindataClusterRolealamedagrafanaCRyaml() (*asset, error) {
	bytes, err := bindataClusterRolealamedagrafanaCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-grafanaCR.yaml",
		size: 189,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555914359, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRolealamedaoperatorCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\xb1\x6e\xdb\x30\x10\xdd\x0d\xf8\x1f\x88\x74\xb6\x82\x6e\x85\xd7" +
	"\x0e\x5d\x8b\x0e\xdd\xcf\xe4\x93\x7c\x30\xc5\x63\xef\x48\xa7\xc9\xd7\x17\xb2\x64\x47\x41\x99\x22\x69\x81\x4e\x3e" +
	"\x9c\x49\xbe\x77\xf7\xde\x13\x65\xfe\x0e\x35\x96\xb4\x77\x7a\x20\xdf\x51\x2d\x47\x51\x7e\xa2\xc2\x92\xba\xd3\x27" +
	"\xeb\x58\xee\xcf\x1f\xb7\x9b\x13\xa7\xb0\x77\x9f\x63\xb5\x02\xfd\x26\x11\xdb\xcd\x88\x42\x81\x0a\xed\xb7\x1b\xe7" +
	"\x12\x8d\xd8\xbb\x1e\x01\x4a\x45\x94\x78\x47\x91\x46\x04\xda\x49\x9e\x5b\xdb\x8d\xd6\x08\xdb\x6f\x37\x3b\x47\x99" +
	"\xbf\xa8\xd4\x6c\x97\xbb\x3b\x77\x77\x37\xfd\x2a\x4c\xaa\x7a\x5c\xbb\x49\x02\x6c\x2e\xb3\x84\xa5\x52\xe4\xc8\xfe" +
	"\xc2\xcf\x4b\x2a\x2a\x31\x42\x2f\xff\x9d\xa1\x87\xeb\xd5\x01\x65\x2e\x22\xdb\x52\x3d\x50\xf1\xc7\x16\x38\xe5\x6c" +
	"\x2d\xf8\x05\xc9\x50\x16\xe8\x80\x1c\xe5\x71\x44\x2a\xef\xc0\x9b\x4a\xaf\xa0\x82\xb9\xae\x39\xdc\xea\xfc\x7c\x24" +
	"\x20\x62\x6a\xb7\xe9\x75\x92\x91\xec\xc8\x7d\xe9\x58\x5a\x5c\x9f\xa9\x79\x49\x3d\x0f\xff\xb6\x90\x5a\xc4\x3c\x45" +
	"\x4e\x43\x37\xed\x98\x38\x41\xad\x23\x6e\x21\x2f\x32\x4f\xe7\x17\x1d\x6e\x3d\x85\x97\x71\x44\x0a\x17\xb5\xfe\xeb" +
	"\xce\xfe\x7e\x82\xfb\x9e\x13\x45\x7e\x6a\x98\xea\x4a\xe3\x83\xfb\x0a\x1d\xd9\xa6\xdc\xb8\x5e\xd4\xfd\xa8\xd0\x47" +
	"\x97\x55\x46\x94\x23\xaa\xb9\x9a\x02\xf4\x92\x09\xcb\xe4\xe1\x6e\xf2\xed\x46\x49\x5c\x44\x39\x0d\xee\x25\x71\xd7" +
	"\x4e\xc2\xd2\xbe\x3d\xb5\x22\xe5\x56\x6b\x6c\xd9\x86\xf1\xb3\x20\x4d\x24\x6d\x49\x72\x6b\x7a\x5f\xad\xc8\x78\xed" +
	"\x06\xf4\x9c\xf8\xcf\x72\xb5\x94\x79\x6b\xa4\x0d\x5e\xf1\x7b\x7c\xd6\x4f\xae\x3c\x30\x1b\xa3\x31\x5b\x58\xb6\xaf" +
	"\x18\xd8\x8a\xae\xbf\x56\x2d\xd4\x33\x45\x9e\x4c\x98\x86\x07\x1c\x8e\x22\xa7\x39\x24\x55\xdb\xc6\x7c\x83\x0b\x5f" +
	"\x63\xf6\xda\xd4\x7a\xe6\x17\xda\xbd\x0b\xe8\x57\x00\x00\x00\xff\xff\x47\xf1\xf1\x0d\xa6\x05\x00\x00")

func bindataClusterRolealamedaoperatorCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRolealamedaoperatorCRyaml,
		"ClusterRole/alameda-operatorCR.yaml",
	)
}



func bindataClusterRolealamedaoperatorCRyaml() (*asset, error) {
	bytes, err := bindataClusterRolealamedaoperatorCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-operatorCR.yaml",
		size: 1446,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountadmissioncontrollerSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcb\x31\x0a\x42\x31\x0c\x06\xe0\xbd\xd0\x3b\xe4\x02\x0e\xae\xd9\x3c" +
	"\x83\xe0\x1e\xd2\x5f\x08\xbe\x26\x8f\x34\xf6\xfc\xe2\xf0\xe6\x8f\x4f\x4e\x7b\x21\x97\x85\x33\xed\x7b\x6f\x1f\xf3" +
	"\xc1\xf4\x44\x6e\x53\x3c\x54\xe3\xeb\xd5\xdb\x44\xc9\x90\x12\xee\x8d\xc8\x65\x82\x49\xc6\xb4\xf5\x7f\x37\x0d\xaf" +
	"\x8c\xe3\x40\x5e\xba\x4e\x51\x30\xbd\x31\x90\x52\x91\x62\xbf\x00\x00\x00\xff\xff\xd9\x4c\xcf\x12\x67\x00\x00\x00" +
	"")

func bindataServiceAccountadmissioncontrollerSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountadmissioncontrollerSAyaml,
		"ServiceAccount/admission-controllerSA.yaml",
	)
}



func bindataServiceAccountadmissioncontrollerSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountadmissioncontrollerSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/admission-controllerSA.yaml",
		size: 103,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountalamedaaiSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xc8\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x52\x76\xf0\x02\x14\xb4\xee\x98" +
	"\x01\x89\xfe\x2b\xfe\x48\x16\xc4\x39\xf9\x4c\xe6\xa7\xba\xf6\xe1\xf0\x17\xf3\xf4\x15\x2a\xfb\xde\xdb\xc7\xc3\x54" +
	"\x9e\xcc\xed\x83\x8f\x31\xd6\x2f\xaa\xb7\xc9\x82\xa1\xa0\xbd\x89\x04\x26\x55\xf0\xc5\xa4\xe1\x06\xbf\xec\x3c\x30" +
	"\xa8\xf2\xa6\x31\x51\x2b\xe1\xff\x00\x00\x00\xff\xff\x07\xaf\x8b\xb5\x5d\x00\x00\x00")

func bindataServiceAccountalamedaaiSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountalamedaaiSAyaml,
		"ServiceAccount/alameda-aiSA.yaml",
	)
}



func bindataServiceAccountalamedaaiSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountalamedaaiSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-aiSA.yaml",
		size: 93,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555492503, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountalamedadatahubSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xc9\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x52\x76\xf0\x02\x14\xb4\xee\x98" +
	"\x01\x89\xfe\x93\x7c\x84\x05\x71\x4e\x3e\x5f\xe6\x47\x14\xd7\xbe\x87\xcd\x1e\x8c\xdd\xa6\xab\xac\x6b\x2d\x1f\xf3" +
	"\xae\x72\x67\x2c\x6b\xbc\xb5\x36\x0f\xcf\x5a\x06\x13\x1d\x09\xad\x45\xc4\x31\xa8\x82\x2f\x06\x3b\x2e\x7f\x7e\x1f" +
	"\xcf\x33\xf6\x0d\x8d\x2a\x2f\x76\x06\x72\x06\xec\x17\x00\x00\xff\xff\xdb\x23\xc6\x56\x62\x00\x00\x00")

func bindataServiceAccountalamedadatahubSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountalamedadatahubSAyaml,
		"ServiceAccount/alameda-datahubSA.yaml",
	)
}



func bindataServiceAccountalamedadatahubSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountalamedadatahubSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-datahubSA.yaml",
		size: 98,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountalamedaevictionerSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xc9\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x52\x76\xf0\x02\x14\xb4\xee\x98" +
	"\x01\x89\xfe\xcb\xf9\x48\x16\xc4\x39\xf9\x4c\xe6\xa7\xba\xfa\xe1\xf0\x17\xf3\xf4\x15\x2a\xfb\xde\xdb\xc7\x63\xa8" +
	"\x3c\x99\xdb\x8d\x0f\xb3\xf5\x8b\xea\x6d\xb2\x30\x50\xd0\xde\x44\x02\x93\x2a\xf8\x62\x72\xe0\xc6\xed\x56\xbe\x82" +
	"\x79\xd9\x79\xc0\xa8\xf2\xe6\x60\xa2\x56\xc2\xff\x01\x00\x00\xff\xff\xd8\xfc\xd0\xd8\x65\x00\x00\x00")

func bindataServiceAccountalamedaevictionerSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountalamedaevictionerSAyaml,
		"ServiceAccount/alameda-evictionerSA.yaml",
	)
}



func bindataServiceAccountalamedaevictionerSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountalamedaevictionerSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-evictionerSA.yaml",
		size: 101,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountalamedagrafanaSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xc9\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\x52\xee\xe0\x0b\x30\xb0\x7a\xe3" +
	"\x0c\x48\xec\x5f\xf1\x2f\xb2\x20\x4e\xe5\x9a\x9e\x9f\xa9\xf3\xc3\xee\x2f\xe6\xe1\x2b\x54\xce\x7b\x6f\x1f\x0f\x53" +
	"\x79\x32\x4f\x1f\x7c\x8c\xb1\x7e\x51\xbd\x4d\x16\x0c\x05\xed\x4d\x24\x30\xa9\x82\x2f\x26\x0d\xb7\x77\x62\x43\xe0" +
	"\x82\x63\xc7\xa0\xca\x46\x63\xa2\x56\xc2\xff\x01\x00\x00\xff\xff\x7f\x94\xd2\xdd\x62\x00\x00\x00")

func bindataServiceAccountalamedagrafanaSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountalamedagrafanaSAyaml,
		"ServiceAccount/alameda-grafanaSA.yaml",
	)
}



func bindataServiceAccountalamedagrafanaSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountalamedagrafanaSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-grafanaSA.yaml",
		size: 98,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555914359, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountalamedaoperatorSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xc9\x31\x0a\x42\x31\x0c\x06\xe0\xbd\xd0\x3b\xe4\x02\x0e\xae\xd9\x3c" +
	"\x83\xe0\xfe\xd3\xfe\x42\xd0\x26\x25\x2f\xbe\xf3\x3b\x88\xeb\xf7\x61\xdb\x83\x79\x58\xb8\xca\x79\xed\xed\x65\x3e" +
	"\x55\xee\xcc\xd3\x06\x6f\x63\xc4\xc7\xab\xb7\xc5\xc2\x44\x41\x7b\x13\x71\x2c\xaa\xe0\x8d\xc5\x89\x4b\x6c\x26\x2a" +
	"\xf2\x3f\xc7\xc6\xa0\xca\x93\xf3\xe7\xb0\x6f\x00\x00\x00\xff\xff\x5b\xca\x2a\xec\x63\x00\x00\x00")

func bindataServiceAccountalamedaoperatorSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountalamedaoperatorSAyaml,
		"ServiceAccount/alameda-operatorSA.yaml",
	)
}



func bindataServiceAccountalamedaoperatorSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountalamedaoperatorSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-operatorSA.yaml",
		size: 99,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCustomResourceDefinitionalamedarecommendationsCRDyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x8f\x13\x31\x0c\xbd\x57\xea\x7f\xb0\x7a\xef\x40\xc5\x05\xcd" +
	"\x6d\x05\x17\x2e\x2b\xb4\x48\x7b\x41\x1c\xdc\xc4\x74\xc3\x26\x71\x70\x3c\x15\xfb\xef\x51\x92\xce\x4e\x4b\xa7\xc3" +
	"\xfa\x34\xf3\xfc\xe2\xe7\x4f\x4c\xee\x91\x24\x3b\x8e\x3d\x60\x72\xf4\x47\x29\x96\xbf\xdc\x3d\x7f\xcc\x9d\xe3\x77" +
	"\xc7\xdd\x9e\x14\x77\xeb\xd5\xb3\x8b\xb6\x87\x4f\x43\x56\x0e\x0f\x94\x79\x10\x43\x9f\xe9\xa7\x8b\x4e\x1d\xc7\xf5" +
	"\x2a\x90\xa2\x45\xc5\x7e\xbd\x02\xf0\xb8\x27\x9f\xeb\x27\x80\xe1\xa8\xc2\xde\x93\x6c\x95\xd9\x8f\xa1\x7b\xd8\xec" +
	"\xba\xf7\x9b\xc2\x89\x18\xa8\x07\xf4\x18\xc8\xa2\x90\xe1\x10\x28\x5a\xd4\x9a\x08\x0e\xca\xd9\xa0\x77\xf1\xd0\x95" +
	"\x50\xe8\x22\x49\xee\xd0\xad\x57\x39\x91\xa9\x22\x07\xe1\x21\xf5\xb0\x40\x6d\x22\x63\x4a\xad\x98\xbb\x26\xf8\x70" +
	"\x21\xd8\x08\xc9\x0f\x82\xfe\x56\x4e\x85\x93\x0d\x27\xea\xe1\xbe\x44\x4d\x68\xc8\x16\xf0\x88\xde\x35\xce\x49\x88" +
	"\x13\xc5\xbb\xaf\x5f\x1e\x3f\x7c\x33\x4f\x14\xf0\x84\x02\x24\xe1\x44\xa2\xee\x35\xa3\x62\x67\xc3\x98\x40\x00\x7d" +
	"\x29\x42\x59\xc5\xc5\xc3\x84\xd7\x12\xfe\x4f\xbb\x18\xcb\x25\x95\xf7\xbf\xc8\xe8\x84\xbf\x76\x73\xb4\xd9\x24\xc7" +
	"\x89\xb6\xde\xfe\xe3\x00\x70\x4a\xe1\x1a\x5d\x88\xd5\xac\x6e\xc0\x9c\xe3\x56\x5d\x93\xc9\x69\x19\xe7\x03\xdf\x2a" +
	"\x76\x7a\xfd\x7b\x70\x42\x76\xe6\xf1\xb6\x66\x75\x8d\x2f\x05\x6c\x3e\x14\xc1\x97\x73\xd7\xac\xca\xf6\xac\x8f\x6f" +
	"\x98\x8e\xa2\x0e\x79\x71\x8c\xc7\xf1\x92\x8f\x3b\xf4\xe9\xa9\x5c\xed\xd9\x2b\x34\x86\x92\x92\xbd\xbf\xba\x83\xcd" +
	"\xe6\x72\xe9\xdb\xbf\xe1\x68\xeb\x6d\xe7\x1e\xbe\xff\xa8\x2b\xaf\x2c\x64\x4f\x2b\x5a\xd1\xbf\x01\x00\x00\xff\xff" +
	"\xa6\x65\x21\x8a\x3f\x04\x00\x00")

func bindataCustomResourceDefinitionalamedarecommendationsCRDyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCustomResourceDefinitionalamedarecommendationsCRDyaml,
		"CustomResourceDefinition/alamedarecommendationsCRD.yaml",
	)
}



func bindataCustomResourceDefinitionalamedarecommendationsCRDyaml() (*asset, error) {
	bytes, err := bindataCustomResourceDefinitionalamedarecommendationsCRDyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "CustomResourceDefinition/alamedarecommendationsCRD.yaml",
		size: 1087,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCustomResourceDefinitionalamedascalersCRDyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x8f\x6b\x35\x0c\xdd\x8f\x34\xff\xc1\x2a\x8b\xd9\xd0\x5b\x46" +
	"\x6c\xd0\x5d\x20\x3d\x15\x16\x23\xc4\x13\x9a\x41\x6f\x83\x58\xb8\x89\x6f\x1b\x26\xb1\x43\xe2\x54\xaf\xfc\x7a\x94" +
	"\xdc\x7e\x7f\x8c\x8a\x44\x56\xbd\x27\xf1\xb1\x73\x6c\xc7\xc5\xe8\xbe\x50\xca\x4e\xb8\x07\x8c\x8e\xbe\x2a\x71\xfd" +
	"\xca\xdd\xfb\x0f\xb9\x73\x32\x5b\x3f\x2f\x48\xf1\xf9\xf1\xe1\xdd\xb1\xed\x61\x5e\xb2\x4a\x78\xa5\x2c\x25\x19\xfa" +
	"\x89\x06\xc7\x4e\x9d\xf0\xe3\x43\x20\x45\x8b\x8a\x3d\x00\xc0\xe3\x03\x80\xc7\x05\xf9\xdc\xd7\x9f\x00\x46\x58\x93" +
	"\x78\x4f\x69\xaa\x22\x7e\x47\xdf\xc3\xe4\xb9\xfb\x6e\x52\xcf\x30\x06\xea\x01\x3d\x06\xb2\x98\x0d\x7a\x4a\xb9\xc3" +
	"\xa2\x52\x7f\x3b\x5e\x76\x95\x02\x1d\x37\xd8\x3d\x3e\xe4\x48\xa6\x91\x2f\x93\x94\xd8\xc3\x07\x47\x47\xf2\x5d\x28" +
	"\xe3\x45\x3e\x8d\x8e\xde\x9a\xa3\x71\x23\xfa\x92\xd0\x9f\xc7\x50\xf7\xb2\x91\x48\x3d\x7c\xae\x2c\x11\x0d\xd9\x0a" +
	"\xae\xd1\x3b\x8b\xf5\xf2\x5b\x62\x89\xc4\x9f\x7e\x7b\xf9\xf2\xfd\x9b\x59\x51\xc0\x2d\x0a\x10\x93\x44\x4a\xea\xf6" +
	"\x11\xd4\x75\x24\xfc\x01\x04\xb0\x94\x4d\x72\xb1\xb1\xc2\x8f\xd3\xe3\x2d\x80\xa7\xca\x3e\x1a\x81\xad\xd2\x53\x06" +
	"\x5d\x11\xac\x47\x8c\x2c\xe4\xe6\x19\x64\x00\x5d\xb9\x0c\x89\x62\xa2\x4c\xac\x38\xe6\xe8\x98\x4c\x06\x40\x06\x59" +
	"\xfc\x45\x46\x3b\x78\xa3\x54\x59\x20\xaf\xa4\x78\x5b\xd3\xb5\xa6\xa4\x90\xc8\xc8\x92\xdd\x3f\x7b\xea\x0c\x2a\xcd" +
	"\xa7\x47\xa5\xac\xa7\x94\x8e\x95\x12\xa3\xaf\xd2\x14\xfa\x16\x90\x2d\x04\xdc\x40\xa2\xea\x04\x0a\x1f\xd1\xb5\x23" +
	"\xb9\x83\x5f\x25\x11\x38\x1e\xa4\x87\x95\x6a\xcc\xfd\x6c\xb6\x74\xba\xab\x3e\x23\x21\x14\x76\xba\x99\xb5\x02\x72" +
	"\x8b\xa2\x92\xf2\xcc\xd2\x9a\xfc\x0c\xa3\x9b\xb6\x40\x59\x5b\xc5\x06\xfb\x4d\xda\x16\x66\x7e\x3a\x8e\x4c\x37\x35" +
	"\x7b\x59\x93\xe3\xe5\x01\x6f\x75\x70\xbf\xf6\xbf\x38\xb6\xe0\x32\xe0\x96\x68\xbc\xc1\x41\xe2\x0a\x55\x61\x5e\x7f" +
	"\x7e\xfb\x1d\x76\x71\xb4\x34\x9c\xe9\xde\x14\x3f\xd8\xe5\x83\xf8\x55\x2b\xc7\x03\xa5\x31\x7b\x43\x92\xd0\x28\x89" +
	"\x6d\x14\xc7\xda\x3e\x8c\x77\xc4\x67\xc2\xe7\xb2\x08\x4e\x6b\xbe\xff\x2e\x94\xb5\x26\xa9\x83\x39\x32\x8b\xc2\x82" +
	"\xa0\x44\x8b\x4a\xb6\x83\x17\x86\x39\x06\xf2\x73\xcc\xf4\x7f\x4b\x5f\x45\xce\xd3\x2a\xea\x3d\xe2\xef\x5f\x8b\xcb" +
	"\xa3\xa3\x40\x07\x7c\xdf\xe8\xbb\x75\xb5\x9f\xea\x32\x27\x8f\xd3\xb5\xf6\xba\x1d\x50\x5d\xc4\xb8\xf0\x44\x5f\x4d" +
	"\xd1\xdb\x86\x0b\x11\x4f\x78\xd6\x4c\x51\xbc\x33\x9b\x0b\x0b\xe2\x12\x2e\xc0\x29\x64\xad\x7e\x2e\x71\x23\x21\xa2" +
	"\xd1\xfb\x03\xce\xe4\xc9\xa8\xa4\x0b\x1f\x27\xa5\xfc\xf4\x12\xa2\x24\x45\xd6\x1e\x5e\x0b\xc3\x24\xe0\x3b\x4d\x6a" +
	"\x23\x27\x5a\x12\x53\x42\x25\x30\x62\x09\x70\x50\x4a\x10\xc4\xba\x61\x33\xd6\x73\x2d\x43\xe7\xe9\xe9\x7a\x4c\xe7" +
	"\xa9\x82\x56\x81\x2e\xd1\x69\x63\x4d\xf7\x81\xde\x91\x6d\x45\x2d\xf9\xbe\x7c\x6f\x1f\xea\xf9\x7e\xb6\x5c\xe8\x70" +
	"\xd3\x74\x14\x29\x7a\xd9\x04\x62\x35\xc2\x83\x5b\x5e\x3b\x73\xfb\xa6\xe7\x1c\xff\xdd\xfa\xaa\x56\xa3\x5e\x47\xb4" +
	"\x1f\x6d\x6e\xe3\xbe\x37\x39\xe7\xf8\x7a\x37\xf9\xd7\xcf\xe8\xe3\xaa\x4e\xf9\x23\xf9\xd1\x18\x8a\x4a\xf6\xf3\xc5" +
	"\xec\x9c\x4c\x4e\x07\xe6\xf8\x6d\x84\x6d\xfb\x2f\x90\x7b\xf8\xe3\xcf\x36\x36\x55\x12\xd9\x6d\x1f\x36\xf4\xdf\x00" +
	"\x00\x00\xff\xff\x94\xf6\x18\xeb\x6f\x08\x00\x00")

func bindataCustomResourceDefinitionalamedascalersCRDyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCustomResourceDefinitionalamedascalersCRDyaml,
		"CustomResourceDefinition/alamedascalersCRD.yaml",
	)
}



func bindataCustomResourceDefinitionalamedascalersCRDyaml() (*asset, error) {
	bytes, err := bindataCustomResourceDefinitionalamedascalersCRDyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "CustomResourceDefinition/alamedascalersCRD.yaml",
		size: 2159,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1556078985, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataConfigMapdashboardsconfigyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x7d\x7b\x73\xdb\x36\xd6\xf7\xff\x9d\xe9\x77\xc0\xcb\xf6\xdd\xda\x59" +
	"\xc9\x11\x65\xcb\x17\xcd\x78\x67\x12\xa7\x69\x33\xd3\xa4\x7e\x12\x67\x77\xba\x91\x1f\x0d\x4c\x42\x12\x6a\x92\xe0" +
	"\x02\xa0\x63\x27\xcd\x7e\xf6\x67\x00\xde\x49\x90\xa2\xee\x92\x8d\xcc\xb4\x89\x70\x21\x09\xe0\xe0\xe0\x77\x2e\x38" +
	"\x07\xfa\xf8\x9f\x88\x32\x4c\xbc\x3e\xb8\x33\xbf\xff\xee\x16\x7b\x76\x1f\x5c\x10\x6f\x84\xc7\x6f\xa1\xff\xfd\x77" +
	"\x2e\xe2\xd0\x86\x1c\xf6\xbf\xff\x0e\x00\x0f\xba\xa8\x0f\x6c\xc8\x26\x37\x04\x52\x9b\xb5\x2d\xd9\x30\xae\x62\x3e" +
	"\xb4\x50\x1f\x8c\x90\x8d\x28\xe4\x84\x42\xfc\xfd\x77\xb2\x2f\x00\xa2\x89\xe5\x04\x8c\x23\x3a\x41\xd0\xe1\x93\x83" +
	"\x3f\x99\x78\xe7\x5f\x6d\x51\x03\xc0\xd7\xf0\x2f\x00\x0c\xe8\x79\x84\x43\x8e\x89\xc7\x8c\x7e\x5a\x0e\x80\xe1\x60" +
	"\xc6\x8d\x3e\xf8\x94\x16\x81\x6c\xbd\x6c\x73\x13\x60\x87\xbf\xf1\x8c\x3e\x30\x5b\x85\x2a\xf1\x25\x8c\x04\xd4\x42" +
	"\x46\x1f\x18\xed\x36\xf8\x85\xc2\x11\xf4\x20\x68\xb7\x8d\x62\x5b\xe4\xc1\x1b\x47\xb4\xe3\x34\x40\xc5\xca\x09\xb6" +
	"\xab\xaa\xb0\x45\xbc\x0b\xe2\x10\x2a\x5e\x41\xc7\x37\x70\xaf\xd3\x02\x5d\xd3\x6c\x81\x6e\xaf\xd7\x02\xe6\x7e\xe9" +
	"\x4d\x62\xde\x44\xe3\x17\xe9\xb0\xc1\xdf\xc0\x0b\x07\x51\xce\x4a\x8d\xf9\x83\x2f\x1b\x27\x2b\x60\x64\x1b\x7c\x4b" +
	"\x7f\x5c\xc7\xff\xfc\x96\x3c\xc2\x40\x36\xe6\xaa\x51\x19\x63\x0f\xf1\x37\xb6\xd1\x07\x5e\xe0\x38\x99\x62\x0a\xfd" +
	"\xc9\x15\x21\x0e\xc7\xbe\xd1\x07\x9d\xb4\x06\xdb\xb9\xf9\x35\x1c\xec\xdd\x8a\xc5\xfa\x74\x9d\x96\xf9\xd0\x43\x0e" +
	"\xcb\x2f\x57\x6e\xb1\x0c\x8b\x38\x0e\xf4\x19\x12\x0f\x1b\x41\x87\xe5\x27\xd3\x18\x53\x6c\x5f\x92\x02\x0d\x84\xf3" +
	"\xaf\x5a\xdd\xcf\x46\x1f\x74\x8f\x8a\xa5\xf7\xb9\x0f\x8f\x0a\x1f\x44\x61\x6e\xe2\xf2\x6f\x96\xc3\x3b\xcd\x97\xa5" +
	"\xc3\xb9\xce\x57\x70\xcc\xe5\x94\x1a\x17\x21\x75\x83\x5f\x25\x79\x83\x0f\x1c\xf2\xa0\xb0\x82\xc9\xfa\x51\xf2\x39" +
	"\xb3\x72\xd9\xd7\x17\xa6\x08\x5a\x13\x74\x85\x5d\x44\x02\x5e\x5c\x9f\x78\x0e\x09\x7d\x09\xad\xdb\x31\x25\x81\x57" +
	"\x31\x93\xb2\xd1\x3f\xa1\x13\x28\xa9\x36\xac\x66\xc5\x8d\x05\x22\xfa\xed\x1e\xf5\x5a\xa0\x77\x14\xfe\xd7\x39\x38" +
	"\x2b\x53\x70\xd8\xec\xf0\xa4\x05\xcc\xee\x59\x0b\x1c\x75\x44\xbb\xd3\xaa\x86\xbd\x4e\x0b\x98\x27\xdd\x16\x10\xcf" +
	"\xed\x1c\x9c\x9d\xec\xe7\x68\xb8\x30\xbb\xf9\x3d\x7b\x49\x89\x8b\xf8\x04\x95\xe6\xb5\x8a\xb4\x65\xe5\x88\x50\x17" +
	"\x8a\xe9\x33\x7c\x44\x2d\xe4\xf1\xc0\xc3\xbc\xf0\x80\x31\x0c\xc6\x48\x41\x6a\x2e\xbc\x8f\x27\xae\x44\x71\x2e\xf6" +
	"\xe2\xba\x12\x89\xb1\x09\xf9\x5c\xc1\x22\xf8\x84\x22\x36\x21\x8e\xfd\x1b\xbc\x09\x49\xaa\xb6\xd5\x5b\x48\x6f\x11" +
	"\x8d\x9b\xd5\x50\x6d\xfd\x7e\xe9\xa9\xf6\x4b\xf3\xed\x62\x4e\xdb\x2e\xdd\xe3\x42\xa1\xc7\x11\xbd\x83\x8e\x92\x6a" +
	"\x15\xfc\x22\x9a\x6d\xdf\xc7\xde\xf8\x2a\xdc\x25\x66\x65\xa5\x82\x58\x0b\x63\xce\x30\xd6\x3b\xb1\x46\x80\x13\xc0" +
	"\xd1\x3d\x2f\xd2\x24\x88\xea\x8b\x43\x2c\x0e\xb2\xee\x05\x14\x7a\xe3\x26\x2f\xe8\x16\x5e\x50\x43\xf6\x2e\xbc\x7f" +
	"\x05\x39\xbc\x24\xd8\xe3\x62\xb0\x66\x27\xbf\x2a\x86\x98\x53\x59\xfb\x96\xc8\xb3\xc8\xb0\x88\xe7\x21\x8b\x23\xdb" +
	"\x28\x37\xbc\x12\xdf\xa5\x5a\x07\x9f\x30\x3e\xc2\x62\xd1\x0d\x43\x59\xf3\x9a\x78\xfc\x03\xfe\x22\xdf\xd0\xeb\xfc" +
	"\xff\x62\x23\x8a\x2a\x7a\xcb\x8a\xfa\xce\x72\xd6\xde\x42\xbf\xd1\x5a\x8e\x28\x71\xc5\x63\xc4\x10\x14\x33\xcc\xc3" +
	"\x01\x1a\xef\x9e\xbf\x50\xd5\x92\xa4\x6b\xf3\x15\x60\x3e\xa4\xb7\x0e\xf6\x54\x4c\x61\x84\x1d\x27\x7f\xc8\x1f\x9a" +
	"\x2d\x60\x9a\xa7\x2d\x60\x9e\x9e\x09\xae\x66\x9e\x96\xb9\xdf\x48\x7c\x80\x8a\x3f\x87\x1b\x02\x65\x9f\x18\x3e\xb0" +
	"\x2b\x58\xe5\xd9\x61\xf9\x51\x11\x77\x91\x8f\xaa\xd9\x98\x92\x25\x5e\x10\x27\x70\x3d\xc5\x22\x71\x48\xc7\x88\x37" +
	"\x9a\x7e\x74\xef\xcb\x2f\xdb\x63\x81\xbb\x17\xf8\x5f\xff\x24\x37\xe7\xff\x1d\x18\x07\xcf\xa0\x8f\x19\xa2\x77\x88" +
	"\x1e\x3c\x1b\x18\xdf\xc0\xf9\x39\x30\xf7\xc1\x73\x60\x91\xc0\xe3\x35\x0d\xf7\x4b\x43\xca\xb1\x69\x8e\x5d\x34\x64" +
	"\x88\x62\x54\x42\x40\x19\xce\xf2\x1a\x5a\x5c\x4e\x58\xb7\xdc\x86\xa2\x91\x04\x34\x86\x8a\x1e\x18\x47\x02\xcf\x1c" +
	"\x77\x3a\xcd\xc9\x21\x61\xc7\x62\xbe\x8c\xce\x81\x3c\xbb\x4e\x8b\x33\x1a\x43\x81\x17\x97\x6f\xc0\x07\x39\x5c\x06" +
	"\x3e\x5e\x16\x5b\x51\xe8\x09\xea\x42\x1e\x57\x1e\x57\x31\x46\x60\xd8\x1b\x3b\x88\x71\x58\x3c\xab\x24\x3f\xc9\x6e" +
	"\xae\xd3\xd2\xe6\x92\x4d\x9a\x6e\x2e\x22\x66\xc3\x38\x9f\x79\x5f\xc5\x7c\x6d\xd6\xad\x25\xfb\xbd\x8b\x98\x27\xbc" +
	"\x1b\x37\x42\x42\xd0\xc1\x90\x5d\xc4\x48\xe5\x6b\x81\xd2\x6f\xa0\x2c\x56\x60\x1f\x81\x94\x7f\x43\xde\x98\x4b\xd0" +
	"\xd8\x29\x57\xa2\xca\x8e\x8b\x23\x0f\x44\xa9\xa4\x50\xc5\xe3\x05\x0f\x29\x9f\x71\xe2\x0c\x57\x30\x9c\x84\xfa\xcc" +
	"\x3c\xdb\xe9\x9a\xc7\x2d\xd0\xed\x08\x11\xe3\x44\x10\x64\xf7\xa4\xcc\x2b\x92\xbe\xdd\x42\xdf\xc3\x23\xc1\xb3\xba" +
	"\xd1\xff\x3a\x07\xdd\x6e\x1e\x89\x2d\x0e\x2f\xcc\x12\x94\xb8\x57\x81\x8e\x46\xf8\xe2\xb0\x5b\x28\x64\xef\xd0\x67" +
	"\xf5\xd4\x3a\x68\x8c\x3c\xd5\x34\x42\x07\x8f\xbd\x17\xec\x2a\x5a\x2f\x25\x27\x16\xf4\x58\x51\x65\x05\x34\xda\xb4" +
	"\xca\x6a\x21\x15\xfe\xec\xfa\xfc\xa1\xae\xc1\xbf\x11\x25\x55\xf5\x2e\xbc\xaf\xac\xc2\x5e\x55\x15\xc5\xe3\x09\xff" +
	"\x10\x4a\xa4\xca\x06\x75\x50\x94\x70\x58\x79\x26\xc9\x6d\xca\x1a\x1c\x33\xe2\xf0\x52\xc2\x58\x59\xf3\x19\xdb\xbc" +
	"\x2c\xb0\x55\x42\xc0\x12\xb0\x29\x1f\xf9\x31\x8c\x87\x63\xf5\x98\x0d\x5f\xf4\xa7\xd0\xc6\x01\x2b\x91\x66\x58\x59" +
	"\xb1\xe7\x29\xf2\x6c\x44\x91\xdc\x24\x23\x87\x14\x19\x6f\x78\x24\xfd\x7e\x87\x28\xc5\x36\x52\x7d\xbd\x54\x80\x54" +
	"\xb2\x1b\xc6\xa1\x75\xab\x7e\xb3\x38\x93\x7c\x64\xff\x16\x02\x0e\x45\x83\x39\x4e\x6b\x16\xb8\xe0\xe6\x61\x0f\x7b" +
	"\x8c\x43\xcf\x42\xfb\x60\x8f\x42\x8e\xf6\x92\xa3\x78\x48\xd1\x7f\x02\xc4\xf8\x50\x1e\xd7\x5f\x2d\x62\x23\x71\x58" +
	"\xf7\x0e\x0e\x06\xc6\xb7\x4f\x3d\xf7\x7a\x5f\x9c\xe5\xb3\x3d\x25\xec\xb6\xe2\xd3\x3d\xdc\xe0\xaf\x93\x27\x7e\xfd" +
	"\x1a\x7f\xdd\xb7\x6f\x8a\x47\x36\x03\x03\x73\x62\x81\xb2\x3a\xc0\x45\xaf\x43\xb4\x5a\xc6\xdb\xa2\xf2\x3d\x1a\x47" +
	"\xaa\x2d\x55\xd7\x0f\x13\x3c\x52\x63\x75\x05\xb8\x00\xef\xc3\xa9\x07\x3f\x8b\x73\x06\xbc\x87\xbc\x38\xa5\x06\x4f" +
	"\xd4\x37\x25\xc9\x96\xbd\x47\x8c\x38\x01\xc7\xa4\x92\xb7\xb0\x09\xa4\x52\x3d\xa3\x62\x1e\x8c\x50\xae\x12\x17\x25" +
	"\xdf\x18\xc6\x28\x06\x7b\x36\xbe\xc3\x76\x00\x9d\xba\xc3\x25\x8f\x89\x54\xe4\x1f\x3d\x4e\xea\xa4\x0a\x63\xbc\x87" +
	"\xf7\x58\x75\x2e\xdd\x04\xd6\x6d\xb8\x65\x4a\xb3\x29\xc6\x1f\xf1\x17\x31\xeb\x55\x4a\x39\x55\xbf\x1a\x76\x9a\x70" +
	"\xcc\x4f\xd7\x35\x63\x7d\x80\xf7\xcd\x04\xd8\x06\x7a\x0b\xd9\xce\x21\xe3\x97\x90\xa9\x54\x14\xc9\xa1\x62\x98\x2a" +
	"\xd2\x4f\x47\x52\x20\xfe\xa9\xa2\x6f\xfa\x69\x6c\x22\xc8\x60\xc6\x8f\xaa\x7e\x73\xcd\xb6\x7b\xa8\x58\x66\x79\xaa" +
	"\x57\x1e\xe7\xa2\xf2\x37\x74\x87\x62\x45\x44\x6e\x61\x9a\x00\xcf\x2d\x50\xc1\x29\x54\x66\x8b\xe9\xe0\xca\x3a\xbd" +
	"\x9a\x79\x6f\x08\x84\x6d\xc4\x2c\x8a\xfd\x88\x9d\x18\x17\x14\xb2\x09\xf6\xc6\xe0\x92\xd8\x0c\x60\x0f\x58\xc4\xe3" +
	"\x94\x38\xc0\x77\xa0\x87\xc0\xde\x6d\x70\x83\xda\xec\x81\x71\xe4\xee\xcf\xa7\xcc\xf3\x88\x87\xe6\xd0\xe2\x75\x4a" +
	"\x0c\xab\x81\x1e\x4f\x49\x5b\x65\x45\x5e\x7d\xb3\x55\x6a\xf2\x4a\x85\x62\xd7\x9b\xf3\x41\xed\x82\x16\x5d\xab\xf2" +
	"\xca\x2f\xd0\xaa\xbc\x1c\x6c\xd6\xaa\xbc\xb4\x6e\x47\x54\x79\xa1\x8a\x0e\x7b\x16\x45\x90\x21\xc9\x8e\x87\x3e\xb1" +
	"\x87\x82\x4d\x43\xec\x21\x3a\x64\xd2\x80\x35\xa4\x88\x71\x48\x39\x1b\x4a\x61\xf1\x6b\x62\xe6\x15\xa2\x42\x86\x89" +
	"\x0b\x91\xc1\x9c\x5c\xef\x83\x7f\x80\xde\x8e\x6b\xf7\xcc\x16\x38\xac\xd2\xec\x25\xc7\xda\x45\x74\x9c\x5d\xca\xe3" +
	"\x4c\x1c\x72\xb5\x6a\xbe\x1a\x48\xbb\x45\x7a\xbe\xce\xaa\xb4\x7c\xb1\xea\x44\x03\xae\x35\x02\xae\xc8\x1e\x2d\x36" +
	"\xb9\x13\xd8\x08\xf0\x09\xca\xa3\x30\x0d\xbc\x56\x05\xbc\xce\xe6\x02\x5e\xbd\xa2\x8e\x53\x03\xaf\xe2\x0b\x34\xf0" +
	"\xd2\xc0\xeb\x49\x02\xaf\x27\x05\xae\x34\x9c\xda\x6a\x38\x55\x55\xff\x24\x7c\xc8\x9e\x2a\xfa\x29\xe9\x92\x66\x73" +
	"\x20\x3b\x9e\x06\x7e\x8e\xb4\x03\x99\x06\x3f\xf9\x0a\x0d\x7e\xf2\xbd\x1e\x0b\xf8\x89\x1c\xc3\x42\xfd\x91\x83\xf8" +
	"\xc0\xf8\xb6\xe3\xa8\xa6\x0a\xd1\x5c\x09\xe8\x06\xde\x11\xbb\x6c\x98\xdd\x41\x3c\xb3\x42\x37\xb0\x1d\x53\x10\xed" +
	"\x04\xa0\xb1\x91\x85\x5d\xe8\x28\x0d\xe0\xda\x63\x7e\x89\x80\x47\x69\x66\xab\x03\x3c\x13\x6c\x4b\x02\x8e\x5d\x89" +
	"\xd4\x14\x1a\x1a\xe3\xb4\x4e\x48\xc3\xa2\x7c\x85\x86\x45\xf9\x5e\xbb\x0f\x8b\x58\xe0\x86\x8a\x20\x8f\xd8\x28\xd6" +
	"\xff\x58\xc4\xb3\x31\xc7\xc4\xfb\x9a\xfc\xeb\x7c\x60\xbc\x47\xd0\x7e\x18\x18\xad\xb0\xd1\xf9\xc0\x10\x3c\x4e\x00" +
	"\xa8\xd0\x55\x6f\xc6\xc7\xac\x1c\x77\x15\x5d\xf5\xe6\x76\xcf\x5b\xc8\x57\xbf\x73\x70\x56\x85\xd0\x04\x36\x03\x72" +
	"\x36\xb4\x9b\x7e\x0d\x3e\x73\xb1\xa7\xb1\x99\xbe\xb0\xb8\x95\xf0\xeb\x74\x2e\x7d\x53\xf7\x54\x03\x2b\x0d\xac\x72" +
	"\x15\x1a\x58\xe5\x7b\xed\x3e\xb0\xca\x5e\x58\xcc\xaa\x9b\xd4\x37\x15\x73\x0a\xa9\x1d\xd7\x48\x4d\xbb\xa2\x28\x75" +
	"\x52\xfa\x72\xe2\xa3\x41\x3d\x3b\xe2\xb2\xa4\x35\x52\x6b\x81\x44\x66\x91\xe1\x2c\x55\x25\xd5\xd1\xc8\x49\x23\xa7" +
	"\x5c\x85\x46\x4e\xf9\x5e\xbb\x8f\x9c\x66\xd0\x25\xbd\x45\x2e\xa1\x0f\x97\x14\x31\x16\x50\xb4\xb8\x6e\xaa\xf8\xbc" +
	"\x27\xa1\xa4\x32\x5b\x9d\x83\x5e\xad\x92\x2a\x9c\x16\x10\xcf\x8b\x06\x6e\x75\xc0\x0d\xde\x6b\xe0\xb6\x44\xe0\xa6" +
	"\xb1\xd9\x12\xb1\xd9\xf1\x0a\xb1\x59\xcf\xd4\xd8\x4c\x63\xb3\x5c\x85\xc6\x66\xf9\x5e\x4f\x0a\x9b\xbd\xc2\xec\x76" +
	"\x79\xc8\x2c\xff\x34\x8d\xcb\x24\x2e\x13\x93\xa2\x51\x59\xc5\x74\x6a\x54\xb6\xbe\x1b\x80\x97\x49\x58\x24\x40\x46" +
	"\xc0\x93\x0a\x5e\x72\x87\x68\x72\x13\x90\x4f\x20\x07\x13\x78\x87\x40\xe0\x31\x6b\x82\xec\xc0\x41\x36\x20\x37\x7f" +
	"\x22\xab\x18\x6b\x58\x23\xbe\x25\x22\xbe\xee\xcc\x1e\xf1\x33\x20\x3e\x53\x3b\x88\x69\xc4\x97\xaf\xd0\x88\x2f\xdf" +
	"\xeb\xd1\x21\x3e\x1f\x59\xc3\x84\x85\x8b\x77\xed\x83\x5a\x5b\xe6\x93\xc0\x69\x60\x0a\x50\x63\xe0\x63\x76\xca\x36" +
	"\x8d\xd4\x96\x02\x94\x36\x19\x41\xdf\x9c\x1a\x42\xbf\x77\x56\xe0\x4e\x8d\x63\xe8\xbf\x47\x21\xfc\x01\x1f\x19\x1c" +
	"\x97\x96\x6a\xc6\x20\xfa\xdb\x1a\x3a\xb6\x00\xdf\x3e\x72\xec\xe0\x2f\x32\x03\x04\x80\x63\x88\x3d\xc6\x81\xbc\xfa" +
	"\x9b\xe0\xb7\x8b\xcb\x8f\x80\x46\x33\x53\x78\x56\x75\x38\xd9\x6a\x02\x28\xe9\xa1\x3e\x2b\x2d\x87\xd5\x04\x30\x3d" +
	"\xa0\x41\x21\x92\x54\x75\x64\xd6\xb9\xa3\xae\xce\x17\x34\x55\xc7\x44\x2d\x57\x3e\x89\x98\xa8\xe2\xfc\xec\xcb\x43" +
	"\xd4\xf2\x83\x61\x20\xb6\x1c\x93\x5b\xae\x0f\xef\xc6\xa6\x0b\x9e\x81\xb4\x85\x17\xb8\xa2\x55\x9f\x05\x2e\x78\x0e" +
	"\x98\x05\x1d\x48\xa5\x43\x91\xb2\xc9\x42\x0e\x43\x42\x8e\xf5\x5f\x3e\x94\x47\xa2\x1c\x4d\xb8\x66\x90\x42\x57\x31" +
	"\xf6\xa4\xc1\x8f\xc3\x61\x22\x0b\xa8\x9a\x5c\x97\x3e\x03\x64\xb9\xab\x8c\x8b\x59\x6e\x51\x44\xe7\x0b\x7c\xa0\x02" +
	"\x18\x36\xfa\x32\xc9\xeb\x14\x5f\x56\x2c\x2a\x3f\x66\xce\xe8\xb2\x62\xa9\x95\x91\x65\x09\xb5\x11\x7d\xf9\x20\x24" +
	"\x35\x89\x6d\x3e\x5c\x28\x1a\xf9\xc4\xc1\x96\x58\x5a\xc3\x46\x23\x18\x38\x2a\x49\xa5\x16\x1e\x51\xc4\x02\x87\xbf" +
	"\x6e\x48\x4a\x0c\x39\xc8\x2a\xa5\x49\x0a\xff\x28\x57\x42\xb9\x7a\x0d\xd6\x2f\x11\xb0\xd4\xd5\xea\x45\xcc\x2d\x23" +
	"\x72\x6c\x65\x67\x15\x8d\x35\xf9\xce\xa9\xaf\x74\x11\xf4\xd4\x6f\x2c\x17\x5e\x37\x20\x27\x0e\xc7\xe5\x70\xaf\x5b" +
	"\x1d\x3c\x58\x40\x88\x8f\x29\xd7\x2b\x22\xab\xca\x68\xc1\xeb\x8b\x04\xac\x03\xfd\x56\x07\xfa\x85\x37\x48\xa9\xd7" +
	"\x09\x6b\xe7\x0c\x03\x1c\xc2\x24\x65\xb0\x92\xd5\x46\x08\x5e\x74\x34\xea\x8e\xe1\x70\xd4\x75\x55\xe2\xfb\x56\x06" +
	"\x1e\x7e\x34\x62\x8b\x1b\x3a\xae\x6c\x46\x72\x51\x7b\x42\x36\x10\x5d\x8e\xb5\xe8\xa2\x45\x97\xed\x14\x5d\xc2\x0d" +
	"\x95\x93\x5e\xa8\xf8\x4b\x0b\x20\xb3\x7d\xa0\x16\x40\x92\x36\x5a\x00\xc9\xfe\xd1\x02\xc8\xca\x04\x90\xc8\x8b\x55" +
	"\xcb\x20\x69\xa5\x96\x41\xb4\x0c\x02\xb4\x0c\x02\x56\x29\x83\xd8\x98\xdd\x6e\x95\xed\xe4\x64\xaa\x00\xd2\xd3\x02" +
	"\x88\x16\x40\xb6\x49\x00\x61\x81\xbb\xe7\xc2\x7b\x69\xfe\x18\x8e\xb0\x83\xc2\xcc\x0f\x43\x86\xbf\xa0\xe1\xcd\x03" +
	"\x47\xec\xeb\x88\x89\xb3\xf3\xfc\xbf\x03\x03\xdd\xf3\x4f\xdd\xc3\xa3\xeb\xbf\x6e\x38\x1d\xb1\xbf\xee\x47\xec\xaf" +
	"\x2f\x23\x36\x30\xbe\x81\x36\x28\x3e\x00\xde\x41\xec\x34\x7f\xc2\x3e\xb8\x79\x00\x7b\x36\xba\xc3\x16\x6a\xf9\xc4" +
	"\x6e\x25\x39\x29\xf6\xc3\xaa\x7c\xd9\xc0\xcb\x19\x6f\x16\x1f\x41\xdd\xfb\xf7\x07\xde\x33\x40\x3c\xb0\x97\x94\xb5" +
	"\x80\x4f\xec\x7d\x20\x05\xac\xa1\x83\x46\x1c\xc8\xd7\xef\x87\xb3\x90\x34\x1b\xfa\xc4\xee\x27\xc1\xa0\xb1\x37\x22" +
	"\x7d\x2d\xce\xcd\xf6\x81\x5a\x9c\x4b\xda\x68\x71\x2e\xfb\x47\x8b\x73\x2b\x13\xe7\xa4\xf3\xfb\x05\xf4\xa1\x85\x79" +
	"\x29\x82\x96\x96\xe4\xb2\x43\xd6\x92\x9c\x96\xe4\xb4\x24\x57\x94\xe4\x36\x63\xfe\x99\x2e\x7d\x9d\x68\xe9\x4b\x4b" +
	"\x5f\xdb\x24\x7d\xa5\xe6\x1f\x1b\xb3\xdb\xa2\xeb\xda\x10\x53\xc8\x51\xea\xa6\x96\x17\x25\x42\xb7\x71\xe9\x1f\xde" +
	"\xd7\x6e\x6a\x33\x7e\xa0\x16\x2b\x92\x36\x5a\xac\xc8\xfe\xd1\x62\xc5\x6a\xc5\x8a\x37\xbf\x6b\x33\x51\xa6\x52\x0b" +
	"\x17\x5a\xb8\x00\x1b\x15\x2e\xe2\x7f\xa6\x2f\x15\x27\x82\x60\x14\xa5\x47\x1b\xcc\x9a\x20\x17\xfe\x13\x51\x16\xda" +
	"\x68\x32\x51\x4f\x0c\xc6\x1f\xc2\x6d\x6e\x43\x7a\x9b\x4e\x77\xca\xa7\x32\x45\xc8\xf5\x1d\xc8\xb1\x37\xce\x8f\xca" +
	"\x70\x30\xe3\x39\xaa\xfe\x96\xe9\x14\x1e\x74\xd9\xe6\xc9\x3d\x46\xf2\xb9\x6d\xe6\x36\x6b\x7c\x4b\x31\x73\x99\xa8" +
	"\xf0\x28\x1f\x5b\xb7\x12\x45\x66\x1f\x18\x0d\x3c\xc1\x2e\xa5\xdd\x63\xf4\x8a\xa2\x8e\xd9\x29\x96\x1c\x96\x4a\x4c" +
	"\xb7\x50\xd0\x2b\x16\x98\xa5\x92\xc3\x4e\xa9\x4d\x91\x1d\x75\x8b\x05\x66\xf6\x48\xbb\xce\x4d\x87\x38\xb6\x89\x34" +
	"\xad\x29\xc6\x34\xfd\x6b\x4a\xef\x3e\x2e\xbd\xbb\xf4\x35\xdd\xa3\x52\x49\xf1\x3a\xed\x49\xb1\xe0\xb0\x93\x1b\x42" +
	"\xc5\xda\x7d\x21\x12\x82\x1b\x59\x2a\x2b\x5e\x36\xfb\x15\x41\x87\x67\x3e\xc0\x08\xa4\x08\x68\xbc\x47\x27\xf6\xa9" +
	"\x7b\xe5\xd8\xb6\x7b\x0b\x33\xd5\x77\x29\x51\x87\x65\x72\x63\x08\xf4\x35\x91\x4f\x3a\xf8\x93\x11\xaf\x0f\xfe\x6a" +
	"\x87\xb5\x09\xd5\x18\xd0\xf3\x08\x87\xf1\xcc\xaa\xa8\x39\x3b\xc2\xf2\xd1\x81\x1d\xfe\xc6\x53\xdd\xdc\xcb\xcb\xda" +
	"\xed\x36\xf8\x85\xc2\x11\xf4\x20\x68\xb7\x4b\xc7\x08\xf2\xaa\xae\xf5\x47\xf7\xce\x2b\xaa\xb0\x45\xbc\xfc\xdd\xdb" +
	"\x4e\x0b\x74\x4d\xb3\x05\xba\xbd\x5e\x0b\x98\xe5\xcb\xb2\xf1\x35\xed\x17\xe9\xb0\xc1\xdf\xc0\x0b\x07\xd1\x62\xb4" +
	"\x81\xcc\x61\x6a\x43\x36\xb9\x21\x90\xe6\x21\xd7\xb7\xfa\x95\xae\x0a\x56\x60\x8c\x3d\xc4\x25\x62\xcd\x31\xd9\xf0" +
	"\xc4\xbe\x4a\x10\x44\x8a\x06\xa2\x00\x97\x99\xdf\x1c\x51\x18\x99\x99\xcd\x5e\xaf\x7b\x74\x6c\x9e\x1c\x77\x4f\x33" +
	"\xc9\xea\x54\xb2\x6f\xe6\xa6\x63\xfa\xe1\x5b\x74\x75\x73\xea\xcd\xcd\x42\x4c\x81\xe9\x17\x37\xa3\x34\x0a\x4b\xbc" +
	"\xb5\xb9\xe1\xbc\x95\x3f\x74\xcf\xce\xac\xa3\xe3\xf9\xa3\x7e\xfc\x60\x1f\x1d\xc1\x43\xb8\xfc\x30\x1f\x5e\xe0\xde" +
	"\x20\x0a\xc8\x48\xde\x07\xb5\x08\x2d\xe5\x16\xd3\xc9\x2a\x95\x1a\xc2\x19\xae\x36\x4f\xdb\x1f\xc7\x3a\x59\xa5\x0e" +
	"\xba\x91\xaf\xd0\x41\x37\xf2\xbd\x76\x3f\xe8\x46\x39\x28\x5a\x64\xe7\x94\x77\x87\x25\xe3\x95\x3a\xb7\xf3\x81\xf1" +
	"\xa3\xf8\x7b\x60\xa8\x94\x6f\x73\x07\xda\x50\x08\x93\x19\xfd\x5b\xf3\xb5\x6d\x96\xa9\x52\x9c\x25\x55\x76\xdc\x27" +
	"\x15\xa4\x0c\xde\x8d\x77\x25\x48\xd9\x22\x29\x8c\xd4\xb8\x66\xb5\x31\xff\xbb\x55\x30\x25\xd2\x25\xad\x0b\xa9\x34" +
	"\x8b\x21\xb6\x39\xa0\xd2\x53\x01\x15\x65\x92\xc9\x99\x23\x70\x68\xa0\x52\x7a\x81\x06\x2a\x1a\xa8\xec\x36\x50\x99" +
	"\x12\xd4\xa4\x08\x52\xc0\x33\x41\xb8\xdb\x0f\x55\xc4\xa9\x75\xda\xa9\x03\x2c\x75\x7a\x06\x8d\x56\xb2\x9d\xb6\xd5" +
	"\xfd\xa7\xa0\xdb\x50\x3b\x07\x75\x16\x3e\x51\x4d\xe5\x91\x7a\x36\xeb\x91\x3a\x41\x78\x3c\x91\x4b\xda\x3d\xec\xf8" +
	"\xf7\x86\xe2\xc0\x3d\x39\x2c\x9c\xa9\x95\x8e\x43\x0e\x1e\x7b\x2f\xd8\x55\x8d\x36\xb6\x91\x6f\x51\x95\x1a\xf7\x67" +
	"\xd7\xe7\x0f\x55\xdd\x45\x83\x7f\x23\x4a\x96\xeb\x9b\x44\xc5\xec\x7c\xa8\x56\x21\xd7\xc0\xaf\xc8\x2e\x9b\x8c\x4b" +
	"\x55\xff\x0a\x31\x6b\x21\xd7\xa7\x29\x48\xad\x99\xe7\x53\xb7\x19\x66\xd2\x9e\x4f\x4b\xf3\x7c\xe2\xc4\xbf\xdd\xeb" +
	"\xb5\x64\xa0\x72\x0a\x39\xda\xb3\x88\xc7\x21\xf6\x10\x0d\xcf\x3b\x71\x08\x0c\x19\xb2\x88\x67\xb3\xa1\xa4\x84\xaf" +
	"\xd8\x85\x63\xf4\xff\xce\x07\xc6\xc0\x90\xb7\x33\xce\xff\x3b\x30\xfe\xf7\xf6\x94\x0d\x0f\x9e\x0d\x8c\x56\xda\x5f" +
	"\xd4\x89\x66\x97\xbf\xbf\x1a\x18\xdf\x3e\x75\xdd\xeb\xfd\x01\x55\x5f\xe1\x90\x6d\x55\xf7\x38\xa4\x71\x78\x48\x91" +
	"\xef\x40\x0b\xed\x4d\xbd\xd5\x51\x3c\x8d\x5b\x60\x60\xc4\x8f\x1f\x18\xe2\xd7\x8f\x66\xf8\xb7\x4f\xec\xf0\x1f\x7b" +
	"\x07\xcf\xf6\x07\xc6\xfe\x3e\x88\x6f\xb7\x84\xdf\xb2\x58\x58\x4f\xc6\x61\xa5\x6f\x62\x5e\x50\x50\xc5\xf3\x9c\xcf" +
	"\x43\x29\x99\x47\xa0\xf4\x53\x72\x11\xa7\xd8\x8a\x60\x73\xfd\x0a\xcf\xea\x9c\x14\x85\x18\x3d\x9a\x13\x8b\xac\xdf" +
	"\x03\xe6\xea\xf7\x4b\xa9\xdf\xbf\x24\x76\xf1\xcc\xd4\xae\x2f\xb9\x21\xaf\xcb\xf5\xa5\x2e\x79\x21\x00\x5b\xee\x47" +
	"\xa2\xfd\x62\x36\xe1\x74\xaf\x6d\x98\x71\xb3\x94\x96\xe4\x35\x4b\x6d\x93\x9c\xd9\x26\x39\xf5\xca\xc2\xb1\x4e\x68" +
	"\xae\x55\x7d\xf9\x0a\xad\xea\xcb\xf7\xda\x7d\x55\x5f\xb5\x4d\x32\x0a\x0a\x16\xde\x62\x7f\x34\x66\xc9\xf7\x2f\xde" +
	"\x6a\xb3\x64\x56\x31\xb2\x21\xd8\xa1\x4d\x93\xeb\x01\x2c\x8f\xc7\x34\x39\xfd\x8a\xa5\xf6\xa1\xd2\x78\x25\x5f\xa1" +
	"\xf1\x4a\xbe\xd7\xee\xe3\x95\xda\xa0\xa5\x3b\x6c\x98\xac\xb6\x4b\xc6\x01\x0e\xb5\x69\x72\xc7\x4d\x93\x9b\x30\x3e" +
	"\xd6\x1d\x9a\xa9\xf1\xf1\xb0\x53\x65\x7c\x6c\x1c\x33\x6e\x85\xc6\xc7\xb5\xdb\x0e\xb5\xf1\x2f\x7f\x4c\x3e\x5a\xe3" +
	"\x5f\x6a\x15\x8a\x0f\x13\x69\x18\x0a\x45\xde\x8c\xc9\xef\xdb\xce\x58\xf0\x06\xde\x32\x4f\xbb\x46\x36\xb8\xf8\xe5" +
	"\x4a\x0b\x5c\x13\x1b\x9a\x39\x6f\x96\xbe\x0d\x18\xd1\x88\x0f\x7a\x20\x3a\x91\xdf\x78\x1c\x79\x0c\x69\x8b\x1a\xd8" +
	"\x16\x8b\x5a\x4a\xe8\x36\xb2\x14\x76\x01\xd9\x48\xdb\xcc\x56\x38\x9e\x9a\xad\xbb\x29\x93\xd9\x46\x53\x5a\x1e\xd6" +
	"\x90\x75\x88\xb0\x0a\x2a\x86\xa6\x37\x23\x03\xcf\xc3\xde\x18\x7c\x90\x4a\xdb\x05\x6f\x46\x6e\x2b\x60\xce\xa8\xd3" +
	"\x3a\x2b\x82\xd2\xb3\xac\xe5\xd1\xd4\xb5\x6c\x1c\xe3\x6b\xe5\x68\x59\x59\x23\x77\xb4\xaa\x66\x11\x3f\x3b\x6c\xa3" +
	"\x7f\xc5\x60\xb6\x57\x9a\xb8\x1d\x81\xd2\x00\x32\xf0\x05\x51\xa2\x21\xf5\x42\xc9\xa4\x05\x14\x8c\xcc\x48\xfe\x04" +
	"\x32\x54\xe5\xfa\x36\x57\xf4\xe2\x22\x4a\x16\x0f\x8f\xc2\x33\x8b\x77\x2d\xe2\xbc\x36\xa9\xca\x88\x0f\xc0\xea\x3c" +
	"\xd7\xc4\x47\x4f\x73\x5b\x53\xce\xea\xe3\x87\xd9\x02\x51\x17\x8e\x38\x70\x41\x82\x92\xd5\x44\xc3\xec\xdc\x90\x37" +
	"\xe0\xb8\x56\x9c\xc3\xcd\x23\xd6\x65\x07\x73\xda\xea\xc1\x3e\x06\x97\x36\x69\x1c\x68\x44\x77\xb1\x8e\xf9\xc5\xdd" +
	"\xb8\x4e\xc7\x9c\xd7\x13\x4f\x1b\xf6\x7c\xf7\x4a\xde\x11\x8e\xfa\xc0\xc1\x2e\xe6\xc0\x85\x0f\x00\xdd\x5b\x08\xd9" +
	"\x0c\x48\x05\x12\xc0\x1e\x80\xe2\x9c\x03\x76\x68\xf6\x03\x8c\xb8\x08\x24\xda\x26\x06\xc8\x08\x60\x0e\x80\x4d\x10" +
	"\x03\x1e\xe1\x60\x02\xef\x50\xf8\x34\x76\x50\x72\x74\x4b\xb5\xf7\x66\xa7\xa4\xbe\xaf\xc7\xbc\x25\x9d\xf0\x8c\x98" +
	"\xb7\x5b\x17\xd8\x45\x9c\x9a\x57\xd8\x45\x31\x4e\x51\x22\xb4\xd0\x93\xac\xd3\x0c\x9b\xf9\x70\x8c\xa2\xb1\x9e\x16" +
	"\x01\x93\x8f\xa0\xfa\xd4\x08\xab\x5e\x61\x8a\xac\x78\x75\xee\x8a\x78\xca\xa2\x44\x0a\x0c\xe5\xef\x13\x7b\xe5\x57" +
	"\x04\x6d\x89\xc5\x14\xd5\xe1\x51\x51\x9c\x5b\x8b\x38\x2a\x89\xc2\x0e\x2f\x94\x4c\x33\x8a\xc9\x70\x65\x8d\x28\x5e" +
	"\x4a\x66\xd1\x89\xa8\x20\x79\xe9\x32\x11\xe1\x58\x35\x2b\xa8\x72\xaa\x08\x67\x4e\xed\x07\x51\x7a\x4a\x73\xd7\x0a" +
	"\xd9\xf6\x07\xcb\xec\x59\xe6\x49\x29\xe0\xa4\x22\x90\xa4\x0d\x39\x4a\x51\xd1\x1f\x7f\xfc\xf1\x47\xfb\xed\xdb\xf6" +
	"\xab\x57\xe0\xd7\x5f\xfb\xae\xdb\x67\x2a\xb0\x56\xe9\x64\x01\x62\xd2\xaa\x86\x72\xa2\x36\x0d\xd3\xa4\x42\x73\xa2" +
	"\xc5\x47\x5a\x85\xf5\x7c\xc8\x39\xa2\x92\xc6\x62\xb5\xa7\xca\x16\x96\x43\x4f\x8a\x19\x3a\x54\x9c\x51\x00\x18\xa7" +
	"\x9d\x26\x73\x96\x18\xfd\x38\xc5\x9e\x8a\x11\xca\x08\x8a\x89\x87\x8f\xf5\xf0\xf1\xc3\xab\x22\x3f\x9c\x7a\xea\x25" +
	"\x84\xb7\x79\xaa\x6b\xe0\xf9\x03\xea\x48\x74\x23\x64\x58\xe7\x46\x02\x0a\x94\x74\xa5\x00\x7a\x53\x30\x38\xc8\x12" +
	"\xc2\x04\xdb\x36\x52\xe9\xfd\x63\x42\x08\xa1\xc9\xdc\x24\x50\x71\x31\x16\x68\x5a\x48\xfa\xa4\xb4\x70\xb8\x18\x2d" +
	"\x48\x77\x2e\xf0\x83\x2a\x9e\x72\x63\x7a\x08\xe3\x79\xad\x96\x1e\xde\xa3\xff\x04\x88\xa9\xf0\xae\xa6\x88\x95\x50" +
	"\x84\xd2\xab\x68\x9b\x28\xe2\x37\x81\x5e\x35\x3d\xac\x8b\x1e\x5e\x6e\x33\x3d\xbc\x45\xae\x3e\x31\x9a\xd2\x83\x42" +
	"\xab\x30\x07\x3d\xbc\x5a\x29\x3d\x84\xb6\xd4\x85\xe8\x41\x9f\x18\x6b\xa6\x88\x9f\xb7\x9d\x22\xf4\x89\xb1\x56\x7a" +
	"\x78\xbd\xcd\xf4\xf0\x1e\x31\x0e\x29\x07\x2a\xa5\xb7\x26\x89\xb8\xcf\xb2\x49\xe2\x97\xf5\x83\x88\xec\xcf\xa2\x71" +
	"\x68\x3e\xcb\x63\xce\x66\x28\x55\x32\xc3\x7c\x3c\x8e\xfe\xd4\xe0\x0f\x7d\x16\xb8\x43\x0a\x39\xfa\x5a\x8e\xe4\x51" +
	"\x1d\xde\xa3\x15\xbf\x2f\x76\x12\xdc\xe2\x40\x1f\x39\x2f\xc1\x7a\x4b\xa9\x74\x4a\x28\xb7\x98\x66\x23\x8d\xc3\x7f" +
	"\x28\xec\x4f\xb3\x3a\xd2\x5f\xcc\xcc\x47\xb2\xf4\x90\x9f\xd5\x81\x27\xca\xe0\xdd\x78\x48\xee\x10\x1d\x0a\xfe\x92" +
	"\xda\xaa\xd3\x85\x8d\x33\x79\x0f\x69\x08\x53\x58\x26\x24\x6b\xd2\xaa\x48\x0e\x29\x25\x14\x56\xe6\x93\xd9\x71\xaf" +
	"\xd3\x59\xdf\x6f\x81\x81\x97\x5b\xab\x68\xa9\xe2\x95\x12\x0b\xf5\x77\xb1\x50\x03\x8f\x50\x10\xf8\xe0\x19\xe8\x24" +
	"\xc6\xed\x5d\x59\xb5\xd2\xf5\x87\x35\xae\x5a\x68\x3a\xd1\x6b\x36\xeb\x9a\xbd\x5c\x68\xcd\x6a\xdd\xa7\xab\x98\x26" +
	"\x50\xb1\xd8\x2d\xe6\x9d\x19\x37\x93\x5d\x59\xd5\xd9\xd5\xfd\xd5\x3b\x71\x49\xdc\x34\x77\x99\x7c\x09\x9b\x53\xec" +
	"\xcd\x3c\x21\x65\x77\x68\x52\x93\xdd\xa7\x85\x25\x9f\x67\x3b\x4f\xf3\xae\xdf\xfc\xd2\xff\xbc\x35\x4b\x1f\xb1\x64" +
	"\xbd\xf0\xeb\x59\xf8\xd7\x4b\x5c\x78\xc5\xb2\x46\xfe\x67\x34\x14\xd3\xe2\xa8\x78\x0d\xd6\xd3\x27\x36\x88\x78\xfc" +
	"\x6c\x3c\x77\x65\x7e\x83\xcb\x60\xe6\xcb\x58\xba\xa2\x4f\x60\x9d\x5b\xdf\x2f\xb3\x88\x51\xa9\x7b\x9e\x61\xbe\x2d" +
	"\xdd\x2a\x6d\xe4\x80\x77\x11\xba\x18\x03\x1a\xf9\xe0\xf9\x8a\x2b\x2e\x14\x7a\x4c\xcc\x54\xc5\x3c\x85\x0d\x7c\x58" +
	"\x99\xb1\x38\xcd\xb8\x2a\x3b\xa7\x55\xf5\x69\xe1\x72\x19\xcd\xd6\x96\x15\x2e\xfb\xe1\x65\x07\x29\x27\x8e\xc2\xa0" +
	"\xf2\xcb\x4b\xdd\xb5\xab\x3d\x9a\xee\x5c\x55\x76\xc2\xc4\xa3\x49\x54\xd7\x6f\xef\x86\x6e\x4c\x52\x89\x30\xc2\x1e" +
	"\x8e\x3d\x65\xc2\x8d\x1f\xfa\x07\xee\xa5\xb1\x60\x64\x31\x6b\x45\x28\x4b\x94\x53\x0f\x71\xc4\x86\x98\x0c\x27\x84" +
	"\x71\xe5\xce\x89\xd9\x5d\xc9\x93\x08\x7b\x96\x13\xd8\xe8\x45\xcd\xe5\xf3\x6a\x27\x39\xc3\x0d\x1c\x8e\xab\x3a\xc6" +
	"\x01\x10\xc4\x57\x97\xbe\x27\x93\x74\xae\xa8\xc7\x30\xfe\x13\x20\xfa\xb0\xf4\x19\x48\xc9\xb4\x94\x26\x9c\xa2\x31" +
	"\x52\x04\x2a\x10\x74\x7a\x8b\xfd\x8f\xd4\xf9\xf0\xe0\x59\x95\x49\xba\x2b\x3c\x56\x39\x1c\x4b\xd2\x63\xff\x13\x0f" +
	"\xa7\xf4\xf4\x32\xb5\x67\x2a\x6a\xba\x45\x9b\x33\x9c\xa7\x62\x6d\xc0\xd0\x55\xf8\xdc\xb2\xaf\x53\xfa\x43\xa7\x52" +
	"\xd4\xa9\x14\xe7\x4c\xa5\x28\x2f\x39\xd5\xe4\x51\x3c\x75\x91\x6d\xbb\x59\xae\xae\x4e\xa2\xe8\x53\x64\x63\xe9\x17" +
	"\xa8\x93\x28\x86\x3d\x76\x37\x89\xe2\x61\xa6\x20\x9f\x45\xf1\xf0\xe4\xf8\xe8\xa4\x77\x68\x76\xd2\x2b\x38\x8f\x32" +
	"\x8b\xa2\x39\x73\x1a\xc5\x28\x25\x69\xfb\x5f\xd8\x46\xe0\x77\x6a\x4d\x10\xe3\xe1\xcc\x81\xdf\x6f\xfe\x44\x56\x71" +
	"\xcd\x67\xcf\xaa\x98\xba\x6f\xd7\x3a\x56\xbf\xf1\x46\x4e\x70\xff\xea\x65\xbd\x5b\xf5\x32\x7d\x9f\xd5\xa1\x33\x4e" +
	"\x1b\xaf\xc6\xf4\x54\x38\xf9\xb2\x06\x4e\xcd\x65\xc4\xbd\x22\xcf\xe4\xd2\x80\xec\x34\xd4\x7d\xcd\xb0\xe6\x70\x4c" +
	"\xae\x70\x5e\x9c\xc7\xbc\xd5\xc0\x25\x32\xef\xf1\x58\x0f\x89\xb5\x53\xeb\x26\x9d\x5a\x31\x1b\x42\x07\xba\xc8\x86" +
	"\x2b\x75\x6d\xb5\x91\x35\x5e\xd0\xf4\xac\x89\x61\xe5\xc4\xd0\xc8\x4f\x7e\x83\x1e\xce\x9a\x04\x56\x4e\x02\x11\x33" +
	"\x18\x32\x0b\x3a\x91\xe2\x56\x2a\xec\x34\x59\x68\xb2\xc8\x93\x85\xa6\x88\x27\x4d\x11\x8d\xef\x55\x6d\x90\x0c\x5e" +
	"\x84\x54\xfb\x41\x12\x2d\x78\xa7\xfe\x5a\x4d\x18\x2b\x61\x15\x20\x64\x15\x8b\x90\xc7\xd4\x9b\x73\x0b\x92\xc7\x25" +
	"\x25\x42\xb4\x06\x7b\xef\xe2\x53\x4e\x65\x65\xd2\xf4\xb1\x7c\x90\xb9\x30\xa4\x58\x39\x69\x10\x5b\xf3\x8b\xb5\x1d" +
	"\x24\xdb\x4c\x09\x17\xb1\xad\x5c\xd3\xc3\x7a\xe8\x21\x71\x4e\xd8\x66\xaa\x90\x76\x0f\x4d\x10\xeb\x39\x30\x14\x36" +
	"\xe3\x6d\xba\x45\x77\x49\x1c\x6c\x95\x6c\xaf\x9a\x10\xe2\x3e\x4b\x3c\x29\x2a\x26\x7a\x6b\xd8\xc2\xd3\x20\x82\xda" +
	"\x05\xcd\xac\xd7\xf3\x83\x67\xcf\xd7\xbf\x71\xb3\x3f\x17\xbf\xb9\x62\x91\xc0\xe3\x7b\x81\xff\xf5\x4f\x72\x73\x3e" +
	"\x30\x52\x07\x93\xb6\x60\x4b\x6c\x60\x7c\x9b\xcf\x33\x4d\x3a\xc8\xbd\x7c\x50\xaf\x7a\xe9\x73\xa2\x99\xa5\xd0\xad" +
	"\xa0\x13\xd9\xe0\xc7\x61\xe2\x4a\x51\x5a\xc7\xf2\x6c\xa4\xb3\x12\xfb\x77\x61\x17\x29\xfa\x15\xc9\x7f\x81\x0f\x54" +
	"\x64\x15\x68\xf4\x65\x32\x8c\xa8\xe2\xcb\x1a\x10\x6b\x13\x0f\x3f\x42\x6d\x44\x5f\x3e\x5c\xe1\xc8\xe2\xfe\x41\x15" +
	"\xd6\x21\x62\x3e\xd2\x96\x31\x82\x81\xa3\xba\x11\x99\x38\x2b\x31\xe4\x08\xc1\xb2\x4a\x99\x0a\x20\x03\x19\x8f\x49" +
	"\x45\x33\xd1\x62\x50\x10\xa5\x07\x46\xea\x6a\x2f\xea\x7d\x62\xb7\xc0\xc0\x08\xdd\x34\xc3\x0e\x59\xbf\xda\xd4\xe3" +
	"\x52\xbe\x8e\xd8\x28\x74\xe1\x14\xc3\x10\xd5\xa9\xe5\x07\x8c\x28\x71\x93\xaf\xb0\x42\x53\x74\xe4\x4a\x7a\x70\x90" +
	"\x3c\x33\x74\xea\x04\x37\x0f\xe9\x97\x95\x46\x16\xba\x87\x2a\x6a\x13\x07\xd2\xcc\xaf\xe8\xcb\xe5\xf4\x8b\xc7\x0a" +
	"\x02\x04\x36\x62\x56\x14\xb0\x4b\xe5\x6b\x47\xe1\xe7\xd8\x19\x4a\xed\xd2\x59\x1b\x62\x91\x22\x16\x38\xfc\xf5\xd4" +
	"\xdd\x19\xae\x9f\x9a\x92\x95\xc4\xad\xdc\x10\x0d\xb6\x44\xe2\x3d\xa8\xae\x56\xef\x8b\xdc\xce\x40\x8e\xad\xec\xac" +
	"\xda\xb6\x4d\xbe\x73\xea\x2b\x5d\x04\x8b\x26\xdd\xe8\x8d\xe5\xc2\xeb\x06\x3b\x34\x71\x7c\x9b\x81\x8f\x27\x59\xe2" +
	"\x22\x2f\xf6\x82\xcb\xc4\x05\xf1\x46\x78\x1c\x44\xbf\xf6\xf2\x6a\xc0\x8b\xf7\x6c\x7f\x7d\x3e\xb2\x99\x66\x4b\x75" +
	"\xc8\x58\xbe\xcb\x45\xa9\xf0\x5e\xe9\x87\xd1\xc8\xe5\x22\xef\x4b\xb3\x55\x2e\x17\x25\x37\x1f\xed\x72\xf1\xf4\x10" +
	"\xec\x66\x5d\x2e\xbc\xf8\x8c\xdd\x66\xdb\x49\x94\x3c\x43\x6e\x4f\x4d\x13\xeb\xd0\x71\xe4\xee\x60\xad\x54\x6e\x4a" +
	"\xb2\x6e\xcc\x4d\x1d\x17\x97\x1f\xc1\x05\xa1\xca\xef\xd4\xb4\x01\x96\x1a\x04\x42\xd2\x46\x72\x65\x7a\x9b\x35\x61" +
	"\x5a\x2b\xba\x3b\xbe\x5a\x5a\x15\x96\x6b\xac\x55\x61\xd1\x1f\xad\x0a\xd3\xaa\xb0\x15\xa8\xc2\x9e\xd5\x2b\x99\x2a" +
	"\x6c\x3c\x5a\xdb\x03\xb4\xb6\xa7\x78\x49\x06\x08\x98\xb1\xc6\x6b\xce\x75\x2a\x9c\xcd\x5d\x42\x9a\x9a\x66\xfd\xa4" +
	"\xa8\x6b\x99\x7a\x07\x29\x51\xf4\x26\x6a\x35\x19\x1c\x14\x40\xcf\x06\xef\x91\x45\x5c\x17\x79\x76\x78\x9d\x4b\x3d" +
	"\x75\x3b\x92\xc8\xac\xdd\x06\x6f\xf1\x3d\xb2\x4b\x17\xfc\xe6\xca\x57\x76\xb2\xe0\x42\x9e\xd6\x2c\x64\x9a\xfa\xd7" +
	"\x50\xac\xf0\x59\xa1\x2c\x93\xff\xe8\x1f\xc7\xa5\x6b\xb1\xd5\x59\xce\x9a\xa4\x30\x53\x56\x4f\xb0\x8d\x7e\x76\x7d" +
	"\xfe\x50\xd7\xe0\xdf\x88\x92\xca\xbc\xc0\x73\xa5\x0c\x5e\x38\x25\xf0\xb4\xc4\x0f\x4f\x39\x27\x70\x63\x80\xff\xfb" +
	"\x0d\x13\xe4\x26\x55\xec\x7d\x30\x35\xf8\xbc\xe8\xf2\x43\xcf\x3c\xeb\x59\xc5\xe3\x6f\xa6\xf0\x93\x59\x2e\x14\xbe" +
	"\xd5\xa9\x0b\x4f\x2a\xdf\x3a\xea\x5a\x67\xc7\xc5\x73\x73\xc1\xb7\xd2\xfa\x30\xb9\xf2\xbd\x27\xe8\xa6\xbb\xc8\x7b" +
	"\x2f\x93\x4b\xd1\xe1\x3b\x83\xa9\xf3\x3b\x3a\x43\x5d\xbb\xab\x54\x3a\x67\x38\x67\x31\x2d\x79\x96\x79\xaa\x61\x56" +
	"\x3e\x8d\xdd\x51\xf3\xb3\x7b\x2b\xf2\xdf\xcd\x3c\xa1\x4d\x2c\x30\xa0\x20\xba\x28\xb0\x4e\x7d\x58\x21\x17\x41\x16" +
	"\x50\xe4\x86\xfc\x35\xd4\xf2\xa4\xd7\xe0\x15\x2f\x9b\x11\x9b\x4f\x7f\x60\x11\xa3\x4b\xfe\x18\xe2\xf4\xd4\x86\x9b" +
	"\x3e\x61\x60\x1c\x1c\xe4\x4c\xcc\xe0\xf3\x04\x51\x04\x06\x51\x22\xbc\x81\x01\xce\xc1\x4f\xe5\xd0\x9d\x29\x73\xfb" +
	"\x49\x42\x89\xc4\xf0\x7b\x0e\x7e\xfa\x31\x79\x5c\x5c\x97\x9a\x88\x65\xbd\x4f\xec\x6c\xaf\xc8\xc8\x2c\xab\x3c\xf6" +
	"\x13\x00\x2f\xde\xbd\x02\x3f\xca\x50\x3a\xd8\x51\x6b\xd4\x9b\xcb\x10\xaa\x15\x2e\xc9\x10\xb5\x09\x0a\x1f\x83\x24" +
	"\xb1\x18\xae\x2f\xf7\x56\x0b\xc8\xb7\xe8\xa1\xda\xb7\x4f\xb6\x20\x3e\xa2\x30\x14\x54\x8d\xf3\x8a\x36\x49\xe4\x1d" +
	"\xec\xb7\xcd\x93\x6e\xbb\x7b\xd8\x36\xdb\x67\xe6\x41\xc0\xda\x08\x32\xde\xee\x1e\x58\xc4\xf5\x03\x8e\x0e\x24\x38" +
	"\xf2\x94\xda\x80\xe6\x52\xbd\xa0\xe7\x24\x24\xcf\x8b\x77\x8a\x58\xee\xd9\xb1\xc9\xb9\x5e\xc2\xd8\x2c\x3f\x68\x24" +
	"\xf1\xcf\x7a\xce\x34\x0d\x45\x94\x51\x01\x99\x9d\x4e\x07\x3c\x03\x4b\x0d\xe5\x9b\x3c\x4c\xc6\xfe\x62\x59\x2f\x17" +
	"\x51\x12\xc5\x1c\xcb\x3f\x5f\x54\xe4\x7c\x5d\x94\xc1\x2a\xeb\xb5\x51\x0b\x65\x1a\x8d\xc3\x8a\x4d\x49\x45\x3a\x4b" +
	"\x5c\xb1\xe6\x78\x6a\x81\x00\xbc\x73\x21\xa9\x79\x8e\xc3\xa6\x5b\x4a\x6b\xf2\x8a\x5f\xd6\x80\xd9\xd6\x53\xe7\xca" +
	"\x74\x78\xf9\x98\x91\x62\x67\x17\xc1\x02\xcd\x51\x55\x35\x60\xd8\x52\x00\xd0\x48\x89\xf8\xe8\x01\xc0\xae\xab\x12" +
	"\x57\x25\xd8\x69\x36\xa8\xd9\x60\x8e\x0d\x46\xa4\xf2\x08\x19\xa1\x2a\x4b\x91\x66\x84\x0d\xbf\x73\x6b\x18\x61\xf6" +
	"\xe7\x76\x25\x8e\x4f\x4d\x0d\x09\xce\xed\x83\x0c\x00\x6e\x81\x54\x55\xa3\x30\x3f\x80\x3d\xec\xc9\x9e\x2e\x76\xb0" +
	"\x45\x68\xf1\xde\x76\x93\x84\xf3\x33\xc5\xef\xd4\x19\xe7\x67\xce\x38\xaf\x48\x9f\x97\x0a\x5f\x1e\xf1\x54\x82\xcd" +
	"\xe6\x72\xb0\xcf\x93\x71\x3e\x1d\x4e\xe2\x4f\xb7\x4d\x43\xda\x8d\xb4\xf2\xda\x14\x18\xcf\xbf\x0c\x91\x59\xb3\x09" +
	"\xeb\x6d\x81\xc5\x29\xd0\xc6\x40\x6d\x0c\xdc\x8c\x31\xb0\x0f\x42\x3f\xe6\x06\xe6\xaa\x65\x9b\x03\xa3\x17\xaf\xdf" +
	"\x22\x18\xbd\x78\xdd\x46\xc1\xc6\x13\xad\xed\x82\xcb\x9a\x53\x6d\x1a\x9c\xdf\x34\x58\xce\x3e\xb5\xe5\x06\x41\xad" +
	"\x0f\xd4\x06\xc1\xda\x8f\x7e\xf2\x06\xc1\xda\xd4\x72\x5b\x69\xd9\x5b\xb5\xed\x6e\xea\x09\xb2\x0a\xeb\xdd\x14\xe0" +
	"\xa3\x35\xd7\x5b\xa6\xb9\x5e\x97\x89\x2e\xa2\x8b\xc7\xa5\x9c\xd6\x6e\x3a\x8f\x41\x39\xbd\x42\x61\x4b\xb3\xbb\x27" +
	"\xc7\xee\x62\x53\xdc\xa3\x64\x78\xda\x1a\xf7\x18\x18\x5e\x8d\x36\x64\x6b\xac\x71\x51\xd0\x87\x29\x06\xb9\x06\x17" +
	"\x82\xb4\xfd\x2d\x37\xe6\x0d\xd8\xdf\xd4\xb6\xa1\x54\x4a\xda\x3e\x83\x95\xb6\xc1\xad\xd6\x06\x17\xff\x53\x9d\xae" +
	"\x35\x97\x47\xf1\xb1\xe4\x6b\xad\x4e\x6d\x94\x28\x53\xe2\x26\xf5\x94\xd7\x10\x53\x16\xb2\xb6\x0a\x2a\x00\x1c\x8e" +
	"\x43\xf5\x29\x03\xc4\xab\xb8\x00\x1d\x02\x96\x34\xd2\xde\x67\xcc\x27\xe0\x16\x3d\x9c\xd7\x45\xda\x2b\xbd\x7c\xf1" +
	"\xbc\xae\xc6\xbb\xaa\xe0\xec\x0d\xd3\xbb\x96\x53\x13\x36\x4a\xee\xba\xe6\x89\xd2\xe9\x5f\x0b\x04\xbe\x8a\xad\x87" +
	"\x6b\x77\x1d\xde\xa5\x0d\x97\x11\x11\xaa\xa9\x2c\xc6\xfe\xab\xd8\x96\x51\x04\x43\xf0\x41\x99\x53\xa3\xd9\xde\x54" +
	"\xe7\xe3\xd8\xe8\xfe\x5c\x6c\x5e\xf5\x2e\x5e\xc3\x2e\x0e\x97\xa5\x0d\x71\xdb\xee\x1d\xdf\x9c\x1e\xf7\xac\xe3\xf6" +
	"\x84\xf9\xe3\x2f\x0d\xce\x54\x55\xaf\x6d\xdd\xf5\x19\xf1\xbe\x39\x49\x46\x0a\x00\x35\x65\x8b\x36\x61\xc9\x4a\x58" +
	"\x82\x22\x6d\x46\x33\x3e\xa0\xea\xb8\x36\x26\xb0\xde\x69\xd6\x1c\x62\x9d\x1c\xa2\x19\x47\xd8\x5a\x0e\xb0\x32\xb2" +
	"\xac\x56\x20\xae\x82\x2f\x54\xa6\x4f\x69\xc6\x1d\xaa\xbb\xaf\x8d\x47\x6c\xc3\x42\x68\xce\x31\x2d\x6b\x3c\x0f\x95" +
	"\xf9\x59\xa1\x7e\x14\x6a\x29\x0d\x8f\x7c\x6e\x9b\x39\x95\x9b\xc1\x49\x54\xf1\xf7\xc3\x8e\x6b\x54\x3c\xce\xc7\xd6" +
	"\xad\xf4\x4e\xcc\x3e\x34\x5a\x89\xc4\xa8\x52\xd2\x83\x19\xbd\xa2\x73\xab\x59\x72\x77\x3d\x2c\x95\x98\x6e\xa1\xa0" +
	"\x57\x2c\x30\x4b\x25\xe2\xd3\x0b\x6d\x8a\x8a\xc5\x6e\xb1\xc0\xcc\x6a\xb3\xaf\x73\x53\x82\x5d\x34\xcc\x6c\xaa\x59" +
	"\xbf\xa6\xf4\xee\xe3\xd2\xbb\x4b\x5f\xd3\x3d\x2a\x95\x14\xc0\x80\x71\x52\x2c\x38\xec\xe4\x86\x50\xb1\x76\x5f\x88" +
	"\x74\xc8\x33\xb2\xfa\xa0\x58\xbf\x7c\xa9\xf0\x34\x33\x02\xe9\xb6\x6c\x9c\xd8\xd0\xfd\x62\x67\xde\x69\xdc\x25\x4a" +
	"\xa7\xc8\x9f\x50\x12\xa2\x0d\xd9\xe4\x86\x40\x6a\xfb\x94\xdc\x61\x1b\x51\x76\xf0\x00\x5d\xa7\x0f\xfe\x6a\x87\xad" +
	"\xa0\x8f\x23\x75\x55\x12\x9f\x3c\x69\xda\x0f\x7f\xb7\x81\x8d\x19\xbc\x71\xd0\x2b\xe4\xa0\xd0\x96\x98\xa3\x7a\x64" +
	"\x63\x19\xfc\x2b\xaf\x8a\x1c\x11\xc7\x46\xb4\x1f\xf3\xb1\xb8\x58\x5e\x73\x2f\x16\x46\xcb\xd9\x4f\xe7\xcb\x87\x7c" +
	"\xd2\x07\xcf\xef\x20\x7d\xee\xe0\x9b\xe7\x63\x0a\x47\xd0\x83\xcf\x93\xe1\xb0\xe7\xc5\x47\xd0\xf1\x1b\x3b\x13\x62" +
	"\x5d\xec\xdf\x3e\x18\x61\x07\xfd\x5f\x00\x00\x00\xff\xff\x9c\x06\xbd\xaa\xb2\x8d\x01\x00")

func bindataConfigMapdashboardsconfigyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataConfigMapdashboardsconfigyaml,
		"ConfigMap/dashboards-config.yaml",
	)
}



func bindataConfigMapdashboardsconfigyaml() (*asset, error) {
	bytes, err := bindataConfigMapdashboardsconfigyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ConfigMap/dashboards-config.yaml",
		size: 101810,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555914359, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataConfigMapgrafanadatasourcesyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4f\x6b\xdb\x4e\x10\xbd\x1b\xfc\x1d\xe6\xb7\x09\xf8\x12\x7b\xe3" +
	"\xcb\x8f\x44\xd0\x43\xd3\x1c\xda\x42\xff\x40\x21\x97\x52\x9a\xf1\x6a\x64\x6d\x2d\xed\x8a\x99\x95\x12\x37\xcd\x77" +
	"\x2f\x2b\xc5\x7f\x30\x5b\x17\xd2\x08\x8c\x77\x67\xde\x7b\xb3\x3b\xf3\x24\x6c\xec\x0d\xb1\x58\xef\x32\xe8\xe6\xe3" +
	"\xd1\xca\xba\x3c\x83\x37\xde\x15\x76\xf9\x01\x9b\xf1\xa8\xa6\x80\x39\x06\xcc\xc6\x23\x00\x87\x35\x65\xb0\x64\x2c" +
	"\xd0\xe1\x34\x86\xc5\xb7\x6c\x48\x36\x49\x69\xd0\x50\x06\x05\xe5\xc4\x18\x3c\xa3\x1d\x8f\xb6\xec\x25\x85\xe0\x57" +
	"\xe4\x66\x52\x66\xf0\x6b\x1a\x43\x00\x27\xff\xe9\x56\x58\x2f\xac\xd3\xe4\x3a\x90\xf2\x29\x7c\x57\xda\x8a\x9e\xd6" +
	"\xb9\x1f\x16\x1d\x56\x2d\xbd\xba\x35\x18\x40\x77\xc8\x9a\x5b\xa7\x85\x0c\x53\x10\xbd\x6a\x17\xc4\x8e\x02\xc9\xcc" +
	"\x7a\x2d\xc4\x9d\x35\x84\xc6\xf8\xd6\x05\xdd\x97\xbd\xdd\x17\x51\x57\x84\x4c\x0c\xa7\x0f\xfd\xfe\x51\x0d\x49\x32" +
	"\xa5\x87\xd3\x3e\x34\x04\x4c\x03\xb0\x77\x4f\xdd\xb0\xaf\x29\x94\xd4\xca\x6c\x8d\x75\x05\xa0\x29\x18\xfd\xd4\x91" +
	"\x98\xed\x6c\x6c\xa6\x75\x4b\x7d\x84\x36\x68\x0b\xe5\x30\xb5\x30\x11\x3d\x1c\x46\x4f\xd4\x50\x5a\x4d\xf4\x72\xf2" +
	"\x2f\xca\x7d\x87\x9e\x4f\x3f\xc9\xbd\xeb\xef\x7f\x90\xdd\x4d\xed\x61\xf8\x8b\x8f\xda\x59\x48\x65\x30\x3f\xdb\xcb" +
	"\xec\x15\x52\x19\x7c\xdd\x65\x0e\x24\xb6\x84\x68\x21\x95\x81\x7a\xe7\x8a\xaa\xbd\xbf\xbe\x52\x67\x87\x10\x80\x04" +
	"\x2d\xac\x9b\x9e\x66\x7b\x5a\xbe\x50\x67\x09\x10\x1a\x43\x12\xcf\xa1\x1a\xf6\xf7\xeb\x24\xa6\xe5\x2a\x02\xca\x10" +
	"\x1a\xc9\xb4\xc6\x0a\x6b\xca\x71\xba\xd1\x9d\xed\xf9\x7a\x26\x9d\xc9\x2e\xce\x2f\xfe\x4f\x0a\x35\x28\x72\xe7\x39" +
	"\x8f\x6a\x98\xd7\xd6\xc5\x40\xba\xa4\x10\x6f\x51\x49\x44\xec\xe2\x02\xa5\xbf\xe1\x77\xeb\x02\xb1\xc3\x2a\x89\x5c" +
	"\xa0\x58\xf3\xba\x0d\xa5\xca\xa0\xc0\x4a\x28\x05\xb2\x72\x4d\x05\xb6\x55\x38\x06\xfa\x21\xde\x5d\x63\x40\x95\xa5" +
	"\xe6\x14\x5b\x5e\xc9\x97\x95\x6d\x6e\x88\x6d\xb1\x56\x19\x04\xde\xbc\x31\xfb\xcf\x63\x4a\x9b\x09\xf3\x4f\xae\x5a" +
	"\xff\xa1\xfe\x21\xe7\x98\x4f\x3e\x6f\xfd\x99\xec\xc7\xc6\x17\xcd\x71\xd8\x33\x9c\xb1\x53\x9c\xae\x2e\x64\xe6\x1b" +
	"\x72\x52\xda\x22\x4c\x6b\xef\x6c\xf0\x6c\xdd\xb2\x37\xc8\xe5\xf9\xe5\xfc\x65\x46\x15\x1b\xfc\x62\x93\x4a\x08\xc1" +
	"\x70\xb9\xb7\x84\x39\xf1\x47\xac\x69\x1e\xef\x1b\x4f\xe8\xd9\xfe\xc4\x10\x5f\xef\x04\x2d\x39\x61\x21\xd3\x32\xbd" +
	"\xff\xdb\xc9\x76\xf5\x6e\xe2\x57\xaf\x2f\x38\x7c\x09\xd5\x0b\x59\x69\xb7\xfd\x36\x2c\x1f\x87\xdd\x78\x14\xb7\xf1" +
	"\xf7\x3b\x00\x00\xff\xff\x5e\xc3\xde\x3e\x00\x07\x00\x00")

func bindataConfigMapgrafanadatasourcesyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataConfigMapgrafanadatasourcesyaml,
		"ConfigMap/grafana-datasources.yaml",
	)
}



func bindataConfigMapgrafanadatasourcesyaml() (*asset, error) {
	bytes, err := bindataConfigMapgrafanadatasourcesyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ConfigMap/grafana-datasources.yaml",
		size: 1792,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555914359, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentadmissioncontrollerDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xcf\x8e\xda\x48\x10\xc6\xef\x48\xbc\x43\x29\x97\x9c\x6c\x88\x76" +
	"\xc9\x6a\xfb\xe6\x60\x47\x3b\x5a\x20\x08\xd8\x48\x39\xa1\x4a\xbb\x8c\x5b\xe9\x7f\xe9\x6e\x3b\xb2\x56\xfb\xee\x2b" +
	"\xc3\x98\xb1\x19\x18\x66\x7c\x82\x2a\xf7\xaf\xbe\xaf\xda\x55\x68\xc5\x57\x72\x5e\x18\xcd\x00\xad\xf5\x93\xfa\xc3" +
	"\x78\xf4\x43\xe8\x9c\x41\x4a\x56\x9a\x46\x91\x0e\xe3\x91\xa2\x80\x39\x06\x64\xe3\x11\x80\x46\x45\x0c\x30\x57\xc2" +
	"\xb7\x07\x23\x6e\x74\x70\x46\x4a\x72\x5d\xd6\x5b\xe4\xc4\xa0\xa0\x9c\x1c\x06\xe3\x50\xb4\x19\x89\xdf\x49\xfa\x23" +
	"\x02\xda\x62\x0c\x50\xa2\xa2\x1c\x4f\x11\x6e\x94\x35\x9a\x74\xb8\xcd\x46\xad\x4d\xc0\x20\x8c\xee\x30\x39\x79\xee" +
	"\x84\x0d\x47\x03\x29\x15\x42\x93\x87\xd2\xfc\x82\x60\x20\x3f\x1a\x80\x50\xd2\x4d\x20\x40\x20\x65\x25\x06\x8a\x51" +
	"\xda\x12\x63\x63\x49\xfb\x52\x14\x21\x16\x66\xf2\x0b\x45\x88\x0a\xe3\x22\x47\x98\x37\x0c\xde\x07\x57\xd1\xfb\xf1" +
	"\xc8\x5b\xe2\xc7\xfa\x8e\xac\x14\x1c\x3d\x83\x0f\xed\x5f\x4f\x92\x78\x30\xee\x51\x9b\xc2\xc0\xcb\x45\xdf\x74\x67" +
	"\xfb\x86\x9a\x4e\x4b\x77\xbe\xdf\xf4\xf6\x79\xb9\xf1\xed\x23\x87\xd5\xee\xd4\x03\x38\x3b\x39\x5d\x80\x0e\x28\x34" +
	"\xb9\x27\x40\xf4\x8a\x9a\x00\x42\xe1\x81\x18\xfc\xac\xb0\x69\xdb\x66\x9d\xb1\x25\x05\x1f\x8c\x9b\x3c\xde\x70\xf4" +
	"\x04\x70\x25\x49\x56\x4f\xe3\xdf\xe2\x8f\x17\x84\x75\x25\xe5\xda\x48\xc1\x1b\x06\x0f\xc5\xca\x84\xb5\x23\x7f\xfc" +
	"\xfc\xba\xd7\x1c\x79\x53\x39\x4e\x7d\x87\x00\x52\x28\x11\x86\x21\x00\x6e\x2b\x06\x1f\xa7\x6a\x18\x55\xa4\x8c\x6b" +
	"\x18\xfc\x39\x5d\x8a\x7e\xc6\xd1\xcf\x8a\xfc\x75\xc8\xef\xb3\x1b\x90\x3f\x66\x7d\x08\xe9\xba\x77\xba\x6b\x5c\xb2" +
	"\x48\x96\x59\x9a\xec\x93\x74\x39\xdf\x2d\xf6\x69\xb6\x5e\x7c\xf9\x96\xa5\xfb\x55\xb2\xcc\xb6\xeb\x64\x9e\xf5\xd1" +
	"\x35\xca\x8a\x3e\x3b\xa3\x2e\x64\x14\x82\x64\xbe\xa1\xe2\x22\xfc\x98\x58\x63\x28\xd9\xf9\x63\x89\xcf\xf3\x77\x5f" +
	"\x4c\xb2\x4b\xfe\xfa\xe7\xd3\x3e\x49\xd3\x4d\xb6\xdd\x3e\x53\xc2\xe0\x5d\x77\x7d\x2d\xb9\xac\xbe\xc7\xbd\x89\x8e" +
	"\x7d\xcd\xd9\x6c\x3a\x9d\x4d\xdf\xdd\xad\x94\xad\x92\x4f\x8b\xe7\x56\x9f\x26\xea\xce\xf9\xdd\x62\xbb\x9f\x67\x9b" +
	"\xdd\xfe\xf3\xc3\x55\xcc\x84\x02\x9f\x04\xe9\x23\x4e\x2e\xf8\xf6\x57\xcc\x5d\x78\x15\x76\xbd\x79\xf8\x9a\xec\xb2" +
	"\xfd\xdf\xd9\xb7\x37\xd0\x7f\x50\x73\x97\x3e\x4f\xde\xa2\x99\xe3\x50\x72\x6d\x64\xa5\x68\x69\x2a\x3d\xf8\x2a\x23" +
	"\x50\x6d\xe8\x74\xe7\x43\x44\xbf\xc6\x49\xd0\xd5\x54\xbb\xcb\xbe\x68\xd9\x30\x28\x50\x7a\xba\x85\xae\xd1\x4d\xa4" +
	"\x39\x4c\x06\x2b\xba\x0f\xbf\xba\x13\x22\x69\x0e\x51\x3b\xf8\x78\x38\x93\x4f\x4e\x3c\x83\xcb\xa5\xf2\x6a\x02\x00" +
	"\x29\x1b\x9a\x54\x38\x06\xff\xfe\x77\x89\xb9\xe2\xd2\x13\x77\x14\x06\xe3\x72\x0a\xad\x6e\x6e\xb3\x28\xc8\x33\xc0" +
	"\x93\xab\x05\xa7\x84\xf3\xb6\x21\x2f\x6f\xbf\xe1\xbb\xb7\xf9\xff\x07\x00\x00\xff\xff\xb1\x5f\x2e\xaa\x69\x07\x00" +
	"\x00")

func bindataDeploymentadmissioncontrollerDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentadmissioncontrollerDMyaml,
		"Deployment/admission-controllerDM.yaml",
	)
}



func bindataDeploymentadmissioncontrollerDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentadmissioncontrollerDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/admission-controllerDM.yaml",
		size: 1897,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentalamedaaiDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcd\x6e\xdb\x30\x10\x84\xef\x06\xfc\x0e\x8b\xdc\x6d\x2b\x69\xdc" +
	"\x03\x6f\x2e\x14\xa0\x05\x9a\xc4\x70\xd2\x5e\x8b\x0d\xb5\xb6\x88\x92\x5c\x86\x5c\xa9\x30\x8a\xbe\x7b\x21\x39\xb2" +
	"\x25\x5b\xfd\xe1\x4d\x4b\xce\xc7\xd1\x68\x84\xc1\x7c\xa5\x98\x0c\x7b\x05\x18\x42\x5a\xd4\xd7\xd3\xc9\x77\xe3\x0b" +
	"\x05\x39\x05\xcb\x7b\x47\x5e\xa6\x13\x47\x82\x05\x0a\xaa\xe9\x04\xc0\xa3\x23\x05\x68\xd1\x51\x81\x33\x34\xdd\x2c" +
	"\x05\xd4\xa4\x60\x4b\x05\x45\x14\x8e\x87\x1d\x8b\x2f\x64\x53\x2b\x84\xe6\x8a\xa3\xf2\x30\xd1\xec\x02\x7b\xf2\x72" +
	"\x4e\x44\xef\x59\x50\x0c\xfb\x4e\x5c\x50\xd2\xd1\x04\x69\xcd\xe6\xb4\x35\x9e\x12\x94\xfc\x03\x84\xa1\x68\xcd\x82" +
	"\x94\xd4\xdc\x61\x8d\x6e\x95\x47\x24\x87\x83\xa5\xe9\x24\x05\xd2\x2d\x2f\x52\x7b\x2c\x29\xb8\x6e\x1e\x13\x59\xd2" +
	"\xc2\xf1\xed\x2e\x87\xa2\xcb\xcf\x7d\xeb\x43\xf3\x6f\x26\x85\x5c\xb0\x28\xd4\xa9\xfa\x31\x35\x6b\x2c\xaa\x66\xd9" +
	"\x21\x79\x94\x0d\x70\xf4\x7a\x08\xca\x0b\x1a\x4f\xf1\x24\x9b\x5d\xf0\x67\xe4\x77\xc6\xd3\x89\x6b\x1c\xee\x48\xc1" +
	"\x6b\x85\xfb\xb9\xe1\x45\x88\x1c\x4a\x92\x24\x1c\x17\x27\x95\xaa\xb3\xf9\xbb\xf9\xfb\x33\xd5\xba\xb2\x76\xcd\xd6" +
	"\xe8\xbd\x82\x4f\xdb\x07\x96\x75\xa4\xd4\xb6\xa1\x3b\x16\x29\x71\x15\x35\xf5\x5f\x04\xc0\x1a\x67\x64\x38\x02\xd0" +
	"\xa1\x52\x70\x9b\x65\x99\x1b\xce\x1d\x39\x8e\x7b\x05\xb7\xcb\xec\xde\xf4\xb7\x22\xbd\x56\x94\xc6\x39\x37\x7f\xe6" +
	"\xdc\x0c\x39\xe4\xeb\x1e\xa0\xcb\xeb\x71\x7d\xb7\x59\x3d\x3f\x6e\xbe\xad\xf2\x7c\x73\xf7\xf4\xd4\x47\xd5\x68\x2b" +
	"\x52\x70\x75\xde\x9c\x79\xaf\xd6\xf3\x54\x6b\xb5\xcc\xb2\x65\x76\x75\x09\xcf\x57\xcf\xab\x8f\x5f\x3e\xfc\x0f\xbb" +
	"\xa9\x4a\x59\xbd\xfc\x13\x5d\xb3\xad\x1c\xdd\x73\xe5\xcf\xf2\x98\x81\x6b\x86\x6b\x94\x52\xc1\xa2\xc6\xb8\xb0\xbc" +
	"\x1b\x06\x73\xd1\x10\xcb\xbb\x59\xf3\xfd\x71\x77\xac\xc9\x81\x9f\x46\x92\xfa\xbb\xae\x4d\xd8\x05\xd9\xe7\x26\x2a" +
	"\xf8\xf9\xab\x9b\x27\x8a\xb5\xd1\xb4\xd2\xba\x71\x37\xd6\xff\xe1\x89\x87\x8b\xbf\xe4\x77\x00\x00\x00\xff\xff\x24" +
	"\x94\x49\x4f\x97\x04\x00\x00")

func bindataDeploymentalamedaaiDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentalamedaaiDMyaml,
		"Deployment/alameda-aiDM.yaml",
	)
}



func bindataDeploymentalamedaaiDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentalamedaaiDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-aiDM.yaml",
		size: 1175,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentalamedadatahubDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4b\x6f\xda\x4c\x14\xdd\x23\xf1\x1f\xee\x2e\x2b\xf3\xd0\xa7\x44" +
	"\xc9\xec\x1c\x99\x4f\x89\x04\x04\x41\x68\xbb\x43\x37\xf6\x05\x8f\x32\xaf\xcc\x5c\x3b\x45\x55\xff\x7b\x65\x53\x27" +
	"\x36\x85\xb4\x99\x1d\x67\xe6\x3c\xe6\x30\xd7\xe8\xe4\x17\xf2\x41\x5a\x23\x00\x9d\x0b\xc3\x72\xdc\xef\x3d\x4b\x93" +
	"\x09\x48\xc8\x29\xbb\xd7\x64\xb8\xdf\xd3\xc4\x98\x21\xa3\xe8\xf7\x00\x0c\x6a\x12\x80\x0a\x35\x65\x18\x55\x70\x5e" +
	"\x3c\x35\x1b\xc1\x61\x4a\x02\xb6\x94\x91\x47\xb6\x1e\x65\xb5\xa3\xf0\x89\x54\xa8\xd9\x50\xf9\xbc\xd1\x0f\x48\x6a" +
	"\xb5\xb3\x86\x0c\x9f\x94\x45\x63\x2c\x23\x4b\x6b\x1a\x85\x8c\x42\xea\xa5\xe3\x3a\x76\x42\x5b\x69\x28\x40\x6e\x5f" +
	"\x81\x2d\x64\x75\x6c\xe0\x9c\x2a\x23\x25\xd3\x9a\x79\x4a\x17\x80\x49\x3b\x85\x4c\x03\x54\x2e\xc7\x81\x75\x64\x42" +
	"\x2e\xb7\x3c\x90\x76\xf8\x8a\x92\xa3\xad\xf5\x91\x27\xcc\xf6\x02\x2e\xd8\x17\x74\xd1\xef\x05\x47\x69\x1d\xc3\x53" +
	"\xad\x1e\x04\x8c\xab\x9f\x81\x14\xa5\x6c\xfd\xef\x88\x1a\x39\xcd\xa7\xed\x6b\x77\x2f\xde\x0e\xd2\xc4\x68\xa8\xed" +
	"\xb2\xab\x75\xb6\xf0\x6a\xa9\xae\xc7\x79\x17\x80\xb7\xe8\x87\xce\x0d\xa3\x34\xe4\xdf\xb9\xd1\xc7\x4e\x00\x52\xe3" +
	"\x8e\x04\xbc\x14\xb8\xaf\x2a\x72\xde\xba\x9c\x38\xb0\xf5\xc3\x23\x4e\xe4\x73\x52\xa2\x1c\x0d\xfe\x1b\x5c\x1d\xf1" +
	"\x17\x85\x52\x0b\xab\x64\xba\x17\x70\xbf\x9d\x5b\x5e\x78\x0a\xf5\x2b\x6b\x8e\x79\x0a\xb6\xf0\x29\xb5\x6f\x05\xa0" +
	"\xa4\x96\xdc\x85\x00\x52\x57\x08\x18\x8f\x46\xba\x0b\x6b\xd2\xd6\xef\x05\x8c\x2f\x47\x33\xd9\xde\xf2\xf4\x52\x50" +
	"\x38\x2d\x73\x79\x56\x65\xd4\x51\x21\x53\xb6\xe8\x4d\x69\xf1\x34\x9e\x4d\x92\x78\x93\xc4\x8f\xf1\xdd\xfa\x76\x73" +
	"\x3f\xff\x7f\xba\xfe\x96\xdc\x6e\xe2\x24\x59\x4e\x56\xab\xb6\x74\x89\xaa\x20\x01\x39\xb3\x0b\x62\xf8\xd6\x9d\x34" +
	"\x5b\x55\x7c\xcf\x9e\x06\xad\xe9\x19\x84\x32\x15\xd7\xa3\xeb\xab\x4f\x38\xae\x57\x93\xe5\x3c\x9e\x4d\x4e\x58\x62" +
	"\xa6\xa5\xf9\x84\xd4\x22\x5e\xad\xbe\x3e\x2c\x93\x73\x52\x0e\x43\xf8\xbb\xdc\x62\xf9\x30\x9b\x3c\xde\x4d\xd6\xab" +
	"\xcd\x7a\x39\xfd\xa0\x09\xe7\xad\x26\xce\xa9\x08\xd1\xf3\x75\x78\x1f\xc8\x48\x5b\x23\xd9\x7a\x69\x76\x75\x21\x37" +
	"\xa3\x9b\xf1\xbb\x4c\x69\x55\xa1\x69\x66\x0b\x73\xf4\xc7\x46\xa0\x2b\x70\x81\x9c\x0b\x18\x96\xe8\x87\xca\xee\x86" +
	"\x9d\x4f\x4f\xb3\x0e\xc1\x8f\x9f\x7e\xa4\xec\x2e\xaa\xde\x37\xee\xa8\x39\x7f\x70\xfb\x73\x6a\xfe\x85\x0b\x40\xda" +
	"\xf1\x3e\x91\x5e\xc0\x8f\x9f\x0d\x1a\xc8\x97\x32\xa5\x38\x4d\xab\xb4\x67\xe7\xaf\x7b\x6c\x7e\x6a\x54\x7f\x05\x00" +
	"\x00\xff\xff\x79\xf8\x29\x2d\xcf\x05\x00\x00")

func bindataDeploymentalamedadatahubDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentalamedadatahubDMyaml,
		"Deployment/alameda-datahubDM.yaml",
	)
}



func bindataDeploymentalamedadatahubDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentalamedadatahubDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-datahubDM.yaml",
		size: 1487,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentalamedaevictionerDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xcd\x6e\xdb\x3c\x10\xbc\x1b\xf0\x3b\x2c\x72\xc9\x49\xb2\x83\xef" +
	"\x73\x8a\xf2\xa6\x54\x06\x1a\x20\x71\x8d\x24\xcd\xd5\xd8\x50\x6b\x8b\x28\xff\x42\xae\x14\x08\x45\xdf\xbd\xa0\x53" +
	"\xa5\x52\x12\xbb\xe1\x49\x5c\x72\x67\x66\x47\x43\xf4\xea\x9e\x42\x54\xce\x0a\x40\xef\xe3\xac\x3d\x9b\x4e\x7e\x28" +
	"\x5b\x09\x28\xc9\x6b\xd7\x19\xb2\x3c\x9d\x18\x62\xac\x90\x51\x4c\x27\x00\x16\x0d\x09\x40\x8d\x86\x2a\xcc\xa8\x55" +
	"\x92\x95\xb3\x14\xfa\xb3\xe8\x51\x92\x80\x2d\x55\x14\x90\x5d\x40\x95\x4e\x34\x3e\x90\x8e\x7b\x00\x48\x54\x2f\x08" +
	"\xcf\x15\xe9\x8c\x77\x96\x2c\x1f\x42\x46\x6b\x1d\x63\xda\xf7\x20\x15\x45\x19\x94\xe7\xbd\xf8\x92\xb6\xca\x52\x84" +
	"\xda\x3d\x01\x3b\xa8\xf6\xe2\x81\x6b\x3a\x00\x07\xc0\x64\xbc\x46\xa6\x1c\xb5\xaf\x31\x77\x9e\x6c\xac\xd5\x96\x73" +
	"\xe5\x66\x4f\xa8\x38\xdb\xba\x90\x05\xc2\xaa\x13\x70\xca\xa1\xa1\xd3\xe9\x24\x7a\x92\x7b\xf6\x40\x5e\x2b\x89\x51" +
	"\xc0\x59\xda\x46\xd2\x24\xd9\x85\x3f\xca\x0c\xb2\xac\xaf\x86\x03\x8f\x47\x7e\xa5\xa5\x57\xd2\x77\x0f\xcd\x4e\xeb" +
	"\x98\xe1\x69\xe9\x31\xd3\x51\x2e\x80\x97\x19\x9e\x6d\xb7\x8c\xca\x52\xf8\xdb\x9e\xfd\x93\x0f\x40\x19\xdc\x91\x80" +
	"\xc7\x06\xbb\x64\x97\x0f\xce\xd7\xc4\x91\x5d\x98\xbd\x6d\xcb\x42\x4d\x5a\xb4\xf3\xfc\xbf\xfc\xfc\x15\xc4\xba\xd1" +
	"\x7a\xed\xb4\x92\x9d\x80\xcb\xed\xca\xf1\x3a\x50\xdc\x27\xae\xbf\x16\x28\xba\x26\x48\x1a\x8e\x07\xa0\x95\x51\x3c" +
	"\x2e\x01\x48\xdf\x08\x38\x9f\x9b\x71\xd5\x90\x71\xa1\x13\xf0\x79\x7e\xad\x86\x27\x81\x1e\x1b\x8a\xef\x83\xfc\xbf" +
	"\x38\x00\xf2\x69\x31\x04\x21\xdb\x0e\xba\x7b\xdf\x8a\xab\xe2\x7a\x59\x16\x9b\xe5\xfd\xe5\x97\xbb\xcb\x6f\xab\xe5" +
	"\xcd\xa6\x2c\xee\x8a\xaf\xdf\x2f\x36\x45\x59\xde\x2c\x6f\x6f\x87\xd8\x2d\xea\x86\x04\x9c\xf4\xb6\xa5\x1f\x5f\x37" +
	"\x0f\xf9\xe0\xf5\xe4\xb1\x95\x62\x31\x9f\x2f\xe6\x27\x1f\x62\xeb\x3f\x37\xcb\x55\x71\x71\xb5\x7c\x8f\x2d\xc5\x79" +
	"\x00\xd6\x3a\xdd\x18\xba\x76\x8d\x1d\xf9\x91\x81\x49\xa5\x35\x72\x2d\x60\xd6\x62\x98\x69\xb7\x9b\x8d\x9e\xed\x30" +
	"\xa0\xef\x24\x26\xd3\x6e\x97\xa5\x58\xe0\x8e\xfa\x86\x67\xb2\xb7\x79\xfb\x60\x3b\x00\x19\xcf\x5d\xa9\x82\x80\x9f" +
	"\xbf\xfa\x6a\xa4\xd0\x2a\x49\x85\x94\x49\xf1\xb1\xf0\x8e\x6f\xae\x0e\x44\xfd\x77\x00\x00\x00\xff\xff\x42\x59\x6f" +
	"\xb4\x18\x05\x00\x00")

func bindataDeploymentalamedaevictionerDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentalamedaevictionerDMyaml,
		"Deployment/alameda-evictionerDM.yaml",
	)
}



func bindataDeploymentalamedaevictionerDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentalamedaevictionerDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-evictionerDM.yaml",
		size: 1304,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentalamedagrafanaDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x3d\x8f\xe3\x36\x10\xed\x17\xd8\xff\x30\x70\x73\x4d\x24\x79\xef" +
	"\x2e\x0d\xbb\xe0\xb6\x09\x90\x3d\xb8\x08\xd2\x04\x29\x66\xa9\xb1\xc5\x2c\xc9\x61\xc8\x91\x17\x46\x90\xff\x1e\x48" +
	"\x2b\x59\x1f\xb6\xb4\xde\xe2\xd4\x18\xe6\xbc\x79\xf3\xe6\x83\x03\x62\x30\x7f\x50\x4c\x86\xbd\x02\x0c\x21\x15\xc7" +
	"\x87\xfb\xbb\x17\xe3\x4b\x05\x8f\x14\x2c\x9f\x1c\x79\xb9\xbf\x73\x24\x58\xa2\xa0\xba\xbf\x03\xf0\xe8\x48\x01\x5a" +
	"\x74\x54\x62\x76\x88\xb8\x47\x8f\xbd\x21\x05\xd4\xa4\x60\x4f\x25\x45\x14\x8e\x68\x1a\x8b\xc5\x67\xb2\xa9\xf5\x86" +
	"\x26\xce\xd9\xfd\xed\x44\xb3\x0b\xec\xc9\xcb\x55\x5a\xf4\x9e\x05\xc5\xb0\xef\x19\x4a\x4a\x3a\x9a\x20\xad\xec\x47" +
	"\xda\x1b\x4f\x09\x2a\x7e\x05\x61\x28\x5b\xd9\x20\x15\x35\x81\xac\xd1\xad\x27\x8c\xf8\x00\x84\x5c\xb0\x28\x94\xa3" +
	"\x0d\x15\xe6\x1c\xc8\xa7\xca\xec\x25\x37\x5c\xbc\xa2\x91\x6c\xcf\x31\x8b\x84\xe5\x49\xc1\x27\x89\x35\x7d\xba\xbf" +
	"\x4b\x81\x74\x1b\x3e\x52\xcb\x9a\x14\x3c\x34\x7f\x13\x59\xd2\xc2\xb1\x93\xe6\x50\x74\xf5\xdb\x38\xdd\x79\xca\xe3" +
	"\xd4\x7a\x21\xbd\xf3\xb8\xcc\xcd\x67\x6f\x25\x02\x38\xeb\x6b\x3e\xe3\x8d\x7c\x63\x2f\x68\x3c\xc5\xc1\x3f\xeb\x7a" +
	"\x77\x20\x11\x7e\x21\x3f\xf0\x1a\x87\x07\x52\xb0\x41\x1b\x8c\xa7\xcd\x60\xd0\xec\x1c\x36\xe3\xf0\xe7\x26\x55\x9b" +
	"\x9f\x36\x45\xaa\xc8\xda\xa2\x67\xc8\x53\xb5\xf9\x6b\x40\x1f\xd9\xd6\x8e\x9e\xb8\xf6\x32\x56\x9d\x81\x6b\x8e\x76" +
	"\x28\x95\x82\x37\x86\xc1\x08\x83\xa8\xac\xe5\xcc\x66\x80\xa9\x77\x53\x9f\xc4\x75\xd4\x94\x2e\x39\xae\x1a\xa7\xfe" +
	"\x24\xba\xe8\x0a\x57\x84\xc8\x47\xd3\x0c\xbf\xf1\x87\x75\xe2\x10\xd9\x91\x54\x54\xa7\x6c\xc0\xf5\x30\xbd\x52\xe9" +
	"\x71\x8b\x46\x85\xee\x15\x74\xbf\xea\xe7\xfc\x6b\xfe\x65\x86\xda\xd5\xd6\xee\xd8\x1a\x7d\x52\xf0\xeb\xfe\x3b\xcb" +
	"\x2e\x52\x6a\xaf\x63\x0f\x0b\x1c\x27\x75\x6e\xe2\x9e\xc5\xec\x38\x8a\x82\x2f\xdb\xed\x76\x0c\xe8\x13\xaa\x44\xc2" +
	"\xf4\x3c\x44\x16\xd6\x6c\x15\xfc\xfe\x6d\x37\x98\x22\x75\x45\x99\xc4\xb1\xc6\x99\x59\x68\x00\x1d\x6a\x05\x9f\xb7" +
	"\x5b\x37\x3d\x76\xe4\x38\x9e\x5a\xcb\x93\x19\x9b\x22\xfd\x53\x53\xba\x4e\xf3\xb0\x48\xf3\x30\xa5\x59\x18\xb9\x79" +
	"\xdb\x8f\x18\x0b\x6b\x9e\x8b\x8b\x86\x0c\x25\xe9\x4c\x59\x6a\xd6\xd6\x81\xa6\x90\x54\x3f\x87\x96\xe9\x0a\xc1\x6a" +
	"\xa4\xa2\xc4\x54\x3d\x33\xc6\x32\x15\x93\xa5\x37\x0d\x3e\xa0\xb2\xbf\x13\xfb\x65\xfa\x8f\xce\xef\x4d\x13\xfc\xa1" +
	"\x30\xbd\xd0\xd5\x34\x5a\x9f\x92\x62\x82\x1e\xf6\xd6\xa8\xe9\x5a\xb8\x51\x1a\xb9\x20\xa7\x47\x13\x15\xfc\xfb\xdf" +
	"\xa5\xfb\x4a\xdf\x96\x1c\x35\xfb\xbd\x39\x3c\x61\x98\x8d\x9e\x11\x72\xf3\x71\xcc\xe0\x85\x4e\xc3\xce\xcc\x53\x35" +
	"\xb5\x03\x74\x83\xb1\x04\x98\xaa\x5c\x5d\x33\x2b\x3b\x70\x49\x72\x49\x7b\xac\xad\x3c\x71\x49\x0a\xbe\x7e\xde\xde" +
	"\x9c\xd0\x50\xf5\xfc\x84\xce\x5e\x4f\x6a\x15\xf4\x81\xc4\x16\x16\xf3\x52\x52\x17\x77\xe2\x0d\x78\x73\x6e\xda\xd6" +
	"\x49\x28\x56\x84\x56\xaa\x7c\x7e\xa1\x86\xf4\xde\xc3\x75\x74\x9e\x4b\x7a\x97\x6b\x15\x74\xae\x39\x95\x46\x37\x0f" +
	"\x92\x15\xa2\x15\xd0\x3b\xbb\xe2\xc7\x15\xf4\xf2\x5e\xaf\x0c\xcd\x0d\xe0\xa5\x6d\xd1\x63\x12\xc5\xa3\xd1\xf4\x8b" +
	"\xd6\xcd\x4e\x5a\x78\xf2\xcc\x61\xdf\xaf\x3d\x4c\xff\x0f\x00\x00\xff\xff\xb9\xaa\xfe\x14\xe2\x0a\x00\x00")

func bindataDeploymentalamedagrafanaDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentalamedagrafanaDMyaml,
		"Deployment/alameda-grafanaDM.yaml",
	)
}



func bindataDeploymentalamedagrafanaDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentalamedagrafanaDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-grafanaDM.yaml",
		size: 2786,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555914359, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentalamedainfluxdbDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xc1\x4f\xdb\x30\x14\xc6\xef\x95\xfa\x3f\x3c\xb1\x03\xa7\xb6\xf4" +
	"\x34\xc9\xb7\x42\xc3\x88\x06\x25\x6a\x53\xb6\x9d\xaa\xd7\xe4\x85\x5a\x38\xb6\x65\xbf\x14\xa2\x69\xff\xfb\x94\x40" +
	"\x20\x0d\x6d\x41\xda\x7c\xa8\x1a\x3f\x7f\xbf\xef\x7b\x71\x6c\xb4\xf2\x8e\x9c\x97\x46\x0b\x40\x6b\xfd\x68\x3b\xee" +
	"\xf7\x1e\xa4\x4e\x05\x4c\xc9\x2a\x53\xe6\xa4\xb9\xdf\xcb\x89\x31\x45\x46\xd1\xef\x01\x68\xcc\x49\x00\x2a\xcc\x29" +
	"\xc5\x81\xd4\x99\x2a\x9e\xd2\x75\x53\xf1\x16\x13\x12\x90\x51\x4a\x0e\xd9\x38\x94\x55\x45\xe1\x9a\x94\xaf\xe5\x50" +
	"\x19\xbd\xea\x9f\x67\x12\x93\x5b\xa3\x49\xf3\x7e\x2e\x6a\x6d\x18\x59\x1a\xdd\x20\x52\xf2\x89\x93\x96\xeb\xe0\x53" +
	"\xca\xa4\x26\x0f\x1b\xf3\x08\x6c\x20\xad\x83\x03\x6f\xa8\x72\x52\x32\xa9\x95\xd0\x06\x02\x30\xe5\x56\x21\xd3\x10" +
	"\x95\xdd\xe0\xd0\x58\xd2\x7e\x23\x33\x1e\x4a\x33\x7a\x44\xc9\x83\xcc\xb8\x81\x23\x4c\x4b\x01\xa7\xec\x0a\x3a\xed" +
	"\xf7\xbc\xa5\xa4\xf6\x77\x54\x63\xbd\x80\x71\xf5\xe8\x49\x51\xc2\xc6\xbd\x64\xcb\x91\x93\xcd\x75\xbb\xe1\x6e\xd3" +
	"\x3b\xcd\x35\x49\x1a\x75\xfb\x55\x57\x43\x7d\x9a\x04\xf0\x9a\xb0\x1a\x5f\xc0\x53\x52\x38\xc9\xe5\x85\xd1\x4c\x4f" +
	"\xdc\xaa\x00\xb8\x42\x4f\xfc\xd2\x93\x13\x30\x3e\x3b\x3b\x6b\x4a\x89\xd1\x8c\x52\x93\x7b\x73\x1c\xbc\xec\xf8\xae" +
	"\x55\x35\x64\x8e\xf7\xad\x82\x18\x0f\xbf\x0e\x50\x59\xa9\xa9\xb3\x26\x2a\x94\x8a\x8c\x92\x49\x29\x20\xcc\x66\x86" +
	"\x23\x47\xbe\xfe\xb2\x9a\x65\xa4\xb7\xad\x16\x1b\xcb\x70\x76\x79\xbd\xfc\x39\x3d\x5f\xcd\x83\xe8\x76\x1e\x87\xb3" +
	"\x6f\xab\x69\xb8\x98\x9c\x5f\x07\xd3\xb7\xc5\x00\x5b\x54\x05\x09\x38\xa9\xf6\xe9\xe4\x08\xe5\x2a\x8e\xa3\xfa\x67" +
	"\xb1\x0a\x66\xff\x83\x72\x11\xcc\xe3\xf0\x32\xbc\x98\xc4\xc1\x3e\xd2\x88\x38\x19\xb1\xf2\x23\xeb\xe4\x16\x99\xaa" +
	"\xff\xc3\xc4\xf1\x27\xe9\xd1\x3c\xbc\x9b\xc4\xc1\xea\x7b\xf0\xeb\xd3\xf4\x07\x2a\x3f\xa4\x4f\x96\xf1\xd5\xbf\xbc" +
	"\x80\xc9\xf4\x26\x9c\xad\x96\x8b\x60\xbe\x4f\x8d\x69\x2e\xf5\xc7\xf2\x68\xb2\x58\xfc\xb8\x9d\xef\x0d\x50\x23\x2c" +
	"\x7a\x7f\x0c\x73\xc8\xbf\xf0\xe4\x3e\xd2\x1d\x75\xaf\x00\x1d\xf3\xad\x51\x45\x4e\x37\xa6\xd0\xec\x77\x3e\xd3\xbc" +
	"\x9a\x8a\x90\x37\x02\xba\xdb\xd1\x46\xef\xbf\x32\x07\xac\x7c\x7b\x55\x75\xdd\xdc\x6a\x55\x0a\xc8\x50\x79\x3a\xe4" +
	"\xb3\x45\x37\x52\x72\x3d\x7a\x7f\x1e\xa1\x73\x52\x07\xbe\xba\x80\xef\x77\xa2\xf8\x62\xfd\xcc\xe9\xca\x9f\x7b\x3c" +
	"\x7c\xec\xdf\xc3\x28\xb7\x5c\x4e\xa5\x13\xf0\xfb\x4f\x57\x75\xbc\x57\x4f\x89\x23\x16\x3b\xb9\xea\xa9\xd9\x41\xf1" +
	"\xdf\x00\x00\x00\xff\xff\xcf\x8f\x9f\xf5\xaa\x06\x00\x00")

func bindataDeploymentalamedainfluxdbDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentalamedainfluxdbDMyaml,
		"Deployment/alameda-influxdbDM.yaml",
	)
}



func bindataDeploymentalamedainfluxdbDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentalamedainfluxdbDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-influxdbDM.yaml",
		size: 1706,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555492503, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentalamedaoperatorDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x6f\xe3\x38\x0c\xbd\x07\xc8\x7f\x20\x72\xe9\xc9\x4e\xda\xdd" +
	"\xee\x41\x37\x2f\x5c\x60\x0a\xf4\x23\x48\x3b\x73\x2d\x58\x99\x8e\x85\x91\x44\x55\x92\x1d\x18\x83\xf9\xef\x03\xdb" +
	"\x75\x6b\xa7\xe9\xcc\xf8\x66\x92\xef\xf1\xf1\x89\x44\xa7\xbe\x91\x0f\x8a\xad\x00\x74\x2e\xac\x9b\xf3\xe5\xe2\xbb" +
	"\xb2\x85\x80\x9c\x9c\xe6\xd6\x90\x8d\xcb\x85\xa1\x88\x05\x46\x14\xcb\x05\x80\x45\x43\x02\x50\xa3\xa1\x02\x13\x76" +
	"\xe4\x31\xb2\x1f\x33\xc1\xa1\x24\x01\x25\x15\x43\x1c\x55\x97\xd1\xf8\x4c\x3a\xf4\x70\xe8\x1a\xbd\xe1\x87\x88\x64" +
	"\xe3\xd8\x92\x8d\xa7\x79\xd1\x5a\x8e\x18\x15\xdb\x91\xa2\xa0\x20\xbd\x72\xb1\x17\x9e\x53\xa9\x2c\x05\xa8\xf8\x00" +
	"\x91\xa1\xe8\x85\x43\xac\xa8\xeb\xa4\x95\xec\x91\x27\x89\x01\x22\x19\xa7\x31\x52\x8a\xda\x55\x98\xb2\x23\x1b\x2a" +
	"\x55\xc6\x54\xf1\xfa\x80\x2a\x26\x25\xfb\xc4\x13\x16\xad\x80\xb3\xe8\x6b\x3a\x5b\x2e\x82\x23\xd9\xeb\xf0\xd4\xd3" +
	"\x07\x01\xe7\xdd\x6f\x20\x4d\x32\xb2\x7f\xd5\x68\x30\xca\xea\x66\x3a\xf8\x7c\xf4\x99\x92\x51\xc7\x88\x9d\x1a\xde" +
	"\x7d\x9f\x9b\xde\x7d\x7a\xde\xe5\x37\x7d\x00\xde\xd4\x0f\xc6\xdb\x88\xca\x92\x7f\x07\x27\x7f\xe8\x05\xa0\x0c\xee" +
	"\x49\xc0\x4b\x8d\x6d\x67\x93\xf3\xec\x2a\x8a\x21\xb2\x5f\x1f\x83\x12\x5f\x91\x16\xcd\x26\xfd\x27\xfd\xef\x88\x60" +
	"\x5b\x6b\xbd\x65\xad\x64\x2b\xe0\xba\xbc\xe3\xb8\xf5\x14\xfa\x6d\x1b\xcb\x3c\x05\xae\xbd\xa4\xe9\x60\x00\x5a\x19" +
	"\x15\xe7\x21\x00\xe9\x6a\x01\x17\x1b\x33\x8f\x1a\x32\xec\x5b\x01\xff\x6e\x6e\xd5\x34\xe3\xe9\xa5\xa6\x70\x9a\xe4" +
	"\xfc\x33\x92\x8b\x19\x09\xd9\x66\x82\x1e\x3d\xcb\x6e\xb2\xdb\xab\x3c\x7b\xba\xdf\x5e\xed\xb2\xc7\xfb\xdd\x53\x9e" +
	"\x3d\x66\x5f\xbe\xfe\xff\x94\xe5\xf9\xee\xea\xe1\x61\xca\xdc\xa0\xae\x49\xc0\x6a\xb4\xac\x7b\xee\xaa\x7e\x4e\x27" +
	"\x97\x93\x86\x46\x8a\xcb\xcd\xe6\x72\xb3\x7a\x47\x36\xac\x6b\x43\xb7\x5c\xdb\xd9\x00\xa3\x04\xc7\x85\xb2\x25\x4f" +
	"\x3b\x99\xae\x76\x8b\xb1\x12\xb0\xa6\x28\xd7\x27\x4a\xba\x0d\xbf\xb7\xba\x15\x50\xa2\x0e\x34\xa5\x9d\xa2\x1b\xf4" +
	"\x6b\xcd\xfb\xf5\xec\x78\x87\x6f\xe8\xfe\x61\x6b\x12\xcd\xfb\xa4\x5b\x0d\xdc\xbf\xb1\x0e\x13\x7c\xdc\xb8\xbf\x02" +
	"\x03\x90\x71\xb1\xcd\x95\x17\xf0\xe3\xe7\x31\xc5\x87\xd1\x0a\x3e\xd8\x03\xfa\x22\xdb\x5e\xcf\x5e\x5b\x45\x32\xf3" +
	"\xf7\x4f\xc0\xf5\x43\xae\x86\x63\x5a\xcd\xb7\xa0\x54\xa4\x8b\x1d\x95\x47\x2b\xf3\x9a\x18\xec\x19\x8f\x36\x1d\x18" +
	"\xc6\xca\x40\xbe\x51\x92\x32\x29\x3b\x27\x3f\x3f\xac\x79\xdd\xdd\xc9\x23\xec\xea\x7e\x05\x00\x00\xff\xff\x67\x68" +
	"\xa2\xb4\xb4\x05\x00\x00")

func bindataDeploymentalamedaoperatorDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentalamedaoperatorDMyaml,
		"Deployment/alameda-operatorDM.yaml",
	)
}



func bindataDeploymentalamedaoperatorDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentalamedaoperatorDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-operatorDM.yaml",
		size: 1460,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceadmissioncontrollerSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x41\xaa\xc3\x30\x0c\x44\xf7\x06\xdf\x41\x17\x08\xe4\xf3\xb3\x28" +
	"\x3e\x45\xa1\xd0\xbd\x6a\x4f\x8b\xa9\x63\x1b\x49\xe4\xfc\xc5\xce\xbe\xdd\x0d\xf3\x90\xde\x70\xcf\x77\x88\xe6\x56" +
	"\x03\x1d\x7f\xde\xbd\x73\x4d\x81\x6e\x90\x23\x47\x78\xb7\xc3\x38\xb1\x71\xf0\x8e\xa8\xf0\x03\x45\x67\x24\xe2\xde" +
	"\x03\x71\xda\xb3\x8e\xe3\x25\xb6\x6a\xd2\x4a\x81\x0c\x5c\x79\xc7\x77\xaa\x9d\x23\x02\x3d\x91\x20\x6c\x4d\x38\x7b" +
	"\xa7\x1d\x71\x7e\xef\x4d\xec\xf4\x2c\x33\x07\xda\xb6\xff\x53\x6b\x2c\x2f\xd8\x75\x96\x97\x75\x5d\x47\xab\x28\x88" +
	"\xd6\xe4\xd7\xb2\x4f\x00\x00\x00\xff\xff\x3b\x08\x28\x3b\xec\x00\x00\x00")

func bindataServiceadmissioncontrollerSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceadmissioncontrollerSVyaml,
		"Service/admission-controllerSV.yaml",
	)
}



func bindataServiceadmissioncontrollerSVyaml() (*asset, error) {
	bytes, err := bindataServiceadmissioncontrollerSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/admission-controllerSV.yaml",
		size: 236,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555492503, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServicealamedadatahubSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\xae\xc3\x20\x10\x44\x7b\x24\xee\xb0\x17\xb0\xe4\x5f\xb8\xe1" +
	"\x1a\x5f\xfa\xfd\x18\xe6\x27\x28\xd8\xac\x16\xe2\xf3\x47\xd8\x69\x93\x6e\xb5\x6f\xf4\x66\xa0\xf9\x8f\xd6\x72\xdd" +
	"\x83\x1c\x3f\xde\x3d\xf2\x9e\x82\xfc\xd2\x8e\x1c\xe9\xdd\xc6\x8e\x84\x8e\xe0\x9d\x48\xc1\xca\xd2\xce\x53\x04\xaa" +
	"\x41\x50\xb0\x31\x61\x1a\x91\xfb\x73\x1d\x64\xc7\xc6\x8f\xa0\x29\x22\x83\xfc\x33\xd1\xd0\xab\x21\x7b\xd7\x94\xf1" +
	"\x74\x6a\xb5\x7e\xd9\xa7\xb7\xe5\x66\x1a\xaf\xb6\xc1\x82\x2c\xf3\xbc\xcc\xe3\xd1\x58\x18\x7b\xb5\x2f\x5b\x5e\x01" +
	"\x00\x00\xff\xff\x70\x2e\x3b\x66\xd9\x00\x00\x00")

func bindataServicealamedadatahubSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServicealamedadatahubSVyaml,
		"Service/alameda-datahubSV.yaml",
	)
}



func bindataServicealamedadatahubSVyaml() (*asset, error) {
	bytes, err := bindataServicealamedadatahubSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/alameda-datahubSV.yaml",
		size: 217,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1554355143, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServicealamedagrafanaSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x41\x0a\xc2\x30\x10\x45\xf7\x81\xdc\x61\x2e\x50\xa8\xb8\xcb\x29" +
	"\x04\xc1\xfd\x37\xf9\x2d\xc1\x34\x09\x93\xa1\xe7\x17\xdb\x95\x0b\xdd\x3d\xe6\xc1\x9b\x8f\x9e\x1f\xd4\x91\x5b\x0d" +
	"\xb2\x5f\xbc\x7b\xe5\x9a\x82\xdc\xa9\x7b\x8e\xf4\x6e\xa3\x21\xc1\x10\xbc\x13\x29\x78\xb2\x8c\x03\x45\xd0\x7b\x10" +
	"\x14\x6c\x4c\x98\x56\xc5\x82\x8a\x8f\xa9\xd8\xf8\x53\x8c\x8e\xc8\x20\x0b\x13\x15\xd6\x14\xd9\xbb\xd1\x19\x8f\x66" +
	"\x6f\x6a\x67\x7d\x3a\x38\xc8\x75\x9e\xe7\xf3\x9b\x41\x57\xda\xed\xeb\x3a\x58\x18\xad\xe9\x9f\x41\xf2\x0e\x00\x00" +
	"\xff\xff\x45\x9d\xf7\x51\xdf\x00\x00\x00")

func bindataServicealamedagrafanaSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServicealamedagrafanaSVyaml,
		"Service/alameda-grafanaSV.yaml",
	)
}



func bindataServicealamedagrafanaSVyaml() (*asset, error) {
	bytes, err := bindataServicealamedagrafanaSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/alameda-grafanaSV.yaml",
		size: 223,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServicealamedainfluxdbSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x8a\xc3\x30\x10\x45\x7b\x81\xee\x30\x17\x30\xec\x36\x8b\xd1" +
	"\x29\x16\x16\xb6\xff\x96\xbe\x83\x88\x2c\x89\xd1\xc4\xe4\xf8\x21\x76\x95\x22\xe9\x1e\xf3\xe0\xcd\x47\xcf\xff\xd4" +
	"\x91\x5b\x0d\xb2\x7f\x7b\x77\xcd\x35\x05\xf9\xa3\xee\x39\xd2\xbb\x8d\x86\x04\x43\xf0\x4e\xa4\x60\x61\x19\x07\x8a" +
	"\xa0\xf7\x20\x28\xd8\x98\x30\xe5\xba\x96\xdb\x3d\x2d\x4f\x55\xb1\xf1\xbd\x19\x1d\x91\x41\x56\x26\x2a\xac\x29\xb2" +
	"\x77\xa3\x33\x1e\xd5\xde\xd4\xce\xfe\x74\x70\x90\xf9\x6b\xfe\x39\xff\x19\xf4\x42\xfb\x7d\xb9\x0e\x16\x46\x6b\xfa" +
	"\x69\xd2\x23\x00\x00\xff\xff\x95\xb1\x8d\xfd\xe1\x00\x00\x00")

func bindataServicealamedainfluxdbSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServicealamedainfluxdbSVyaml,
		"Service/alameda-influxdbSV.yaml",
	)
}



func bindataServicealamedainfluxdbSVyaml() (*asset, error) {
	bytes, err := bindataServicealamedainfluxdbSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/alameda-influxdbSV.yaml",
		size: 225,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555492503, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimadmissioncontrollerlogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\xbd\x4a\x84\x41\x0c\x45\xfb\x81\x79\x87\xbc\xc0\x0a\x5a\x4e\x6b" +
	"\x61\x25\x8a\xc5\x5a\x87\xcc\x55\x82\xf3\x67\x92\x6f\x9f\x5f\x66\xe1\xb3\xbc\x87\x73\x0f\x2f\xbd\xc2\x5c\xe7\x28" +
	"\x74\x7b\xcc\xe9\x47\x47\x2d\xf4\xbe\x91\x07\x46\x5c\x67\x3b\x3a\x9e\x1b\x6b\xcf\xa9\x23\xb8\x72\x70\xc9\x89\x68" +
	"\x70\x47\x21\xae\x5d\x7d\xdf\x2f\x32\x47\xd8\x6c\x0d\xf6\xb0\x6e\x72\x1a\xbe\x58\x50\xe8\x0b\x15\xc6\x31\x8d\x35" +
	"\x27\x5f\x90\x7b\x82\x45\xe0\xfe\x3a\x2b\xfc\xbe\x89\x2e\xf4\x01\xae\x9f\xa6\x81\xb7\x21\xd8\xd0\xe0\xf3\x30\xf9" +
	"\x57\x0c\xbf\x07\x3c\xce\x49\xe4\x3b\xfb\x8d\x42\x4f\x2f\x4a\x7f\x01\x00\x00\xff\xff\x8c\x5f\x09\x5c\xd0\x00\x00" +
	"\x00")

func bindataPersistentVolumeClaimadmissioncontrollerlogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimadmissioncontrollerlogyaml,
		"PersistentVolumeClaim/admission-controller-log.yaml",
	)
}



func bindataPersistentVolumeClaimadmissioncontrollerlogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimadmissioncontrollerlogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/admission-controller-log.yaml",
		size: 208,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimalamedaailogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x3b\x6e\xc3\x30\x10\x84\xe1\x9e\x00\xef\xb0\x17\x50\x80\xa4\x64" +
	"\x9b\x22\x55\x90\xc0\x85\x5c\x0f\xc8\xb1\xb1\xb0\xf8\x30\x97\xd2\xf9\x0d\x09\x90\xcb\xff\xc3\xee\xa0\xe9\xcc\x6e" +
	"\x5a\x4b\x90\xed\xd3\xbb\x87\x96\x14\xe4\x7f\x27\x1b\x2c\x63\xae\xcb\x9a\xf9\xbd\x40\xb3\x77\x99\x03\x09\x03\xc1" +
	"\x3b\x91\x82\xcc\x20\x58\x90\x99\x30\x41\x3f\xda\x16\x4f\xb7\x86\xc8\x20\x37\x26\x76\x8c\xda\xa1\xde\x59\x63\x3c" +
	"\x1e\x11\x23\xcd\x7e\x6b\xa2\x1d\x2d\x32\xc9\x85\x48\xd7\xae\x83\x7f\x25\x72\xc7\x4e\xab\x6b\x8f\xef\x93\xce\xe7" +
	"\x4a\x1b\x67\x8a\xd8\x3e\x7b\x67\x90\xaf\x1f\x95\x57\x00\x00\x00\xff\xff\x2b\xa4\x66\x20\xc6\x00\x00\x00")

func bindataPersistentVolumeClaimalamedaailogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimalamedaailogyaml,
		"PersistentVolumeClaim/alameda-ai-log.yaml",
	)
}



func bindataPersistentVolumeClaimalamedaailogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimalamedaailogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-ai-log.yaml",
		size: 198,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimalamedadatahublogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\xbb\x8e\xc2\x30\x10\x45\x7b\x4b\xfe\x87\xf9\x81\xac\xb4\x5b\xba" +
	"\xdd\x82\x0a\x81\x28\x42\x3d\xd8\x17\xb0\x88\x1f\x78\xc6\xf9\x7e\xe4\x48\xa1\x3c\xe7\x3e\xb8\xc6\x19\x4d\x62\xc9" +
	"\x8e\xd6\x5f\x6b\x5e\x31\x07\x47\xe7\xa1\x44\x91\x75\x2e\x4b\x4f\xf8\x5f\x38\x26\x6b\x12\x94\x03\x2b\x3b\x6b\x88" +
	"\x32\x27\x38\xe2\x85\x13\x02\x4f\x43\x3f\xfb\xed\xa7\xae\x7e\x0f\xa5\xb2\x87\xa3\x3b\x02\x1a\x6b\x69\x1c\xad\x91" +
	"\x0a\xbf\xad\xd9\x7b\x88\x1c\x4b\x80\x6c\x4c\x34\xd1\x05\x1c\xae\x2d\x2a\x4e\xd9\x63\xc8\x06\x29\xbd\xf9\x6f\xa5" +
	"\xe1\xdd\x21\xba\x23\x91\x8c\xdb\x07\x1c\xfd\x1d\x22\x7d\x02\x00\x00\xff\xff\xa5\xb7\x0d\x46\xcb\x00\x00\x00")

func bindataPersistentVolumeClaimalamedadatahublogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimalamedadatahublogyaml,
		"PersistentVolumeClaim/alameda-datahub-log.yaml",
	)
}



func bindataPersistentVolumeClaimalamedadatahublogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimalamedadatahublogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-datahub-log.yaml",
		size: 203,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimalamedaevictionerlogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\xbb\x4a\xc0\x40\x10\x45\xfb\x85\xfd\x87\xf9\x81\x08\x5a\x6e\x6b" +
	"\x61\x25\x8a\x45\xac\x87\xd9\xab\x0c\x66\x1f\xce\x4c\xf2\xfd\x92\x40\x2c\xcf\xb9\x97\xc3\x53\x57\x98\xeb\xe8\x85" +
	"\x8e\xc7\x9c\x7e\xb4\xd7\x42\xef\xa7\xf2\x40\x8f\x75\x6c\x7b\xc3\xf3\xc6\xda\x72\x6a\x08\xae\x1c\x5c\x72\x22\xea" +
	"\xdc\x50\x88\x37\x6e\xa8\xbc\xe0\x50\x09\x1d\x1d\xf6\x30\x0f\xb9\x77\x9f\x2c\x28\xf4\x85\x0a\xe3\x18\xc6\x9a\x93" +
	"\x4f\xc8\x15\x60\x11\xb8\xbf\x8e\x0a\xbf\x98\x68\xa1\x0f\x70\xfd\x34\x0d\xbc\x75\xc1\x29\x0d\x3e\x76\x93\xff\x8b" +
	"\xe1\x77\x87\xc7\x8d\x44\x7e\x66\xbf\x51\xe8\xe9\x45\xe9\x2f\x00\x00\xff\xff\xb6\xcc\x2f\xd3\xce\x00\x00\x00")

func bindataPersistentVolumeClaimalamedaevictionerlogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimalamedaevictionerlogyaml,
		"PersistentVolumeClaim/alameda-evictioner-log.yaml",
	)
}



func bindataPersistentVolumeClaimalamedaevictionerlogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimalamedaevictionerlogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-evictioner-log.yaml",
		size: 206,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimalamedaoperatorlogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\x3d\xce\xc2\x30\x10\x44\x7b\x4b\xbe\xc3\x5e\x20\x9f\xf4\x51\xba" +
	"\xa5\xa0\x42\x20\x8a\x50\x8f\xec\x01\x59\xc4\x3f\x78\x9d\x9c\x1f\x25\x28\x94\xef\xbd\xdd\x41\x8d\x23\x9b\xc6\x92" +
	"\x9d\x2c\xff\xd6\xbc\x62\x0e\x4e\xae\xab\xd2\xce\xdc\xc7\x32\xcd\x89\xc7\x09\x31\x59\x93\xd8\x11\xd0\xe1\xac\x11" +
	"\xc9\x48\x74\x82\x09\x89\x01\x43\xa9\x6c\xe8\xa5\xfd\xd5\xc5\xef\x55\x2b\x3c\x9d\x3c\x18\xbe\x0d\xd1\x1a\xad\xf4" +
	"\xdb\x3b\xbc\xa7\xea\xb9\x04\xea\xc6\x22\x83\xdc\x88\x70\x6f\xb1\xf3\x92\x3d\x57\xd9\xa8\x65\x6e\xfe\x77\xd2\xf8" +
	"\x9e\xa9\x7d\x47\x11\x5d\x67\x9f\x74\x72\x38\x45\xf9\x04\x00\x00\xff\xff\x75\x2c\x65\xe2\xcc\x00\x00\x00")

func bindataPersistentVolumeClaimalamedaoperatorlogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimalamedaoperatorlogyaml,
		"PersistentVolumeClaim/alameda-operator-log.yaml",
	)
}



func bindataPersistentVolumeClaimalamedaoperatorlogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimalamedaoperatorlogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-operator-log.yaml",
		size: 204,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimmyalamedagrafanaPVCyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\xbd\x4a\xc6\x40\x14\x44\xfb\x85\x7d\x87\xfb\x02\x5f\x40\xcb\x6d" +
	"\x2d\xac\x44\xb1\x88\xf5\xb0\x3b\x09\x8b\xd9\x1f\xef\xdd\x04\x7c\x7b\x49\x20\x96\xe7\xcc\x70\xd0\xf3\x4c\xb5\xdc" +
	"\x6a\x90\xe3\xc9\xbb\xef\x5c\x53\x90\x8f\x53\xd9\x60\x1d\x73\xdb\xf6\xc2\x97\x0d\xb9\x78\x57\x38\x90\x30\x10\xbc" +
	"\x13\xa9\x28\x0c\x52\x7e\x1f\xd8\x50\x98\x30\xad\x8a\x05\x15\x53\x3f\xe2\xbd\x5b\x47\x64\x90\x85\x89\x8a\xd1\x14" +
	"\xd9\x3b\xeb\x8c\x57\x00\x31\xd2\xec\xad\x25\xda\xc5\x22\x0f\xf9\x24\xd2\x97\xe6\xc1\xf7\x1a\x79\x4a\xa5\xb5\x5d" +
	"\xe3\xff\x45\xf9\xb3\xd3\xc6\x8d\x22\x76\x66\x57\x06\x79\x7e\xcd\xf2\x17\x00\x00\xff\xff\x51\x19\x4f\x94\xce\x00" +
	"\x00\x00")

func bindataPersistentVolumeClaimmyalamedagrafanaPVCyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimmyalamedagrafanaPVCyaml,
		"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml",
	)
}



func bindataPersistentVolumeClaimmyalamedagrafanaPVCyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimmyalamedagrafanaPVCyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/my-alamedagrafanaPVC.yaml",
		size: 206,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimmyalamedainfluxdbPVCyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\x3f\x4b\xc0\x30\x10\x47\xf7\x40\xbe\xc3\x6d\x9d\x5a\xec\x9a\xd5" +
	"\xc1\x49\x14\x87\x3a\x9f\xc9\xaf\x72\x98\x7f\xe6\x92\xa2\xdf\x5e\x5a\xa8\xe3\x7b\x3c\x1e\x57\xd9\xd0\x54\x4a\x76" +
	"\x74\xac\xd6\x7c\x49\x0e\x8e\x5e\x4f\xa5\x1d\xb9\x6f\x25\x8e\x84\xc7\xc8\x92\xac\x49\xe8\x1c\xb8\xb3\xb3\x86\x28" +
	"\x73\x82\xa3\xf4\x3b\x73\xe4\x84\xc0\x8b\xe4\x3d\x8e\x9f\xf0\xb1\xd4\xc3\xdf\x81\x56\xf6\x70\xb4\x23\xa0\x71\x2f" +
	"\x8d\xc5\x1a\xad\xf0\xd7\x81\xbd\x87\xea\x73\x09\xd0\x8b\x89\x66\x7a\x03\x87\xf7\x26\x1d\x2f\xd9\xe3\x94\x0d\x5a" +
	"\x46\xf3\xff\x49\xc3\xf7\x80\xf6\x1b\x89\xf4\xdc\x7e\xc2\xd1\xb4\x3e\x3c\xc9\xf4\x17\x00\x00\xff\xff\x64\x55\x34" +
	"\x22\xd1\x00\x00\x00")

func bindataPersistentVolumeClaimmyalamedainfluxdbPVCyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimmyalamedainfluxdbPVCyaml,
		"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml",
	)
}



func bindataPersistentVolumeClaimmyalamedainfluxdbPVCyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimmyalamedainfluxdbPVCyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml",
		size: 209,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSecretadmissioncontrollertlsyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\x3d\x0a\x82\x31\x10\x04\xd0\x3e\x90\x3b\xec\x05\xbe\xc2\x76\x2f" +
	"\x61\x21\xd8\x0f\xc9\x08\x8b\xf9\x73\xb3\x0a\xde\x5e\x04\xed\x1f\x2f\x27\x2c\xbb\xd2\xb7\xcd\xa1\xf2\x3a\xe5\x74" +
	"\xb7\x51\x55\x2e\x2c\xce\xc8\xa9\x33\x50\x11\xd0\x9c\x44\x06\x3a\x55\x50\xbb\xed\xaf\x3f\xca\x1c\xe1\xb3\x35\xfa" +
	"\x11\x6d\xff\xc5\x5e\x28\x54\xb9\xb1\xd2\x11\xd3\x61\x39\xfd\x8a\x78\x2f\xaa\x9c\x17\x1e\x4f\x7e\x02\x00\x00\xff" +
	"\xff\xef\xa0\x60\xb8\x7a\x00\x00\x00")

func bindataSecretadmissioncontrollertlsyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSecretadmissioncontrollertlsyaml,
		"Secret/admission-controller-tls.yaml",
	)
}



func bindataSecretadmissioncontrollertlsyaml() (*asset, error) {
	bytes, err := bindataSecretadmissioncontrollertlsyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Secret/admission-controller-tls.yaml",
		size: 122,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555492503, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSecretalamedainfluxdbyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcb\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\x52\xee\xe0\x0b\x74\x60\xf5\x25" +
	"\x18\x90\xd8\x3f\xf5\xaf\x64\x91\xa4\x21\x71\x11\xdc\x9e\x85\xce\x4f\x0f\xdd\xef\x1c\xd3\xf7\xa6\xf2\xbe\xe4\xf4" +
	"\xf4\x66\x2a\x37\xae\x83\x91\x53\x65\xc0\x10\xd0\x9c\x44\x1a\x2a\x55\x50\x50\x69\x58\xbc\x6d\xe5\xf8\xd8\x63\x89" +
	"\x32\x4f\x9d\x1d\x2b\x55\x36\x1a\x07\x62\x1f\xf0\x9c\xfe\x3d\xbe\x9d\x2a\xd7\x8e\xd7\xc1\x5f\x00\x00\x00\xff\xff" +
	"\x2b\xc1\x62\x17\x74\x00\x00\x00")

func bindataSecretalamedainfluxdbyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSecretalamedainfluxdbyaml,
		"Secret/alameda-influxdb.yaml",
	)
}



func bindataSecretalamedainfluxdbyaml() (*asset, error) {
	bytes, err := bindataSecretalamedainfluxdbyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Secret/alameda-influxdb.yaml",
		size: 116,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555492503, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"ClusterRoleBinding/admission-controllerCRB.yaml":         bindataClusterRoleBindingadmissioncontrollerCRByaml,
	"ClusterRoleBinding/alameda-datahubCRB.yaml":              bindataClusterRoleBindingalamedadatahubCRByaml,
	"ClusterRoleBinding/alameda-evictionerCRB.yaml":           bindataClusterRoleBindingalamedaevictionerCRByaml,
	"ClusterRoleBinding/alameda-grafanaCRB.yaml":              bindataClusterRoleBindingalamedagrafanaCRByaml,
	"ClusterRoleBinding/alameda-operatorCRB.yaml":             bindataClusterRoleBindingalamedaoperatorCRByaml,
	"ClusterRole/admission-controllerCR.yaml":                 bindataClusterRoleadmissioncontrollerCRyaml,
	"ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml": bindataClusterRoleaggregatealamedaadmineditalamedaCRyaml,
	"ClusterRole/alameda-datahubCR.yaml":                      bindataClusterRolealamedadatahubCRyaml,
	"ClusterRole/alameda-evictionerCR.yaml":                   bindataClusterRolealamedaevictionerCRyaml,
	"ClusterRole/alameda-grafanaCR.yaml":                      bindataClusterRolealamedagrafanaCRyaml,
	"ClusterRole/alameda-operatorCR.yaml":                     bindataClusterRolealamedaoperatorCRyaml,
	"ServiceAccount/admission-controllerSA.yaml":              bindataServiceAccountadmissioncontrollerSAyaml,
	"ServiceAccount/alameda-aiSA.yaml":                        bindataServiceAccountalamedaaiSAyaml,
	"ServiceAccount/alameda-datahubSA.yaml":                   bindataServiceAccountalamedadatahubSAyaml,
	"ServiceAccount/alameda-evictionerSA.yaml":                bindataServiceAccountalamedaevictionerSAyaml,
	"ServiceAccount/alameda-grafanaSA.yaml":                   bindataServiceAccountalamedagrafanaSAyaml,
	"ServiceAccount/alameda-operatorSA.yaml":                  bindataServiceAccountalamedaoperatorSAyaml,
	"CustomResourceDefinition/alamedarecommendationsCRD.yaml": bindataCustomResourceDefinitionalamedarecommendationsCRDyaml,
	"CustomResourceDefinition/alamedascalersCRD.yaml":         bindataCustomResourceDefinitionalamedascalersCRDyaml,
	"ConfigMap/dashboards-config.yaml":                        bindataConfigMapdashboardsconfigyaml,
	"ConfigMap/grafana-datasources.yaml":                      bindataConfigMapgrafanadatasourcesyaml,
	"Deployment/admission-controllerDM.yaml":                  bindataDeploymentadmissioncontrollerDMyaml,
	"Deployment/alameda-aiDM.yaml":                            bindataDeploymentalamedaaiDMyaml,
	"Deployment/alameda-datahubDM.yaml":                       bindataDeploymentalamedadatahubDMyaml,
	"Deployment/alameda-evictionerDM.yaml":                    bindataDeploymentalamedaevictionerDMyaml,
	"Deployment/alameda-grafanaDM.yaml":                       bindataDeploymentalamedagrafanaDMyaml,
	"Deployment/alameda-influxdbDM.yaml":                      bindataDeploymentalamedainfluxdbDMyaml,
	"Deployment/alameda-operatorDM.yaml":                      bindataDeploymentalamedaoperatorDMyaml,
	"Service/admission-controllerSV.yaml":                     bindataServiceadmissioncontrollerSVyaml,
	"Service/alameda-datahubSV.yaml":                          bindataServicealamedadatahubSVyaml,
	"Service/alameda-grafanaSV.yaml":                          bindataServicealamedagrafanaSVyaml,
	"Service/alameda-influxdbSV.yaml":                         bindataServicealamedainfluxdbSVyaml,
	"PersistentVolumeClaim/admission-controller-log.yaml":     bindataPersistentVolumeClaimadmissioncontrollerlogyaml,
	"PersistentVolumeClaim/alameda-ai-log.yaml":               bindataPersistentVolumeClaimalamedaailogyaml,
	"PersistentVolumeClaim/alameda-datahub-log.yaml":          bindataPersistentVolumeClaimalamedadatahublogyaml,
	"PersistentVolumeClaim/alameda-evictioner-log.yaml":       bindataPersistentVolumeClaimalamedaevictionerlogyaml,
	"PersistentVolumeClaim/alameda-operator-log.yaml":         bindataPersistentVolumeClaimalamedaoperatorlogyaml,
	"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml":         bindataPersistentVolumeClaimmyalamedagrafanaPVCyaml,
	"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml":        bindataPersistentVolumeClaimmyalamedainfluxdbPVCyaml,
	"Secret/admission-controller-tls.yaml":                    bindataSecretadmissioncontrollertlsyaml,
	"Secret/alameda-influxdb.yaml":                            bindataSecretalamedainfluxdbyaml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"ClusterRole": {Func: nil, Children: map[string]*bintree{
		"admission-controllerCR.yaml": {Func: bindataClusterRoleadmissioncontrollerCRyaml, Children: map[string]*bintree{}},
		"aggregate-alameda-admin-edit-alamedaCR.yaml": {Func: bindataClusterRoleaggregatealamedaadmineditalamedaCRyaml, Children: map[string]*bintree{}},
		"alameda-datahubCR.yaml": {Func: bindataClusterRolealamedadatahubCRyaml, Children: map[string]*bintree{}},
		"alameda-evictionerCR.yaml": {Func: bindataClusterRolealamedaevictionerCRyaml, Children: map[string]*bintree{}},
		"alameda-grafanaCR.yaml": {Func: bindataClusterRolealamedagrafanaCRyaml, Children: map[string]*bintree{}},
		"alameda-operatorCR.yaml": {Func: bindataClusterRolealamedaoperatorCRyaml, Children: map[string]*bintree{}},
	}},
	"ClusterRoleBinding": {Func: nil, Children: map[string]*bintree{
		"admission-controllerCRB.yaml": {Func: bindataClusterRoleBindingadmissioncontrollerCRByaml, Children: map[string]*bintree{}},
		"alameda-datahubCRB.yaml": {Func: bindataClusterRoleBindingalamedadatahubCRByaml, Children: map[string]*bintree{}},
		"alameda-evictionerCRB.yaml": {Func: bindataClusterRoleBindingalamedaevictionerCRByaml, Children: map[string]*bintree{}},
		"alameda-grafanaCRB.yaml": {Func: bindataClusterRoleBindingalamedagrafanaCRByaml, Children: map[string]*bintree{}},
		"alameda-operatorCRB.yaml": {Func: bindataClusterRoleBindingalamedaoperatorCRByaml, Children: map[string]*bintree{}},
	}},
	"ConfigMap": {Func: nil, Children: map[string]*bintree{
		"dashboards-config.yaml": {Func: bindataConfigMapdashboardsconfigyaml, Children: map[string]*bintree{}},
		"grafana-datasources.yaml": {Func: bindataConfigMapgrafanadatasourcesyaml, Children: map[string]*bintree{}},
	}},
	"CustomResourceDefinition": {Func: nil, Children: map[string]*bintree{
		"alamedarecommendationsCRD.yaml": {Func: bindataCustomResourceDefinitionalamedarecommendationsCRDyaml, Children: map[string]*bintree{}},
		"alamedascalersCRD.yaml": {Func: bindataCustomResourceDefinitionalamedascalersCRDyaml, Children: map[string]*bintree{}},
	}},
	"Deployment": {Func: nil, Children: map[string]*bintree{
		"admission-controllerDM.yaml": {Func: bindataDeploymentadmissioncontrollerDMyaml, Children: map[string]*bintree{}},
		"alameda-aiDM.yaml": {Func: bindataDeploymentalamedaaiDMyaml, Children: map[string]*bintree{}},
		"alameda-datahubDM.yaml": {Func: bindataDeploymentalamedadatahubDMyaml, Children: map[string]*bintree{}},
		"alameda-evictionerDM.yaml": {Func: bindataDeploymentalamedaevictionerDMyaml, Children: map[string]*bintree{}},
		"alameda-grafanaDM.yaml": {Func: bindataDeploymentalamedagrafanaDMyaml, Children: map[string]*bintree{}},
		"alameda-influxdbDM.yaml": {Func: bindataDeploymentalamedainfluxdbDMyaml, Children: map[string]*bintree{}},
		"alameda-operatorDM.yaml": {Func: bindataDeploymentalamedaoperatorDMyaml, Children: map[string]*bintree{}},
	}},
	"PersistentVolumeClaim": {Func: nil, Children: map[string]*bintree{
		"admission-controller-log.yaml": {Func: bindataPersistentVolumeClaimadmissioncontrollerlogyaml, Children: map[string]*bintree{}},
		"alameda-ai-log.yaml": {Func: bindataPersistentVolumeClaimalamedaailogyaml, Children: map[string]*bintree{}},
		"alameda-datahub-log.yaml": {Func: bindataPersistentVolumeClaimalamedadatahublogyaml, Children: map[string]*bintree{}},
		"alameda-evictioner-log.yaml": {Func: bindataPersistentVolumeClaimalamedaevictionerlogyaml, Children: map[string]*bintree{}},
		"alameda-operator-log.yaml": {Func: bindataPersistentVolumeClaimalamedaoperatorlogyaml, Children: map[string]*bintree{}},
		"my-alamedagrafanaPVC.yaml": {Func: bindataPersistentVolumeClaimmyalamedagrafanaPVCyaml, Children: map[string]*bintree{}},
		"my-alamedainfluxdbPVC.yaml": {Func: bindataPersistentVolumeClaimmyalamedainfluxdbPVCyaml, Children: map[string]*bintree{}},
	}},
	"Secret": {Func: nil, Children: map[string]*bintree{
		"admission-controller-tls.yaml": {Func: bindataSecretadmissioncontrollertlsyaml, Children: map[string]*bintree{}},
		"alameda-influxdb.yaml": {Func: bindataSecretalamedainfluxdbyaml, Children: map[string]*bintree{}},
	}},
	"Service": {Func: nil, Children: map[string]*bintree{
		"admission-controllerSV.yaml": {Func: bindataServiceadmissioncontrollerSVyaml, Children: map[string]*bintree{}},
		"alameda-datahubSV.yaml": {Func: bindataServicealamedadatahubSVyaml, Children: map[string]*bintree{}},
		"alameda-grafanaSV.yaml": {Func: bindataServicealamedagrafanaSVyaml, Children: map[string]*bintree{}},
		"alameda-influxdbSV.yaml": {Func: bindataServicealamedainfluxdbSVyaml, Children: map[string]*bintree{}},
	}},
	"ServiceAccount": {Func: nil, Children: map[string]*bintree{
		"admission-controllerSA.yaml": {Func: bindataServiceAccountadmissioncontrollerSAyaml, Children: map[string]*bintree{}},
		"alameda-aiSA.yaml": {Func: bindataServiceAccountalamedaaiSAyaml, Children: map[string]*bintree{}},
		"alameda-datahubSA.yaml": {Func: bindataServiceAccountalamedadatahubSAyaml, Children: map[string]*bintree{}},
		"alameda-evictionerSA.yaml": {Func: bindataServiceAccountalamedaevictionerSAyaml, Children: map[string]*bintree{}},
		"alameda-grafanaSA.yaml": {Func: bindataServiceAccountalamedagrafanaSAyaml, Children: map[string]*bintree{}},
		"alameda-operatorSA.yaml": {Func: bindataServiceAccountalamedaoperatorSAyaml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
