// Code generated by go-bindata. DO NOT EDIT.
// sources:
// CustomResourceDefinition/alamedarecommendationsCRD.yaml
// CustomResourceDefinition/alamedascalersCRD.yaml
// ClusterRole/admission-controllerCR.yaml
// ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml
// ClusterRole/alameda-datahubCR.yaml
// ClusterRole/alameda-evictionerCR.yaml
// ClusterRole/alameda-grafanaCR.yaml
// ClusterRole/alameda-operatorCR.yaml
// ServiceAccount/admission-controllerSA.yaml
// ServiceAccount/alameda-aiSA.yaml
// ServiceAccount/alameda-datahubSA.yaml
// ServiceAccount/alameda-evictionerSA.yaml
// ServiceAccount/alameda-grafanaSA.yaml
// ServiceAccount/alameda-operatorSA.yaml
// ClusterRoleBinding/admission-controllerCRB.yaml
// ClusterRoleBinding/alameda-datahubCRB.yaml
// ClusterRoleBinding/alameda-evictionerCRB.yaml
// ClusterRoleBinding/alameda-grafanaCRB.yaml
// ClusterRoleBinding/alameda-operatorCRB.yaml
// Secret/admission-controller-tls.yaml
// Secret/alameda-influxdb.yaml
// ConfigMap/dashboards-config.yaml
// ConfigMap/grafana-datasources.yaml
// PersistentVolumeClaim/admission-controller-log.yaml
// PersistentVolumeClaim/alameda-ai-log.yaml
// PersistentVolumeClaim/alameda-datahub-log.yaml
// PersistentVolumeClaim/alameda-evictioner-log.yaml
// PersistentVolumeClaim/alameda-operator-log.yaml
// PersistentVolumeClaim/my-alamedagrafanaPVC.yaml
// PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml
// Service/admission-controllerSV.yaml
// Service/alameda-datahubSV.yaml
// Service/alameda-grafanaSV.yaml
// Service/alameda-influxdbSV.yaml
// Deployment/admission-controllerDM.yaml
// Deployment/alameda-aiDM.yaml
// Deployment/alameda-datahubDM.yaml
// Deployment/alameda-evictionerDM.yaml
// Deployment/alameda-grafanaDM.yaml
// Deployment/alameda-influxdbDM.yaml
// Deployment/alameda-operatorDM.yaml

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCustomResourceDefinitionAlamedarecommendationsCRDyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x3d\x8f\xdb\x30\x0c\xdd\xf5\x2b\x88\xec\x71\x6b\x74\x29\xbc\x1d" +
	"\xda\xa5\xcb\xa1\xb8\x02\xb7\x14\x1d\x18\x89\xcd\xb1\x27\x8b\x2a\x45\x07\xbd\x7f\x5f\xd8\x8a\xf3\x71\x89\x13\x4e" +
	"\xf6\x13\xf5\xde\xe3\x87\x30\xf3\x33\x69\x61\x49\x1d\x60\x66\xfa\x67\x94\xc6\xbf\xd2\xbc\x7e\x2e\x0d\xcb\x87\x5d" +
	"\xbb\x21\xc3\xd6\xbd\x72\x0a\x1d\x7c\x19\x8a\x49\xff\x44\x45\x06\xf5\xf4\x95\x7e\x73\x62\x63\x49\xae\x27\xc3\x80" +
	"\x86\x9d\x03\x88\xb8\xa1\x58\xc6\x2f\x00\x2f\xc9\x54\x62\x24\x5d\x9b\x48\x9c\x69\x3b\x58\xb5\xcd\xc7\x95\x03\x48" +
	"\xd8\x53\x07\x18\xb1\xa7\x80\x4a\x5e\xfa\x9e\x52\x40\x9b\x3c\xe0\x60\x52\x3c\x46\x4e\xdb\x66\x64\x42\x4e\xa4\xa5" +
	"\x41\x76\x25\x93\x1f\x15\xb6\x2a\x43\xee\x60\x39\xb1\x2a\xec\xdd\xd4\x22\x1e\xaa\xd8\xd3\x99\xd8\x74\x9e\xe3\xa0" +
	"\x18\x97\xec\x38\x80\xe2\x25\x53\x07\x8f\x23\x65\x46\x4f\xc1\x01\xec\x30\x72\xcd\xa8\x22\x92\x29\x3d\x7c\xff\xf6" +
	"\xfc\xe9\x87\x7f\xa1\x1e\x2b\x08\x90\x55\x32\xa9\xf1\xec\x65\x8c\x93\xee\x1f\x30\x00\x7b\x1b\x35\x8a\x29\xa7\xed" +
	"\x01\x9e\xac\xdf\x4b\x3a\x9d\xc2\x79\xa2\x6c\xfe\x90\xb7\x03\x3c\xb7\x6f\x8e\x6b\xe6\xe6\xf1\xd5\x5e\x9e\xe3\x00" +
	"\x6c\xd4\x5f\x80\xcb\x44\x35\xa6\x61\x5f\xc1\x17\xca\x39\x86\xee\x37\xee\x2a\xeb\x42\x8d\xc7\xbb\x7f\x07\x56\x0a" +
	"\x97\x57\xd7\x93\xa1\x0b\xf8\x06\x5b\x3d\x42\x55\x7c\x73\xb7\x15\xd6\x27\xbd\xbb\x3b\x0d\x43\x1b\xca\x8d\xa1\xed" +
	"\xe6\x27\xba\x6b\x31\xe6\x17\x6c\xdd\xf1\x0a\x7a\x4f\xd9\x28\x3c\xbe\x5f\xf3\xd5\xea\x6c\xa7\xa7\x5f\x2f\x29\x4c" +
	"\x0f\xb6\x74\xf0\xf3\xd7\xb8\xd0\x26\x4a\x61\xbf\x84\x13\xf8\x3f\x00\x00\xff\xff\xc3\x68\x72\x63\x12\x04\x00\x00" +
	"")

func bindataCustomResourceDefinitionAlamedarecommendationsCRDyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCustomResourceDefinitionAlamedarecommendationsCRDyaml,
		"CustomResourceDefinition/alamedarecommendationsCRD.yaml",
	)
}



func bindataCustomResourceDefinitionAlamedarecommendationsCRDyaml() (*asset, error) {
	bytes, err := bindataCustomResourceDefinitionAlamedarecommendationsCRDyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "CustomResourceDefinition/alamedarecommendationsCRD.yaml",
		size: 1042,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554175225, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCustomResourceDefinitionAlamedascalersCRDyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xc1\x8e\x23\x35\x10\xbd\xf7\x57\x94\xc2\x61\x2e\xa4\x43\xc4\x05" +
	"\xf5\x01\x69\x15\x38\x8c\x10\x2b\x34\x83\xf6\x82\x38\x54\xec\xea\xc4\x8c\x5d\x65\xec\xea\x68\xc3\xd7\x23\xbb\x93" +
	"\x4c\xba\x37\x61\x06\x69\x7d\x8a\x5f\xec\x57\xe5\xf7\xaa\xba\x30\xba\x4f\x94\xb2\x13\xee\x00\xa3\xa3\xcf\x4a\x5c" +
	"\x76\xb9\x7d\xf9\x21\xb7\x4e\x56\x87\xf5\x96\x14\xd7\xcd\x8b\x63\xdb\xc1\x66\xc8\x2a\xe1\x89\xb2\x0c\xc9\xd0\x4f" +
	"\xd4\x3b\x76\xea\x84\x9b\x40\x8a\x16\x15\x3b\x00\x80\x06\xc0\xe3\x96\x7c\xee\x9a\xb2\x35\xc2\x9a\xc4\x7b\x4a\x4b" +
	"\x15\xf1\x67\xea\x0e\x16\xeb\xf6\xbb\x45\x03\xc0\x18\xa8\x03\xf4\x18\xc8\x62\x36\xe8\x29\xe5\x16\x07\x95\xf2\xdb" +
	"\xf1\xae\x2d\x0c\xe8\xb8\xc2\xae\xc9\x91\x4c\x61\xde\x25\x19\x62\x07\xf7\x0f\x8e\xcc\xa7\x2c\xc6\x07\x7c\x18\x83" +
	"\x3c\xd7\x20\x15\x8f\x7e\x48\xe8\xe7\xe1\x1b\x80\x6c\x24\x52\x07\x1f\x0b\x45\x44\x43\xb6\x01\x38\xa0\x77\x16\xcb" +
	"\x8b\x47\x52\x89\xc4\x1f\x7e\x7b\xfc\xf4\xfd\xb3\xd9\x53\xc0\x11\x04\x88\x49\x22\x25\x75\xe7\xd8\x65\x5d\x29\x7d" +
	"\xc1\x00\x2c\x65\x93\x5c\xac\x8c\xf0\xe3\xf2\xea\x1f\x80\x87\xc2\x3c\x5e\x01\x5b\xa4\xa6\x0c\xba\x27\x38\x8c\x18" +
	"\x59\xc8\x35\x2a\x48\x0f\xba\x77\x19\x12\xc5\x44\x99\x58\x6b\x86\x13\x2e\xe9\x01\x19\x64\xfb\x17\x19\x6d\xe1\x99" +
	"\x52\x21\x81\xbc\x97\xc1\xdb\x62\xd0\x81\x92\x42\x22\x23\x3b\x76\xff\x5c\x98\x33\xa8\xd4\x90\x1e\x95\xb2\x4e\x18" +
	"\x1d\x2b\x25\x46\x5f\x34\x19\xe8\x5b\x40\xb6\x10\xf0\x08\x89\x4a\x0c\x18\xf8\x8a\xad\x1e\xc9\x2d\xfc\x2a\x89\xc0" +
	"\x71\x2f\x1d\xec\x55\x63\xee\x56\xab\x9d\xd3\x73\xa9\x19\x09\x61\x60\xa7\xc7\x55\xad\x18\xb7\x1d\x54\x52\x5e\x59" +
	"\x3a\x90\x5f\x61\x74\xcb\x9a\x27\x6b\x2d\xcf\x60\xbf\x49\xa7\x32\xcc\x0f\x57\x89\xe9\xb1\x98\x96\x35\x39\xde\x5d" +
	"\xe0\xea\xfd\x7b\x55\xff\xc5\xb1\x05\x97\x01\x4f\x2c\x63\xf6\xaf\xe2\x16\xa8\x68\xf2\xf4\xf3\xf3\xef\x70\xce\xa1" +
	"\x1a\x30\x55\xbc\x6a\xfd\x7a\x2d\xbf\xca\x5e\x64\x72\xdc\x53\x1a\x6d\xeb\x93\x84\xca\x48\x6c\xa3\x38\xd6\xba\x31" +
	"\xde\x11\x4f\x25\xcf\xc3\x36\x38\x2d\x3e\xff\x3d\x50\xd6\xe2\x4e\x0b\x1b\x64\x16\x85\x2d\xc1\x10\x2d\x2a\xd9\x16" +
	"\x1e\x19\x36\x18\xc8\x6f\x30\xd3\xd7\x16\xbd\xe8\x9b\x97\x45\xd0\xb7\x65\xbf\x7c\x14\xbe\x38\x38\x8a\x73\x81\xcf" +
	"\x1d\x7d\x5e\xb7\xfa\xa7\x2c\x33\xf9\xfc\xdc\x68\xa7\xbb\xa9\x94\x45\x8c\x5b\x4f\xf4\xd9\x0c\x7a\xf7\xda\x56\xc4" +
	"\x13\x4e\x7b\x27\x8a\x77\xe6\x38\x3f\x4f\x3c\x84\x39\xb6\x84\xac\x25\xc6\x17\xb0\x91\x10\xd1\xe8\x7b\x33\xcd\xe4" +
	"\xc9\xa8\xa4\x39\xff\xa4\x6e\x1f\x1e\x43\x94\xa4\xc8\xda\xc1\xd3\xc0\xb0\x08\xf8\x42\x8b\xd2\xb1\x89\x76\xc4\x94" +
	"\x50\x09\x8c\x58\x02\xec\x95\x12\x04\xb1\xae\x3f\x8e\xd5\x5b\xaa\xce\x79\x7a\xb8\x99\xd0\xcc\x1c\xa8\xf5\xe6\x12" +
	"\x4d\x5a\x68\x79\x49\xf2\x4d\x73\x15\x75\xc8\xef\xb1\xf7\xf4\x09\xde\x5c\xe6\xc5\xfc\xfd\xf7\x2e\x8e\xda\x44\x2f" +
	"\xc7\x40\xac\x46\xb8\x77\xbb\x1b\x47\xee\x3e\x70\xce\xf0\x7f\xef\xde\x12\x68\x14\xe9\x8a\xf3\x3f\xfe\x3b\x65\xfc" +
	"\x3e\x37\x66\xf0\xe1\x3c\xbe\x0f\x6b\xf4\x71\x8f\xeb\xe6\x55\x70\x34\x86\xa2\x92\xfd\x38\x1f\x83\x8b\xc5\x64\xf6" +
	"\xd5\xad\x11\xb6\x75\x98\xe7\x0e\xfe\xf8\xb3\x0c\x40\x95\x44\xf6\xd4\x65\x15\xfc\x37\x00\x00\xff\xff\xc9\x8e\xcc" +
	"\x94\x2e\x08\x00\x00")

func bindataCustomResourceDefinitionAlamedascalersCRDyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCustomResourceDefinitionAlamedascalersCRDyaml,
		"CustomResourceDefinition/alamedascalersCRD.yaml",
	)
}



func bindataCustomResourceDefinitionAlamedascalersCRDyaml() (*asset, error) {
	bytes, err := bindataCustomResourceDefinitionAlamedascalersCRDyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "CustomResourceDefinition/alamedascalersCRD.yaml",
		size: 2094,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556175241, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAdmissioncontrollerCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x31\x4f\xc4\x30\x0c\x85\xf7\xfe\x8a\xe8\xf6\x16\xb1\xa1\xae\x0c" +
	"\xec\x0c\xec\x6e\xe2\xb6\x56\xd3\x38\xb2\x9d\x43\xf0\xeb\x51\x7b\xa8\xed\x40\xc5\x21\x32\xe5\x49\x7e\xf9\xde\x8b" +
	"\x21\xd3\x1b\x8a\x12\xa7\xd6\x49\x07\xbe\x81\x62\x23\x0b\x7d\x82\x11\xa7\x66\x7a\xd2\x86\xf8\xe1\xfa\x58\x4d\x94" +
	"\x42\xeb\x9e\x63\x51\x43\x79\xe5\x88\xd5\x8c\x06\x01\x0c\xda\xca\xb9\x04\x33\xb6\xae\xc7\x80\x02\xc6\x02\x54\x43" +
	"\x98\x49\x97\x77\x6b\xcf\xc9\x84\x63\x44\xa9\xa4\x44\xd4\x65\xbe\x76\x90\xe9\x45\xb8\xe4\x55\x2e\xa7\x76\x97\xcd" +
	"\x23\x38\x90\x9a\x1c\x33\x5c\xd6\x31\x41\xe5\x22\x1e\x0f\xae\xb9\x18\x18\xa5\xe1\x1d\xbb\x91\x79\xf2\x9c\x7a\x1a" +
	"\xca\xcd\xab\xeb\xd4\x15\xa5\x3b\x18\x06\xb4\xed\xee\x05\xc1\x70\x93\x25\x87\xa3\x0c\x18\x71\x95\x3f\xc7\x3d\x8d" +
	"\x94\x39\xfc\x4a\x8e\xa4\xbb\xc8\x60\x7e\x3c\xe3\x40\xce\x7a\x46\x12\xcc\x91\x3c\x28\x9a\x1e\x52\xe7\xc8\x1f\x33" +
	"\x26\xbb\x37\xc4\x1f\xeb\x7d\x43\x97\x0f\xde\x77\xfb\x2f\xd6\x52\xb1\xe1\x8c\x49\x47\xea\xad\x21\x3e\x43\xef\xdd" +
	"\x6e\x7b\xbe\x8b\xfa\x15\x00\x00\xff\xff\x98\xf6\x4d\xde\xe4\x02\x00\x00")

func bindataClusterRoleAdmissioncontrollerCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAdmissioncontrollerCRyaml,
		"ClusterRole/admission-controllerCR.yaml",
	)
}



func bindataClusterRoleAdmissioncontrollerCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAdmissioncontrollerCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/admission-controllerCR.yaml",
		size: 740,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556175236, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAggregatealamedaadmineditalamedaCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x4f\xbd\x4e\xf4\x30\x10\xec\xfd\x14\xab\xeb\x93\x4f\x5f\x87\xdc\x52" +
	"\xd0\x53\xd0\xef\xd9\xa3\xdc\xea\x6c\x6f\xb4\x5e\x1f\x12\x4f\x8f\x2e\x21\xd0\x81\x90\xa8\x3c\xf2\xce\x2f\xaf\xf2" +
	"\x02\xeb\xa2\x2d\x92\x9d\x39\xcd\x3c\xfc\xa2\x26\x6f\xec\xa2\x6d\xbe\x3e\xf4\x59\xf4\xdf\xed\x7f\xb8\x4a\xcb\x91" +
	"\x1e\xcb\xe8\x0e\x7b\xd6\x82\x50\xe1\x9c\xd9\x39\x06\xa2\xc6\x15\x91\x78\x59\x0c\x0b\x3b\x26\x2e\x5c\x91\x79\xe2" +
	"\x5c\xa5\x4d\xc8\xe2\xc7\x57\x20\x2a\x7c\x46\xe9\x77\x19\x7d\x93\xf9\x65\xe6\xba\xfb\x44\x3a\xb9\x0d\x9c\x7e\x23" +
	"\xbc\x47\x7f\xea\x6c\x14\xf4\x18\x26\xe2\x55\x9e\x4c\xc7\xba\x95\x98\x88\x87\x6b\x4f\x5c\xa4\x2d\x73\xd2\xe6\x2c" +
	"\x0d\xd6\x67\x96\x40\x64\xe8\x3a\x2c\xe1\xa0\xee\x2b\xee\x6c\x58\x0f\x44\x37\xd8\xf9\xe3\xb6\xc0\xb7\xb7\x48\xdf" +
	"\x41\x32\xb0\x63\x83\x63\xcd\x07\xcc\x28\x70\xfc\x45\x0b\x43\xd2\x5a\xd1\xf2\xb6\xff\xa7\x36\xaf\xec\xe9\xf2\x1e" +
	"\x00\x00\xff\xff\x36\x9a\x6e\xc2\xf0\x01\x00\x00")

func bindataClusterRoleAggregatealamedaadmineditalamedaCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAggregatealamedaadmineditalamedaCRyaml,
		"ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml",
	)
}



func bindataClusterRoleAggregatealamedaadmineditalamedaCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAggregatealamedaadmineditalamedaCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml",
		size: 496,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555385827, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAlamedadatahubCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x31\x4f\xc3\x40\x0c\x85\xf7\xfb\x15\x56\x99\x13\xc4\x86\xb2\x32" +
	"\xb0\x22\x06\x76\x37\xf7\xda\x58\xcd\x9d\x0f\xdb\x57\x09\x7e\x3d\x6a\xaa\x16\x75\xb2\xf4\xfc\xf4\x7d\xb2\xb9\xc9" +
	"\x17\xcc\x45\xeb\x44\xb6\xe7\x79\xe4\x1e\x8b\x9a\xfc\x72\x88\xd6\xf1\xf4\xea\xa3\xe8\xf3\xf9\x25\x9d\xa4\xe6\x89" +
	"\xde\xd6\xee\x01\xfb\xd4\x15\xa9\x20\x38\x73\xf0\x94\x88\x2a\x17\x4c\x74\x40\x86\x71\xa8\xb1\x0c\xbc\x72\x41\xe6" +
	"\xe1\xd2\x58\xfa\x3e\x59\x5f\xe1\x53\x7a\xa2\x0f\x58\x11\xbf\x18\xe9\xa0\x46\xdf\x1d\xf6\x43\xcd\xb4\x20\x16\x74" +
	"\xa7\x5e\x33\x6c\x03\x7a\xe3\x19\xa4\x0d\xd5\x17\x39\xc4\x50\xb4\x4a\xa8\x49\x3d\x52\x1a\x88\x9b\xbc\x9b\xf6\xe6" +
	"\x13\x25\xa2\x81\x76\xbb\x44\x64\x70\xed\x36\xe3\x16\xde\x31\x9e\x88\xce\xb0\xfd\x6d\x71\x44\x3c\x30\xb6\x90\x7b" +
	"\xa8\xcf\xbc\x4a\x3d\x8e\xb3\xd6\x60\xa9\x30\x1f\x59\x1e\xc8\xd7\xea\xf5\x3c\xc3\xac\xa5\xa0\xe6\xed\x5d\xff\x92" +
	"\xbb\xe3\x32\x7b\xcb\x1c\xf8\x0b\x00\x00\xff\xff\x44\xa5\x3d\x5d\x6a\x01\x00\x00")

func bindataClusterRoleAlamedadatahubCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAlamedadatahubCRyaml,
		"ClusterRole/alameda-datahubCR.yaml",
	)
}



func bindataClusterRoleAlamedadatahubCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAlamedadatahubCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-datahubCR.yaml",
		size: 362,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555659065, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAlamedaevictionerCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x31\x6b\x03\x31\x0c\x46\x77\xff\x0a\x91\xfd\xae\x74\x2b\x5e\x3b" +
	"\x74\xef\xd0\x5d\xb1\xbf\xa6\x22\xb6\x75\x48\x72\x86\xfe\xfa\x72\xe1\x86\xc2\x4d\x82\x87\xf4\x78\xe2\x4d\xbe\x60" +
	"\x2e\x3a\x32\xd9\x95\xcb\xca\x33\x7e\xd4\xe4\x97\x43\x74\xac\xf7\x37\x5f\x45\x5f\x1e\xaf\xe9\x2e\xa3\x66\x7a\x6f" +
	"\xd3\x03\xf6\xa9\x0d\xa9\x23\xb8\x72\x70\x4e\x44\x83\x3b\x32\x7d\xa3\xc2\x38\xd4\x58\x16\x6e\xdc\x51\x79\xc1\x43" +
	"\xca\xae\x82\x25\x9b\x0d\x9e\xd3\x42\xbc\xc9\x87\xe9\xdc\x7c\x3f\x5d\xe8\x72\x49\x44\x06\xd7\x69\x05\x07\xdb\xb4" +
	"\x7a\x22\x7a\xc0\xae\x07\xb9\x21\x9e\xb3\xa2\x21\x70\xb6\xf0\x0c\xf5\xc2\x4d\xc6\x6d\x2d\x3a\x82\x65\xc0\x7c\x65" +
	"\x39\xcb\x8f\xb6\x7d\x1b\xe6\xff\x91\xa1\x68\xef\x18\xf5\xf9\xfe\xb9\xe0\x2f\x00\x00\xff\xff\x1e\xb7\xab\xd4\x2f" +
	"\x01\x00\x00")

func bindataClusterRoleAlamedaevictionerCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAlamedaevictionerCRyaml,
		"ClusterRole/alameda-evictionerCR.yaml",
	)
}



func bindataClusterRoleAlamedaevictionerCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAlamedaevictionerCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-evictionerCR.yaml",
		size: 303,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556071759, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAlamedagrafanaCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xa1\x6e\xc5\x30\x0c\x46\x61\xee\xa7\xb0\x2e\x4f\xa7\xb1\x29\x74" +
	"\x60\x7c\x60\xfc\xbf\x8d\xdb\x59\x4d\xe3\xc8\x4e\x0a\xf6\xf4\xd3\x05\xa5\xe7\x48\x1f\xba\xfe\x88\x87\x5a\xcb\xec" +
	"\x4f\xac\x0b\xe6\xf8\x35\xd7\x3f\x0c\xb5\xb6\x1c\x1f\xb1\xa8\xbd\x5d\xef\x74\x68\x2b\x99\x3f\xeb\x8c\x21\xfe\x6d" +
	"\x55\xe8\x94\x81\x82\x81\x4c\xcc\x0d\xa7\x64\xde\xa4\x88\x63\x98\x43\x13\x2a\x4e\x29\x48\xbb\x63\x43\x03\xf9\xac" +
	"\x12\x99\x12\xa3\xeb\x97\xdb\xec\x91\x99\x98\x13\x3f\x1e\xc4\xec\x12\x36\x7d\x95\x3b\xbe\xbc\xe8\x58\x25\x88\xf9" +
	"\x12\x7f\xde\x63\x97\xf1\x1f\x00\x00\xff\xff\x37\xd4\xd9\xbf\xb3\x00\x00\x00")

func bindataClusterRoleAlamedagrafanaCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAlamedagrafanaCRyaml,
		"ClusterRole/alameda-grafanaCR.yaml",
	)
}



func bindataClusterRoleAlamedagrafanaCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAlamedagrafanaCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-grafanaCR.yaml",
		size: 179,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556071759, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAlamedaoperatorCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\xbb\x92\xdb\x30\x0c\xec\xf5\x15\x9c\x4b\x6d\xdd\xa4\xcb\xb8\x4d" +
	"\x91\x36\x93\x22\x3d\x4c\xae\x64\x8c\x29\x82\x01\x41\x5f\xee\xbe\x3e\xa3\xc7\xc9\x4e\xe4\x24\x37\x2e\xae\xf2\x0e" +
	"\x68\x72\x17\xd8\x85\x28\xf3\x77\x68\x61\x49\x7b\xa7\x07\xf2\x2d\x55\x3b\x8a\xf2\x0b\x19\x4b\x6a\x4f\x9f\x4a\xcb" +
	"\xf2\x78\xfe\xd8\x9c\x38\x85\xbd\xfb\x1c\x6b\x31\xe8\x37\x89\x68\x06\x18\x05\x32\xda\x37\xce\x25\x1a\xb0\x77\x1d" +
	"\x02\x94\x4c\x94\x78\x47\x91\x06\x04\xda\x49\x9e\x4b\x8d\xd6\x88\xb2\x6f\x76\x8e\x32\x7f\x51\xa9\xb9\x8c\x17\x77" +
	"\xee\xe1\xa1\x71\x4e\x51\xa4\xaa\xc7\x52\x4b\x12\x50\x26\x94\x25\xcc\x40\x91\x23\xfb\x49\x95\x97\x64\x2a\x31\x42" +
	"\xc7\xa3\x33\xf4\xb0\x5c\xeb\x61\xd3\x6f\xe4\x32\x83\x27\x32\x7f\xdc\x52\x52\xce\x65\x4b\xba\x30\x14\xd8\xcc\x18" +
	"\x90\xa3\x3c\x0f\x48\xf6\x36\x9a\x11\x79\x05\x19\x26\x58\x73\x78\x85\x79\x3d\x0f\x88\x30\xdc\x56\xd4\x4a\x46\x2a" +
	"\x47\xee\xac\x65\xd9\xca\xbb\xc8\xf1\x92\x3a\xee\xef\xed\xbd\x9a\x14\x4f\x91\x53\xdf\x8e\x83\x24\x4e\xd0\xd2\x12" +
	"\x6f\x19\x17\x0b\xc7\x7f\xcf\xa3\x5e\x4b\x0a\x2f\xc3\x80\x14\x26\x3f\xde\x61\x3c\xf7\x8a\x7e\xec\x38\x51\xe4\x97" +
	"\x4d\x54\x16\xfa\x0f\xee\x2b\x74\xe0\x32\x2e\x80\xeb\x44\xdd\x8f\x0a\x7d\x76\x59\x65\x80\x1d\x51\x8b\xab\x29\x40" +
	"\xa7\x7c\x97\x4c\x1e\x6e\x35\x69\x37\x48\x62\x13\xe5\xd4\xbb\xdf\x14\xbb\x5b\xb1\x9e\x8b\xeb\x33\x17\x35\x6e\x9d" +
	"\xd9\x8d\x50\x30\x7e\x1a\xd2\x28\xae\x2c\xab\xb8\x6d\xd8\xd7\x62\x32\xbc\x16\x03\x3a\x4e\xfc\x0f\x57\xb6\x16\xbc" +
	"\x69\x23\x0b\xbc\xe2\xcf\x45\xb8\x7a\xeb\xe2\xf1\x64\xfb\xb6\x97\xb0\x4c\x59\xd1\x73\x31\xbd\xfe\xbc\x6c\xd9\xce" +
	"\x14\x79\xcc\x56\xea\x9f\x70\x38\x8a\x9c\xe6\xc8\x57\xbd\x95\xb7\xff\xc5\x6b\xcd\xe1\xdf\xd2\x75\xbb\x5f\x3d\xf3" +
	"\xb5\x4f\x77\x51\xfd\x0a\x00\x00\xff\xff\x62\xfe\x79\x2f\x5e\x05\x00\x00")

func bindataClusterRoleAlamedaoperatorCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAlamedaoperatorCRyaml,
		"ClusterRole/alameda-operatorCR.yaml",
	)
}



func bindataClusterRoleAlamedaoperatorCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAlamedaoperatorCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-operatorCR.yaml",
		size: 1374,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556175236, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAdmissioncontrollerSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\xaa\x42\x41\x0c\x05\xd0\x7e\x56\x91\x0d\xfc\xe2\xb7\xe9\x5c" +
	"\x83\x60\x7f\xc9\x5c\x21\xf8\x26\x79\x64\xe2\x5b\xbf\x08\xd6\x87\x83\xd3\x1f\xac\xed\x19\x2a\xd7\xff\x78\x79\x4c" +
	"\x95\x3b\xeb\x72\xe3\xcd\x2c\xdf\xd1\x63\xb1\x31\xd1\xd0\x21\x12\x58\x54\xc1\x5c\xbe\xbf\xe9\xcf\x32\xba\xf2\x38" +
	"\x58\x3f\xdc\x27\x8c\x2a\x4f\x4e\x16\x3a\x0b\xfe\x09\x00\x00\xff\xff\x7e\x31\x7e\x77\x63\x00\x00\x00")

func bindataServiceAccountAdmissioncontrollerSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAdmissioncontrollerSAyaml,
		"ServiceAccount/admission-controllerSA.yaml",
	)
}



func bindataServiceAccountAdmissioncontrollerSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAdmissioncontrollerSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/admission-controllerSA.yaml",
		size: 99,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554175225, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAlamedaaiSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc8\x31\x0e\x02\x41\x08\x05\xd0\x7e\x4e\xc1\x05\x2c\x6c\xe9\x3c\x83" +
	"\x89\xfd\x0f\x7c\x13\xa2\xc3\x6c\x58\x9c\xf3\xdb\x6c\xfb\x70\xc4\x8b\x75\xc6\x4a\x95\x7d\x1f\x9f\x48\x57\x79\xb2" +
	"\x76\x18\x1f\x66\xeb\x97\x3d\x26\x1b\x8e\x86\x0e\x91\xc4\xa4\x0a\xbe\x98\x74\xdc\x10\x17\x9d\x07\x8c\x2a\x6f\x3a" +
	"\x0b\xbd\x0a\xf1\x0f\x00\x00\xff\xff\xaa\xc4\x7e\xde\x59\x00\x00\x00")

func bindataServiceAccountAlamedaaiSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAlamedaaiSAyaml,
		"ServiceAccount/alameda-aiSA.yaml",
	)
}



func bindataServiceAccountAlamedaaiSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAlamedaaiSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-aiSA.yaml",
		size: 89,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554261951, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAlamedadatahubSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc8\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x78\x01\x0a\x5a\x77\xcc\x80" +
	"\x44\xff\x89\x3f\xc2\x82\x38\x27\x9f\x2f\xf3\x23\xa4\x6b\x1f\x36\x7f\x30\x77\x9f\xa1\xb2\xae\xed\xe3\x61\x2a\x77" +
	"\xe6\xf2\xce\x5b\xef\xf3\x88\x6a\x83\x05\x43\x41\x9b\x48\x60\x50\x05\x5f\x0c\x1a\x2e\x7f\x7d\x1f\xcf\xd3\xf7\x0d" +
	"\x9d\x2a\x2f\x1a\x13\x35\x13\xfe\x0b\x00\x00\xff\xff\x06\xa1\x23\x4a\x5e\x00\x00\x00")

func bindataServiceAccountAlamedadatahubSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAlamedadatahubSAyaml,
		"ServiceAccount/alameda-datahubSA.yaml",
	)
}



func bindataServiceAccountAlamedadatahubSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAlamedadatahubSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-datahubSA.yaml",
		size: 94,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554175225, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAlamedaevictionerSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\x31\x0e\x02\x41\x08\x05\xd0\x7e\x4e\xc1\x05\x2c\x6c\xe9\x3c\x83" +
	"\x89\xfd\x0f\xf3\x4d\x88\x0e\x6c\x58\x9c\xf3\xdb\x6c\xfd\x70\xf8\x8b\x75\x7a\x86\xca\xbe\x8f\x8f\xc7\x54\x79\xb2" +
	"\xb6\x1b\x1f\x66\xf9\x8b\x1e\x8b\x8d\x89\x86\x0e\x91\xc0\xa2\x0a\xbe\x58\x9c\xb8\x71\xbb\xb5\x67\xb0\x2e\x3a\x0f" +
	"\x18\x55\xde\x9c\x2c\x74\x16\xfc\x1f\x00\x00\xff\xff\x58\x7c\x98\x9a\x61\x00\x00\x00")

func bindataServiceAccountAlamedaevictionerSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAlamedaevictionerSAyaml,
		"ServiceAccount/alameda-evictionerSA.yaml",
	)
}



func bindataServiceAccountAlamedaevictionerSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAlamedaevictionerSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-evictionerSA.yaml",
		size: 97,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554175225, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAlamedagrafanaSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc8\xb1\x0d\xc2\x40\x0c\x05\xd0\xfe\xa6\xf0\x02\x14\xb4\xee\x98\x01" +
	"\x89\xfe\xcb\xfe\x41\x16\x9c\x2f\x72\x4c\xe6\xa7\x49\xfb\xb0\xc7\x8b\x75\xc4\x4a\x95\xf3\x3e\x3e\x91\xae\xf2\x64" +
	"\x9d\x61\x7c\x98\xad\x5f\xf6\x98\x6c\x38\x1a\x3a\x44\x12\x93\x2a\xf8\x62\xd2\x71\x7b\x17\x36\x24\x2e\x3f\x76\x18" +
	"\x55\x36\x3a\x0b\xbd\x0a\xf1\x0f\x00\x00\xff\xff\x5c\xef\x2c\xe0\x5e\x00\x00\x00")

func bindataServiceAccountAlamedagrafanaSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAlamedagrafanaSAyaml,
		"ServiceAccount/alameda-grafanaSA.yaml",
	)
}



func bindataServiceAccountAlamedagrafanaSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAlamedagrafanaSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-grafanaSA.yaml",
		size: 94,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556071759, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAlamedaoperatorSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\x31\x0e\x02\x41\x08\x05\xd0\x7e\x4e\xc1\x05\x2c\x6c\xe9\x3c\x83" +
	"\x89\xfd\xcf\xf0\x4d\x88\x0e\x4c\x58\xdc\xf3\x5b\x68\xfb\x1e\xb6\x3f\x58\x87\x67\xa8\x9c\xd7\xf1\xf2\x30\x95\x3b" +
	"\xeb\xf4\xc9\xdb\x9c\xf9\x89\x1e\x8b\x0d\x43\x43\x87\x48\x60\x51\x05\x6f\x2c\x1a\x2e\xb9\x59\xe8\xac\x7f\x1c\x1b" +
	"\x93\x2a\x4f\xda\x8f\xe1\xdf\x00\x00\x00\xff\xff\x01\x08\xdb\x27\x5f\x00\x00\x00")

func bindataServiceAccountAlamedaoperatorSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAlamedaoperatorSAyaml,
		"ServiceAccount/alameda-operatorSA.yaml",
	)
}



func bindataServiceAccountAlamedaoperatorSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAlamedaoperatorSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-operatorSA.yaml",
		size: 95,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554175225, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingAdmissioncontrollerCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xb1\x4e\xc4\x30\x0c\xc6\xf1\x3d\x4f\xe1\x17\x68\x11\x1b\xca\x06" +
	"\x0c\xec\x45\x62\x77\x13\x17\x4c\x53\x3b\x72\x9c\x0e\x3c\x3d\xaa\x44\x07\x74\xa7\xd3\xcd\x9f\xbe\xff\x0f\x2b\x7f" +
	"\x90\x35\x56\x89\x60\x33\xa6\x11\xbb\x7f\xa9\xf1\x0f\x3a\xab\x8c\xeb\x53\x1b\x59\x1f\xf6\xc7\xb0\xb2\xe4\x08\xaf" +
	"\xa5\x37\x27\x9b\xb4\xd0\x0b\x4b\x66\xf9\x0c\x1b\x39\x66\x74\x8c\x01\x40\x70\xa3\x08\x0b\x65\x32\x74\x35\xe4\x01" +
	"\xf3\xc6\xed\xc8\x0f\x49\xc5\x4d\x4b\x21\x0b\xa6\x85\x26\x5a\x8e\x07\x56\x7e\x33\xed\xf5\x86\x1e\x00\x2e\xf0\xfb" +
	"\xad\xd6\xe7\x6f\x4a\xde\x0e\x6c\xf8\x0b\xbd\x93\xed\x9c\xe8\x39\x25\xed\xe2\x01\xe0\xac\x5d\x2d\x9c\x73\xab\x98" +
	"\xfe\x8b\xbf\x01\x00\x00\xff\xff\x96\x62\xb4\x2f\x3d\x01\x00\x00")

func bindataClusterRoleBindingAdmissioncontrollerCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingAdmissioncontrollerCRByaml,
		"ClusterRoleBinding/admission-controllerCRB.yaml",
	)
}



func bindataClusterRoleBindingAdmissioncontrollerCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingAdmissioncontrollerCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/admission-controllerCRB.yaml",
		size: 317,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554258873, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingAlamedadatahubCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x31\xae\xc2\x30\x0c\xc6\xf1\x3d\xa7\xc8\x05\xda\xa7\xb7\xa1\x6c" +
	"\xc0\xc0\x5e\x24\x76\x37\x71\xa9\x69\x1a\x47\x8e\xd3\x81\xd3\xa3\x0a\x84\x04\x48\x88\xd5\xfa\xfc\xff\x41\xa6\x13" +
	"\x4a\x21\x4e\xce\x4a\x0f\xbe\x85\xaa\x23\x0b\x5d\x41\x89\x53\x3b\x6d\x4a\x4b\xfc\xb7\xfc\x9b\x89\x52\x70\x76\x1f" +
	"\x6b\x51\x94\x8e\x23\xee\x28\x05\x4a\x67\x33\xa3\x42\x00\x05\x67\xac\x4d\x30\xa3\xb3\x03\x06\x14\x50\x16\xa0\x06" +
	"\x22\xcc\x18\xa0\x59\x17\x63\xed\x8d\x70\xc4\x0e\x87\x75\x0c\x99\x0e\xc2\x35\x7f\x81\x8d\xb5\x1f\xee\x4f\x4c\xa9" +
	"\xfd\x05\xbd\x16\x67\x9a\x47\xe1\x88\xb2\x90\xc7\xad\xf7\x5c\x93\x3e\x23\xef\x8f\xf7\x7b\xc9\xe0\x5f\x85\x5b\x00" +
	"\x00\x00\xff\xff\xc4\x91\x85\x3b\x28\x01\x00\x00")

func bindataClusterRoleBindingAlamedadatahubCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingAlamedadatahubCRByaml,
		"ClusterRoleBinding/alameda-datahubCRB.yaml",
	)
}



func bindataClusterRoleBindingAlamedadatahubCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingAlamedadatahubCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-datahubCRB.yaml",
		size: 296,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554175225, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingAlamedaevictionerCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x31\x0e\xc2\x30\x0c\x85\xe1\x3d\xa7\xc8\x05\x5a\xc4\x86\xb2\x01" +
	"\x03\x7b\x91\xd8\xdd\xc4\x05\xd3\x34\x8e\x1c\xa7\x03\xa7\x47\x15\x08\x09\x81\x10\xb3\xfd\xfe\x0f\x32\x9d\x50\x0a" +
	"\x71\x72\x56\x7a\xf0\x2d\x54\xbd\xb0\xd0\x0d\x94\x38\xb5\xe3\xa6\xb4\xc4\xab\x79\x6d\x46\x4a\xc1\xd9\x7d\xac\x45" +
	"\x51\x3a\x8e\xb8\xa3\x14\x28\x9d\xcd\x84\x0a\x01\x14\x9c\xb1\x36\xc1\x84\xce\x0e\x18\x50\x40\x59\x80\x1a\x88\x30" +
	"\x61\x80\x06\x67\xf2\x4b\x11\xc5\x08\x47\xec\x70\x58\xfe\x21\xd3\x41\xb8\xe6\x1f\xb6\xb1\xf6\x83\xfe\x57\x2a\xb5" +
	"\xbf\xa2\xd7\xe2\x4c\xf3\x8c\x1c\x51\x66\xf2\xb8\xf5\x9e\x6b\xd2\x57\xe7\xcb\xf6\x71\x2a\x19\xfc\xbb\x73\x0f\x00" +
	"\x00\xff\xff\x2e\xae\x54\xf5\x31\x01\x00\x00")

func bindataClusterRoleBindingAlamedaevictionerCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingAlamedaevictionerCRByaml,
		"ClusterRoleBinding/alameda-evictionerCRB.yaml",
	)
}



func bindataClusterRoleBindingAlamedaevictionerCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingAlamedaevictionerCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-evictionerCRB.yaml",
		size: 305,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554175225, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingAlamedagrafanaCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x31\x4e\xc6\x30\x0c\xc5\xf1\x3d\xa7\xc8\x05\x5a\xc4\x86\xb2\x01" +
	"\x03\xfb\x87\xc4\xfe\x9a\xb8\xc5\x34\xb5\x23\xc7\xe9\xc0\xe9\x11\x02\x21\x01\x12\x62\xb5\xfc\xfe\x3f\x34\x7e\x22" +
	"\xeb\xac\x92\xa2\x2d\xc8\x33\x86\x3f\xab\xf1\x2b\x9c\x55\xe6\xfd\xa6\xcf\xac\x57\xe7\x75\xd8\x59\x4a\x8a\xf7\x75" +
	"\x74\x27\xbb\x68\xa5\x3b\x96\xc2\xb2\x85\x83\x1c\x05\x8e\x14\x62\x14\x1c\x94\xe2\x4a\x85\x0c\xae\x06\x9e\x50\x71" +
	"\x50\xc1\xb4\x19\x56\x08\x82\x69\xa5\x0b\xad\xef\xcf\x68\xfc\x60\x3a\xda\x1f\x70\x88\xf1\x97\xfb\x2f\xa6\x8f\xe5" +
	"\x85\xb2\xf7\x14\xa6\xcf\xc2\x23\xd9\xc9\x99\x6e\x73\xd6\x21\xfe\x15\xf9\x39\xfc\xb8\xf7\x86\xfc\x5d\x78\x0b\x00" +
	"\x00\xff\xff\x75\x1b\xd8\xd0\x28\x01\x00\x00")

func bindataClusterRoleBindingAlamedagrafanaCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingAlamedagrafanaCRByaml,
		"ClusterRoleBinding/alameda-grafanaCRB.yaml",
	)
}



func bindataClusterRoleBindingAlamedagrafanaCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingAlamedagrafanaCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-grafanaCRB.yaml",
		size: 296,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556071759, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingAlamedaoperatorCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xbd\x0a\xc2\x30\x10\xc0\xf1\x3d\x4f\x91\x17\x68\xc5\x4d\xb2\xa9" +
	"\x83\x7b\x05\xf7\x6b\x72\xd5\xb3\x69\x2e\x5c\x2e\x1d\x7c\x7a\x91\x8a\x20\x05\x71\xbd\x8f\xff\x0f\x32\x5d\x50\x0a" +
	"\x71\x72\x56\x7a\xf0\x2d\x54\xbd\xb1\xd0\x03\x94\x38\xb5\xe3\xae\xb4\xc4\x9b\x79\x6b\x46\x4a\xc1\xd9\x63\xac\x45" +
	"\x51\x3a\x8e\x78\xa0\x14\x28\x5d\xcd\x84\x0a\x01\x14\x9c\xb1\x36\xc1\x84\xce\x0e\x18\x50\x40\x59\x80\x1a\x88\x30" +
	"\x61\x80\x86\xf3\x32\x32\xc2\x11\x3b\x1c\x5e\xd7\x90\xe9\x24\x5c\xf3\x0f\xd9\x58\xbb\x82\xff\x73\x4a\xed\xef\xe8" +
	"\xb5\x38\xd3\xbc\x13\x67\x94\x99\x3c\xee\xbd\xe7\x9a\xf4\x53\x59\x7d\x2e\x8b\x92\xc1\x7f\x1b\xcf\x00\x00\x00\xff" +
	"\xff\xa8\xcd\x05\x0d\x2b\x01\x00\x00")

func bindataClusterRoleBindingAlamedaoperatorCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingAlamedaoperatorCRByaml,
		"ClusterRoleBinding/alameda-operatorCRB.yaml",
	)
}



func bindataClusterRoleBindingAlamedaoperatorCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingAlamedaoperatorCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-operatorCRB.yaml",
		size: 299,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554175225, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSecretAdmissioncontrollertlsyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x3d\x0a\x82\x41\x0c\x04\xd0\x3e\xa7\xc8\x05\xbe\xc2\x36\x97\xb0" +
	"\x10\xec\x87\xdd\x11\x82\xfb\x67\x36\x0a\xde\x5e\x44\xfb\xf7\x04\xcb\xaf\x8c\xed\x73\x98\xbe\x4e\x72\xf7\x51\x4d" +
	"\x2f\x2c\xc1\x94\xce\x44\x45\xc2\x44\x75\xa0\xd3\x14\xb5\xfb\xfe\xe2\xa3\xcc\x91\x31\x5b\x63\x1c\xd9\xf6\x1f\xec" +
	"\x85\x42\xd3\x1b\x2b\x03\x39\x03\x2e\xbf\x9f\xef\x45\xd3\xf3\xc2\xe3\xc9\x4f\x00\x00\x00\xff\xff\xc0\x89\x2c\x4b" +
	"\x73\x00\x00\x00")

func bindataSecretAdmissioncontrollertlsyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSecretAdmissioncontrollertlsyaml,
		"Secret/admission-controller-tls.yaml",
	)
}



func bindataSecretAdmissioncontrollertlsyaml() (*asset, error) {
	bytes, err := bindataSecretAdmissioncontrollertlsyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Secret/admission-controller-tls.yaml",
		size: 115,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556071759, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSecretAlamedainfluxdbyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\xa7\xf0\x05\x3a\xb0\xfa\x12\x0c" +
	"\x48\xec\x9f\xfa\x57\xb2\x48\xd2\xe0\xb8\x08\x6e\xcf\x40\xe7\xa7\x87\xe1\x77\xc6\xf4\xbd\xab\xbc\x2f\xe5\xe9\xdd" +
	"\x54\x6e\x5c\x83\x59\x1a\x13\x86\x84\x16\x91\x8e\x46\x15\x54\x34\x1a\x16\xef\x5b\x3d\x3e\xf6\x58\xb2\xce\x13\xe7" +
	"\xc0\x4a\x95\x8d\xc6\x40\xee\x01\x2f\xff\x9b\xdf\x41\x95\xeb\xc0\xeb\xe0\x2f\x00\x00\xff\xff\x82\xf8\x7a\xe9\x6e" +
	"\x00\x00\x00")

func bindataSecretAlamedainfluxdbyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSecretAlamedainfluxdbyaml,
		"Secret/alameda-influxdb.yaml",
	)
}



func bindataSecretAlamedainfluxdbyaml() (*asset, error) {
	bytes, err := bindataSecretAlamedainfluxdbyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Secret/alameda-influxdb.yaml",
		size: 110,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556071759, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataConfigMapDashboardsconfigyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x7d\xfd\x73\xdb\x36\xd2\xff\xef\xfe\x2b\xf0\x65\xfb\xbd\xda\x39\xc9" +
	"\x91\x64\xcb\x2f\x9a\xf1\xcd\x38\x4e\xd3\x66\xa6\x49\xfd\x24\xce\xdd\xf4\xa2\x3c\x1a\x98\x84\x24\xd4\x24\xc1\x03" +
	"\x20\xc7\x4e\xea\xfb\xdb\x9f\x01\xf8\x0e\x82\x14\xf5\x6a\xc9\x86\x67\xda\xd8\xc4\x0b\x09\xec\x62\xf1\xc1\xee\x62" +
	"\x17\x06\xf8\x9f\x88\x32\x4c\xfc\x1e\xb8\x6d\xef\xdc\x60\xdf\xe9\x81\x0b\xe2\x0f\xf1\xe8\x1d\x0c\x76\x3c\xc4\xa1" +
	"\x03\x39\xec\xed\x00\xe0\x43\x0f\xf5\x80\x03\xd9\xf8\x9a\x40\xea\xb0\xa6\x2d\xab\x45\x25\x2c\x80\x36\xea\x81\x21" +
	"\x72\x10\x85\x9c\x50\x88\x77\x64\x43\x00\x76\x00\xb0\xdd\x09\xe3\x88\x8e\x11\x74\xf9\x78\xff\x4f\x26\xde\xf6\x57" +
	"\x73\x07\x00\x00\xbe\xcb\xff\x03\x60\x41\xdf\x27\x1c\x72\x4c\x7c\x66\xf5\x92\xc7\x00\x58\x2e\x66\xdc\xea\x81\xcf" +
	"\xc9\x13\x90\x29\x95\x35\xae\x27\xd8\xe5\x6f\x7d\xab\x07\xda\x8d\x7c\x89\xf8\x04\x46\x26\xd4\x46\x56\x0f\x58\xcd" +
	"\x26\xf8\x85\xc2\x21\xf4\x21\x68\x36\x2d\xa5\x2a\xf2\xe1\xb5\x2b\xaa\x71\x3a\x41\x4a\xd9\x18\x3b\x25\x25\xd8\x26" +
	"\xfe\x05\x71\x09\x15\xfd\xd3\xd1\x35\xdc\x6d\x35\x40\xa7\xdd\x6e\x80\x4e\xb7\xdb\x00\xed\x3d\xf5\x35\x62\xae\x44" +
	"\xdd\xf3\x74\xb8\xe0\x6f\xe0\xdc\x45\x94\x33\xb5\x2e\xbf\x0f\x64\xdd\x64\xce\xad\x4c\xf9\x43\xf2\xfb\x97\xe8\xb7" +
	"\x87\xb8\xb9\x85\x1c\xcc\x35\xa3\xb1\x46\x3e\xe2\x6f\x1d\xab\x07\xfc\x89\xeb\xa6\x4f\x29\x0c\xc6\x57\x84\xb8\x1c" +
	"\x07\x56\x0f\xb4\x92\x02\xec\x64\xa7\xd4\x72\xb1\x7f\x23\x68\xf3\xf9\x4b\xf2\x28\x80\x3e\x72\x59\x8e\x3a\x59\xda" +
	"\x58\x36\x71\x5d\x18\x30\x24\x3a\x1a\x42\x97\xe5\xa6\xcf\x1a\x51\xec\x5c\x92\x3c\xb9\xc3\xf9\xd6\x90\xf2\xab\xd5" +
	"\x03\x9d\x43\xe5\xe1\x5d\xf6\x7b\xa3\x67\xf7\xe2\x59\x76\xa2\x72\xef\x94\x63\x3a\xc9\x3d\x4a\x07\xf1\x25\xf7\x9c" +
	"\x63\x2e\xa7\xd0\xba\x08\xd9\x17\xfc\x2a\xf9\x17\x7c\xe4\x90\x4f\xf2\xc4\x4a\x48\x45\xc9\xd7\x94\x48\x99\x37\xe7" +
	"\x67\x05\xda\x63\x74\x85\x3d\x44\x26\x5c\x21\x46\x3c\x6b\x84\xbe\x82\xf6\xcd\x88\x92\x89\xaf\x9f\x3b\x59\xe7\x9f" +
	"\xd0\x9d\xe8\x18\x33\x2c\x65\xca\xaa\x01\x11\x87\x76\x0e\xbb\x0d\xd0\x3d\x0c\xff\x6b\xed\x9f\x16\x78\x34\xac\x75" +
	"\x70\xdc\x00\xed\xce\x69\x03\x1c\xb6\x44\xb5\x93\x92\x7a\xdd\x56\x03\xb4\x8f\x3b\x0d\x20\x7a\x6d\xed\x9f\x1e\xef" +
	"\x65\xb9\x34\x3f\xa3\xf9\xe5\x78\x49\x89\x87\xf8\x18\xa9\x73\x59\xc2\xbd\xb2\x6c\x48\xa8\x07\xc5\xa4\x59\x01\xa2" +
	"\x36\xf2\xf9\xc4\xc7\x3c\xdf\x7c\x04\x27\x23\x54\xe4\x29\x0f\xde\xc5\xd3\xa5\xb2\x96\x87\xfd\xb8\x48\x65\x26\x36" +
	"\x26\x5f\xf5\x2b\x9f\x8f\x29\x62\x63\xe2\x3a\xbf\xc1\xeb\x90\x7d\xaa\x2a\xbd\x83\xf4\x06\xd1\xb8\x56\x29\x77\x56" +
	"\xae\x88\xae\x66\x45\xd4\x5d\x10\xed\xea\x05\xd1\x39\xca\x3f\xf3\x39\xa2\xb7\xd0\xd5\x31\x67\x51\x0a\x44\xd3\x1b" +
	"\x04\xd8\x1f\x5d\x85\xeb\xa0\x5d\x56\x56\xe4\xc9\xfc\x40\x33\x12\xf2\x56\x90\x04\x70\x02\x38\xba\xe3\x0a\xeb\x81" +
	"\xa8\x58\x19\x99\x32\xb6\x8a\xce\x29\xf4\x47\x35\x3a\xef\xe4\x3b\x2f\x65\x6c\x0f\xde\xbd\x86\x1c\x5e\x12\xec\x73" +
	"\x31\xc4\x76\x2b\x47\x04\x4b\xcc\xa2\x2c\x7c\x47\xe4\x4e\x62\xd9\xc4\xf7\x91\xcd\x91\x63\x15\xea\x5d\x89\x2f\xd2" +
	"\x4c\x7c\x40\x18\x1f\x62\x41\x60\xcb\xd2\x15\xbc\x21\x3e\xff\x88\xbf\xc9\xee\xbb\xad\xff\xaf\xd4\xa1\x48\xdf\x56" +
	"\x3e\xaf\x6c\x2a\xa7\xea\x1d\x0c\x6a\x90\x6e\x48\x89\x27\xfa\x10\xdf\x5e\x9c\x54\x1e\x0e\xcc\x7a\xff\xf2\x5c\x53" +
	"\x48\x92\x86\x35\xe7\x9c\x05\x90\xde\xb8\xd8\xd7\xac\xf5\x21\x76\xdd\xfc\xae\x7c\xd0\x6e\x80\x76\xfb\xa4\x01\xda" +
	"\x27\xa7\x42\x4c\xb5\x4f\x0a\xd2\x6c\x28\xde\xad\x11\xb5\x21\xcf\xa3\x6c\x7f\x61\x77\x1d\x21\xf9\x4e\x0f\x0a\x1d" +
	"\x45\x32\x43\x76\x54\xba\xec\xa4\x84\xbb\x20\xee\xc4\xf3\x8b\x54\xe1\x90\x8e\x10\xaf\x31\xe1\xe8\x2e\x90\xdf\xb4" +
	"\xcb\x26\xde\xee\x24\xf8\xfe\x27\xb9\x3e\xfb\x6f\xdf\xda\x7f\x01\x03\xcc\x10\xbd\x45\x74\xff\x45\xdf\x7a\x00\x67" +
	"\x67\xa0\xbd\x07\x5e\x02\x9b\x4c\x7c\x5e\x51\x71\x4f\x1d\x4c\x4e\xe4\x72\xec\xa1\x01\x43\x14\x23\x15\xaa\x64\x64" +
	"\xc6\x1b\x68\x73\x39\x51\x9d\x42\x15\x8a\x86\x12\x7d\x58\x1a\xfa\x33\x8e\x04\xf8\x38\x6a\xb5\x6a\x92\x3f\x11\xad" +
	"\x62\x9a\xac\xd6\xbe\xdc\x7d\x4e\x2c\xfd\x0e\x7e\x7e\xf9\x16\x7c\x94\xc3\x64\xe0\xd3\xa5\x52\x89\x42\x5f\xf0\x12" +
	"\xf2\xb9\x6e\xc7\x89\x77\x76\x86\xfd\x91\x8b\x18\x87\xca\x76\x23\x45\x45\x76\x01\x9d\xa8\x0b\x48\xd6\xa8\xb7\x80" +
	"\x88\x98\x03\xeb\x6c\xc6\xb5\x13\x4b\xab\x99\x96\x8f\x6c\xf4\x3e\x12\x87\xf0\x76\x34\x1d\xb6\x40\x17\x43\x76\x11" +
	"\x23\x8b\xef\x79\x7e\xbe\x86\xf2\x69\x11\xa8\x08\xf0\xfa\x1b\xf2\x47\x5c\x82\xba\x56\xa1\x0c\x95\x35\x5b\x14\x2a" +
	"\x20\x4a\x25\x1f\x16\xfb\x16\xe2\xa1\xb0\x49\x89\xad\xb7\x28\x49\x12\x2e\x6b\xe7\xe5\x49\xa7\x7d\xd4\x00\x9d\x96" +
	"\x00\xfb\xc7\x82\xf1\x3a\xc7\x05\x31\x90\x34\xed\x28\x4d\x0f\x0e\x85\x2c\xea\x44\xff\x6b\xed\x77\x3a\x39\xc8\xb4" +
	"\x20\x22\x68\xab\xdb\xff\x9d\x06\x26\xd4\x80\x04\x07\x9d\xfc\x33\xf6\x1e\x7d\xd5\xce\xa6\x8b\x46\xc8\xd7\x4c\x1d" +
	"\x74\xf1\xc8\x3f\x67\x57\x11\x7d\x74\x72\x55\xb0\x9d\xbe\xc4\x9e\xd0\x68\x41\xea\x4a\xc5\x79\xec\x67\x2f\xe0\xf7" +
	"\x15\xe5\xff\x46\x94\x94\x14\x7b\xf0\xae\xac\x04\xfb\x25\x25\x14\x8f\xc6\xfc\x63\x78\x0e\xd4\x95\x57\x00\x45\xc2" +
	"\x61\xd9\xc6\x22\x17\x21\x9b\xba\x59\x88\xfd\x47\x87\x30\x65\xc1\x57\xec\xf0\xc2\x81\xa9\x0c\xa6\x15\x80\x48\x61" +
	"\xab\x8e\x81\x35\x1c\x69\x87\x6a\x05\xa2\x35\x85\x0e\x9e\x30\x95\x03\xc3\x32\xfd\x7a\xa6\xc8\x77\x10\x45\x72\x19" +
	"\x0c\x5d\xa2\x08\xd1\x70\x53\xf9\xfd\x16\x51\x8a\x1d\xa4\xf9\x6e\xa9\x5e\x28\x13\x23\x8c\x43\xfb\x46\xfb\x56\xb1" +
	"\xab\x04\xc8\xf9\x2d\x44\x09\xc5\xf2\x99\x37\x5a\x36\xf1\xc0\xf5\xfd\x2e\xf6\x19\x87\xbe\x8d\xf6\xc0\x2e\x85\x1c" +
	"\xed\x26\xbb\xe8\x80\xa2\xff\x4c\x10\xe3\x03\xb9\xd3\x7e\xb7\x89\x83\xc4\x3e\xdb\xdd\xdf\xef\x5b\x0f\x9f\xbb\xde" +
	"\x97\x3d\xb1\x0d\xcf\xd6\x4b\xd8\x6c\x95\x1b\x73\xb8\x84\xdf\x24\xfd\x7d\xff\x1e\x7f\xda\xc3\x43\xb1\xc3\x5a\xdb" +
	"\xf8\x3c\xbb\x78\xe1\xfc\xed\xa1\x37\x21\xa2\x2c\x80\x61\x51\xf6\x01\x8d\x22\x6d\x91\xa6\xe1\xc7\x31\x1e\x6a\x61" +
	"\xb4\x06\x13\x80\x0f\xe1\x74\x83\x9f\xc5\x96\x01\x3e\x40\x8e\xd4\xe3\x7d\xa2\x1d\x51\x4f\x95\xec\x03\x62\xc4\x9d" +
	"\x70\x4c\xca\x24\x07\x1b\x43\x2a\x15\x20\x1a\xd9\xc0\x08\xe5\x9a\x13\x9b\x14\x0b\x83\x18\x79\x60\xdf\xc1\xb7\xd8" +
	"\x99\x40\xb7\x7c\x9b\xc8\x83\x18\x0d\xa3\x47\x7d\x49\x5d\x4f\x7e\x6c\x77\xf0\x0e\x6b\xf6\x97\xeb\x89\x7d\x13\x2e" +
	"\x0d\x75\x0a\xc5\xb0\x23\xe9\x21\x66\xba\x44\xc3\xa5\x69\x55\x2e\x23\x13\x39\xf8\xf9\x4b\xe9\x10\xef\xe1\x5d\x9d" +
	"\xe3\xe3\x74\x0d\x81\xac\xe6\x92\xd1\x2b\xc8\x34\xda\x80\x64\x7f\xb0\xda\x1a\xf6\x4e\x47\x90\x67\xf0\x29\xc7\xce" +
	"\xf4\xa3\xd8\x58\x90\x7c\xa6\xcf\x29\x7d\x69\xe9\xaa\xba\xd7\x93\x54\xee\xc8\x65\x5b\xb1\x28\xfb\x0d\xdd\xa2\xf8" +
	"\xd0\xbf\xa3\x7b\xd1\x86\x6a\xb4\x34\x3a\xa8\x45\x54\x5a\x45\x05\x59\xe9\x4c\xd7\x83\xa9\x0e\x62\x36\xc5\x41\x24" +
	"\x24\xac\x0b\x0a\xd9\x18\xfb\x23\x70\x49\x1c\x06\xb0\x0f\x6c\xe2\x73\x4a\x5c\x10\xb8\xd0\x47\x60\xf7\x66\x72\x8d" +
	"\x9a\xec\x9e\x71\xe4\xed\xcd\xa3\x1a\xf3\x89\x8f\x66\xd6\x89\xb5\x54\x21\x34\x5d\x2b\xa6\xe3\xa3\xa2\x5a\xac\xb2" +
	"\xd6\xaa\xf4\x62\xea\x33\xb1\xa0\xdb\x73\xa0\xe0\xbc\xc6\xd9\x28\xc6\x8c\x62\x2c\xad\x62\x14\x63\x9b\xaf\x18\x0b" +
	"\x15\x5e\xd8\xb7\x29\x82\x0c\x49\xc9\x3a\x08\x88\x33\x10\x12\x17\x62\x1f\xd1\x01\x93\xd6\x9c\x01\x45\x8c\x43\xca" +
	"\xd9\x40\x1e\xd7\xbe\x27\x26\x4d\x81\xde\x33\xf2\x58\xa0\xf8\xf6\xf8\xcb\x1e\xf8\x07\xe8\x6e\xab\xae\xac\xdd\x00" +
	"\x07\x25\x7a\xb2\x64\x67\xba\x88\x76\xa4\x4b\xb9\x23\x89\x7d\xaa\x4a\x69\x56\x8e\x37\x37\x43\x6b\xd6\x5a\x85\xce" +
	"\x2c\x56\x51\x18\x70\x54\x36\x5d\x4b\x02\x47\x91\xf5\x55\xac\x62\x77\xe2\x20\xc0\xc7\x28\x8f\x98\x0c\x48\x02\xcb" +
	"\x03\x49\xa7\xb3\x83\xa4\x6e\xc7\x80\x24\x5d\xe7\x06\x24\x19\x90\xf4\x84\x41\xd2\xb3\x00\x42\x06\xfa\x64\x1a\x3d" +
	"\x3e\xf4\x29\x29\x7e\xda\xae\x4e\xcf\x0c\xaa\xa8\x6a\x9a\x59\xfc\x9c\x8e\xaa\x91\xca\xa1\xf1\x73\xd2\x76\x6e\x90" +
	"\x8a\x41\x2a\xdb\x83\x54\x22\xff\xa5\x50\x31\xe3\x22\xde\xb7\x1e\xb6\x15\x82\x94\xc0\x8f\x2b\x81\xaf\xc0\x7b\xe2" +
	"\x14\x0c\x91\x5b\x05\x3e\x56\xe4\xad\xb4\x2d\x9a\x97\x4d\x47\x1f\x0e\xb2\xb1\x07\x5d\x9d\x8d\xd7\x38\x61\x2f\x08" +
	"\x4e\x74\xb6\xa6\x72\x70\x32\xc6\x8e\xe4\xd3\xd8\x03\x46\xcb\x89\xa1\x41\xca\xe8\x5a\xb4\x9d\x1b\x04\x63\x10\xcc" +
	"\x36\x20\x18\x36\xf1\x42\x05\x8b\x4f\x1c\x14\xeb\x55\x6c\xe2\x3b\x98\x63\xe2\x7f\x4f\x7e\x3b\xeb\x5b\x1f\x10\x74" +
	"\xee\xfb\x56\x23\xac\x74\xd6\xb7\x84\xd4\x12\x58\x27\xf4\x20\x9b\xb1\x9b\xd5\x42\x24\xd5\x83\x6c\x4e\xaf\xb1\xf9" +
	"\x9d\xbf\x5b\xfb\xa7\x25\x58\x4a\xa0\x28\x20\x27\xc1\xf8\x7d\xab\x48\xca\xc3\xbe\x41\x51\x0b\xa2\x28\x83\x94\x16" +
	"\x43\x4a\x27\xb3\xab\x71\x3a\x27\x06\x04\xe9\x3a\x37\x20\xc8\x80\xa0\x6d\x00\x41\xd9\xeb\x6a\x59\x2d\x8e\xfe\x9e" +
	"\x5a\x4e\xcf\xb3\xad\x8a\x9e\x29\x17\xd4\xa4\xaa\xc7\x5c\x4d\xcb\x34\xda\x26\x88\xb2\xf9\x2e\x36\x46\xd1\x23\x7f" +
	"\x56\x00\x5f\xda\x9d\x55\x69\x7a\x5a\x06\xe4\xe8\x3a\x37\x20\xc7\x80\x9c\x6d\x00\x39\x33\xa8\x68\xde\x21\x8f\xd0" +
	"\xfb\x4b\x8a\x18\x9b\x50\xb4\xb8\xca\x47\xed\xef\x49\xeb\x7e\xda\x8d\xd6\x7e\xb7\x4a\xf7\x13\xce\x06\x88\xa7\xc3" +
	"\x40\xac\x02\xc4\x82\x77\x06\x62\x2d\x08\xb1\x0c\x8c\x5a\x10\x46\x1d\xad\x08\x46\x75\xdb\x06\x46\xe9\x3a\x37\x30" +
	"\xca\xc0\xa8\x27\x06\xa3\x5e\x63\x76\xb3\x3c\x10\x95\xef\xed\x79\x43\x28\x31\x17\x06\x40\x19\x00\x05\x56\x07\xa0" +
	"\x94\x6b\x60\x97\x49\x14\x1a\x40\x86\xc0\x97\xea\x51\x72\x8b\x68\x72\x1d\x8c\x8f\x21\x07\x63\x78\x8b\xc0\xc4\x67" +
	"\xf6\x18\x39\x13\x17\x39\x80\x5c\xff\x89\x6c\x6e\xb0\x59\xf2\xed\xcb\xc0\x66\x9d\xd9\x3c\xad\xeb\x63\xb3\xb6\x71" +
	"\x66\xd2\x76\x6e\xb0\x99\xc1\x66\x5b\x88\xcd\x02\x64\x0f\x12\x61\x2c\x5e\xb4\x07\x2a\x6d\x79\x4f\x1a\x51\x81\x6a" +
	"\x48\xc5\xc0\xa7\xec\x4c\x3d\x26\xa6\x5a\x18\xd8\x3c\x52\x90\xef\xf6\x94\x28\xdf\xdd\xd3\xbc\xcc\xa9\x1b\xe6\xfb" +
	"\x03\x0a\xd1\x0a\xf8\xc4\xe0\x48\xa5\xcc\x2c\x71\xbe\x37\x30\x60\xa6\x82\xb2\x3e\x71\xec\xe2\x6f\x32\x0c\x3d\x80" +
	"\x23\x88\x7d\xc6\x81\xbc\xdb\x99\xc0\xac\x8b\xcb\x4f\x80\x46\x13\x92\xef\xaa\x34\x8a\x66\x29\xb5\x55\x15\xcf\x57" +
	"\x9d\xf9\xac\x94\xda\xd3\x2e\xa1\xe7\x23\xf5\x94\x46\xa5\x9c\x33\xe4\xe4\x3c\x31\x23\x4d\x4c\xc8\x67\x11\x13\x52" +
	"\x6c\x7e\x3d\xb9\x03\xda\xc1\x64\x30\x11\x4b\x8a\xc9\x25\xd5\x83\xb7\xa3\xb6\x07\x5e\x80\xb4\x86\x3f\xf1\x44\xad" +
	"\x1e\x9b\x78\xe0\x25\x60\x36\x74\x21\x95\xde\x30\xda\x2a\x0b\x78\xbb\x88\x43\x64\xf0\xea\xbe\x30\x0a\xdd\x48\x42" +
	"\x3a\x41\x0a\xbd\xe2\xa8\x93\xf2\x1f\x07\x83\x04\x9f\x6b\x6a\x7c\x51\xbf\x00\x64\xc5\xa5\x8c\x13\x58\xa8\xf0\x50" +
	"\x6c\x33\xd7\xa7\x15\xe1\x5b\x9d\x6f\x92\xf2\xab\xf8\x4d\x3b\x53\xfa\x98\x2f\x9e\xa6\xa0\xac\x2e\x96\x26\xa1\x0e" +
	"\xa2\xaf\xee\xc5\x71\x49\x42\x91\x8f\x17\xc5\x3a\x01\x71\xb1\x2d\x28\x69\x39\x68\x08\x27\xae\xe6\xe0\x50\x85\x65" +
	"\x28\x62\x13\x97\xbf\xa9\xc7\x36\x0c\xb9\xc8\x56\xd3\xad\x84\x3f\xba\xc9\xd7\x91\x6b\x3a\xc1\x92\x93\x8e\xb6\x54" +
	"\x4b\xb5\x1c\xdd\x90\xeb\xe8\x9a\x6a\xd8\xa9\xc6\x17\x4e\x7b\x9d\x87\xa0\xaf\x7d\x5b\xe1\xd9\x97\xa9\xac\xc3\xe1" +
	"\xa8\x10\xe4\x72\x43\xa3\xa3\x8a\x7d\xff\x53\x2a\xca\x14\x14\x54\x16\x0e\x75\x3d\xb1\x4e\x4d\x2c\xd3\x7c\x35\x17" +
	"\x5e\x23\x9d\xd2\x24\x2c\x9c\x2b\xd0\x69\x08\x6a\x74\xd1\x23\x56\x17\x02\x75\xb1\x51\x68\x9b\x85\xc3\xd0\x16\x95" +
	"\x1c\x97\x37\x2a\xac\xea\x53\x38\x40\x78\xa1\xf7\xc5\xda\xcf\x10\x5a\xbf\xbc\xa9\x87\x88\x23\x73\x88\x00\xe6\x10" +
	"\x91\x14\x3e\xc6\x21\x22\x5c\x30\xb9\x73\x04\x15\xff\x98\xa3\x80\x39\x0a\x98\xa3\x00\x30\x47\x81\x75\x1f\x05\x22" +
	"\xff\x49\x73\x1a\x30\xa7\x01\x73\x1a\x48\x9b\x98\xd3\xc0\x1c\xa7\x01\x07\xb3\x9b\x0d\xb1\x27\x1c\x4f\x39\x0a\x74" +
	"\xcd\x51\x00\x98\xa3\x40\x52\xb8\xd6\x1c\x53\xbb\x1e\xbc\x93\x26\x81\xc1\x10\xbb\x28\x0c\x3d\x3f\x60\xf8\x1b\x1a" +
	"\x5c\xdf\x73\xc4\xbe\x0f\x99\xd8\xf6\xce\xfe\xdb\xb7\xd0\x1d\xff\xdc\x39\x38\xfc\xf2\xd7\x35\xa7\x43\xf6\xd7\xdd" +
	"\x90\xfd\xf5\x6d\xc8\xfa\xd6\x03\x68\x02\xb5\x03\x78\x0b\xb1\x5b\xbf\x87\x3d\x70\x7d\x0f\x76\x1d\x74\x8b\x6d\xd4" +
	"\x08\x88\xd3\x48\x82\xe2\xef\x85\x45\xf9\x67\x7d\x3f\x67\xd0\x58\x7c\x04\x55\xef\xdf\xeb\xfb\x2f\x00\xf1\xc1\x6e" +
	"\xf2\xac\x01\x02\xe2\xec\x01\x79\xd8\x19\xb8\x68\xc8\x81\x7c\xfd\x5e\x38\x0b\x49\xb5\x41\x40\x9c\x5e\x12\xe1\x16" +
	"\xfb\x43\xd2\x33\x07\x2b\x73\xb0\x32\x07\x2b\x60\x0e\x56\xeb\x3e\x58\x49\xaf\xea\x0b\x18\x40\x1b\x73\x35\x38\x91" +
	"\x39\x53\x99\x33\x95\x39\x53\x45\x8f\x9f\xd5\x99\x6a\xed\x36\x91\x69\x07\xa1\x63\x73\x10\x02\xe6\x20\x94\x14\x3e" +
	"\x86\x4d\xc4\xc1\xec\x46\xf5\xac\x1a\x60\x0a\x39\x4a\xbd\xa8\xf2\xa8\x3e\x74\x49\x96\xbe\xc7\x3d\xe3\x45\x65\x10" +
	"\xbe\x41\xf8\x61\x13\x83\xf0\xd7\x8e\xf0\xdf\xfe\x6e\x6c\x27\x06\xe7\x1b\x9c\x9f\x69\xb2\x3a\x9c\xbf\xa3\xbc\x4e" +
	"\x08\x75\xb1\xfc\xd5\x5e\x2d\x66\x8f\x91\x07\xff\x89\x28\x0b\x8d\x17\x69\x00\x0a\x8b\xf1\xfb\x70\xf9\x3a\x90\xde" +
	"\x24\xd3\x9b\xca\x9d\xf4\x09\xf2\x02\x17\x72\xec\x8f\x72\x63\xb1\x5c\xcc\x78\x96\x6d\x1f\xd2\x16\xe1\x16\x95\xa9" +
	"\x9b\x5c\x5e\x23\x5f\x9b\xed\xec\x22\x8c\xef\xa6\xa5\x37\x4d\xf2\xdd\x04\xd8\xbe\x91\x10\x2f\xd3\x59\x34\xd8\x04" +
	"\x63\xa8\x2b\xc3\xea\x2a\x87\x8d\x76\x4b\x79\x70\xa0\x3e\x68\x7b\xf9\xbf\xbb\xca\xdf\x6d\xf5\xc1\x41\x4b\xad\xa1" +
	"\x88\x96\x8e\xf2\x77\x3b\xb3\x0f\x7d\xc9\x8e\x5f\x6c\xb1\x44\x1a\x97\x8a\xe3\x98\xf6\x15\xea\x4b\x8f\xd4\x97\xaa" +
	"\x5f\xd1\x39\x54\x1f\x28\x97\x24\x8f\x1d\x75\x9c\xd9\xef\xd6\x92\xe8\x1b\x91\x50\xd8\xca\xf0\x90\x7a\xd9\xe8\x57" +
	"\x04\x5d\x9e\xbe\xd9\x9a\xc8\x33\x97\xf5\x01\x1d\x3b\x27\xde\x95\xeb\x38\xde\x0d\x4c\x4b\x6f\x53\x76\x95\x8f\x04" +
	"\xbb\x0b\x50\x34\x96\xbd\xec\xff\xc9\x88\xdf\x03\x7f\x35\x65\x59\xcc\x16\x16\xf4\x7d\xc2\x61\x3c\x8d\x1a\x36\xcd" +
	"\x8c\xaa\x20\xee\xb1\xcb\xdf\xfa\x9a\x9b\x5a\xf9\xb3\x6c\xb3\x09\x7e\xa1\x70\x08\x7d\x08\x9a\x4d\x55\xf4\x23\xbf" +
	"\xe4\xf2\x75\x74\x57\x58\x5f\x82\x6d\xe2\xe7\x2f\x53\xb6\x1a\xa0\xd3\x6e\x37\x40\xa7\xdb\x6d\x80\x76\xe1\xfe\x63" +
	"\x7c\xc7\xf6\x3c\x1d\x2e\xf8\x1b\x38\x77\x11\xe5\x2a\x44\x4b\x36\x3e\x71\x58\xbf\x26\x90\xe6\x90\xd0\x43\x05\x55" +
	"\x4b\xae\x92\x5b\x23\x1f\x71\x89\x1d\xb3\x12\x32\xdc\x57\xaf\x92\x2d\x3e\xd9\xb0\xa3\x00\x7f\xe9\x9f\x1c\x51\x18" +
	"\x19\x51\xdb\xdd\x6e\xe7\xf0\xa8\x7d\x7c\xd4\x39\x49\xb3\x55\x69\x4e\x98\x99\xfb\x6c\x3b\x3a\xea\x3d\xda\xb5\xbc" +
	"\x29\xb7\xf2\xf2\x57\xbe\xa7\x5e\xca\x8b\xa2\xb7\x2f\xe9\x46\xde\x23\xe6\xa3\xfb\xa1\x73\x7a\x6a\x1f\x1e\xcd\x1b" +
	"\x74\xe1\x07\xe7\xf0\x10\x1e\xc0\x25\x47\x59\xf0\x27\xde\x35\xa2\x80\x0c\xe5\x3d\x3f\x9b\x50\x35\xdf\xd0\xb3\x4d" +
	"\x42\xa7\xd3\xa9\xd5\xbe\x98\x5a\xbd\x02\x8e\x4c\x12\x3a\x6d\xe7\x26\xea\x81\x89\x7a\xb0\x0d\x51\x0f\x8a\xf1\xa3" +
	"\x22\x13\x9e\xbc\xff\x29\x85\xa8\xd4\x54\x9d\xf5\xad\x1f\xc5\xbf\x7d\x4b\xa3\xb2\x9a\x37\xd2\x41\xf1\xd0\x96\xd1" +
	"\x5a\xd5\x24\x66\xad\x14\x74\x62\x43\x28\xb1\x4d\x3e\x87\x90\x4e\xf0\x76\xb4\xf1\x21\x9d\x16\xc8\x79\xa2\x45\x21" +
	"\x2b\x0c\x3b\xde\x29\x41\x15\x91\x36\x66\x1d\xc0\xa2\x56\xc8\xa5\x47\xc1\x15\xba\x3c\xfc\xba\xfc\x71\xb3\x45\x40" +
	"\x30\xb8\xc2\xe0\x8a\xa4\x8a\xc1\x15\x9b\x8f\x2b\xa6\xc4\x91\x50\x31\x05\x78\x21\x38\x74\x93\x91\x85\xd8\x77\x4e" +
	"\x5a\x15\xf8\xa2\xe2\x38\x6f\xc0\xc5\x06\xba\xa6\x28\xda\x03\xad\xdf\x4a\x6b\xb1\xbd\xb0\xad\xdb\x0c\x4f\x67\xda" +
	"\x0c\xc7\x08\x8f\xc6\x92\x7c\x9d\x83\x56\x70\x67\x15\x77\xca\xe3\x83\xfc\x6e\x58\xe6\xd2\xe2\xe2\x91\x7f\xce\xae" +
	"\xca\xd5\x97\x75\x9c\x5e\x4a\xb4\x9e\x3f\x7b\x01\xbf\x2f\x69\x2c\xca\xff\x8d\x28\x59\xa2\xcb\x0c\x15\x73\xf2\xb1" +
	"\x54\xdb\x5a\x8e\x91\x22\x63\x63\x32\x20\x4d\xf1\x6b\xc4\xec\x05\xdc\x71\x2a\xc1\x54\x2d\x6f\x9c\x4e\x1d\x70\x63" +
	"\xbc\x71\x16\xdb\x9e\x38\x09\x6e\x76\xbb\x0d\x19\x42\x99\x42\x8e\x76\x6d\xe2\x73\x88\x7d\x44\xc3\xfd\x4a\xc8\xf2" +
	"\x01\x43\x36\xf1\x1d\x36\x90\x84\xff\x8e\x3d\x38\x42\xff\xef\xac\x6f\xf5\x2d\xe9\xbc\x7f\xf6\xdf\xbe\xf5\xbf\x37" +
	"\x27\x6c\xb0\xff\xa2\x6f\x35\xd2\xf6\xa2\x4c\x54\xbb\xfc\xfd\x75\xdf\x7a\xf8\xdc\xf1\xbe\xec\xf5\xa9\xde\xc3\x5f" +
	"\xd6\xd5\xb9\xf9\x4b\xa3\xe7\x80\xa2\xc0\x85\x36\xda\x9d\xea\xf4\xaf\xee\xa6\x0d\xd0\xb7\xe2\xee\xfb\x96\xf8\xeb" +
	"\xc7\x76\xf8\x6f\x40\x9c\xf0\x97\xdd\xfd\x17\x7b\x7d\x6b\x6f\x0f\xc4\x97\x1f\xc2\x6f\x59\x24\x8c\x21\xe3\xb0\xcc" +
	"\x31\x2e\x8f\xe0\x35\xf1\x0b\xe7\xf2\xa0\x49\xa6\x10\xe8\xfc\x68\x3c\xc4\x29\xb6\x23\x68\x5b\x4d\xdb\xd9\xbc\x67" +
	"\xa2\x78\x8a\x87\xf3\xc0\x88\xf5\x7a\x6c\x5c\xfd\x7e\x29\x75\xe1\x97\xc4\x51\x53\xef\x1b\x57\x8d\xb5\xb8\x6a\x54" +
	"\x24\x2b\x03\x60\x73\xdd\x1f\x8c\x1b\x47\xf2\x78\x75\xee\xda\xcf\xde\x7e\x97\x32\x8d\xbc\x46\x67\x0c\x72\xb9\x67" +
	"\x65\x06\xb9\x29\x1e\xee\x47\x26\x9d\xb0\xb6\x73\xa3\x38\x33\x8a\xb3\x6d\x50\x9c\x95\x1b\xe4\xa2\x58\x4a\xe1\x95" +
	"\xe3\xed\xb7\xc9\x7d\x38\x7f\xf7\x9c\x6d\x72\xb1\x0a\x62\xfd\x30\xc1\xd8\xe5\x56\x87\x2f\xb6\xdf\x2e\x37\xed\x02" +
	"\x9d\xf1\xf7\xd1\x76\x6e\xe0\x85\x81\x17\xdb\x00\x2f\x2a\x43\x33\x6e\xa5\x55\xae\xd4\x28\x17\x87\x7a\x33\x76\xb9" +
	"\xad\xb2\xcb\xad\xd9\xf4\x56\xbe\xdf\xa5\xa6\xb7\x83\x56\x89\xe9\xad\x66\x58\xad\x55\x99\xde\xd6\x6a\x3b\x33\xe6" +
	"\xaf\xa7\x69\xfe\x4a\xad\x23\xf1\x8e\x20\x0d\x24\xe1\x31\x33\x63\xf4\x7a\xd8\x1a\x1b\x56\xdf\x5f\xde\x96\x55\xc7" +
	"\x0e\x15\xbf\x59\x67\x85\xaa\x61\x48\x6a\xcf\x95\x97\x6b\xcd\x96\x24\x12\x80\x6e\x9c\x7c\xfe\xad\xcf\x91\xcf\x90" +
	"\x31\x2b\x6d\xc0\x0d\x60\x07\xd9\x45\xe5\xb9\xac\x63\x2c\x47\xcb\x1d\x47\xe9\xb2\x5c\xbf\xe1\xe8\xb1\x72\xd4\x1d" +
	"\x94\xf2\x6d\x08\x87\xf2\x87\xf9\x9a\xd7\xe1\x26\xbe\x8f\xfd\x11\xf8\x28\xb5\x9d\x0b\x5c\x87\xdb\x40\x28\x9b\xd1" +
	"\x4d\xb5\x56\x80\x71\xeb\x13\xee\x70\x0a\xe1\x6a\x46\x45\x5a\x2d\x8e\xd5\x15\xc8\x75\xaa\x29\x98\xdf\x03\x0c\x3b" +
	"\xe8\x5f\x31\xd4\xec\xaa\x93\xb5\xf1\x18\x17\x40\x06\xbe\x21\x4a\x0c\xd6\x9d\x3d\xaf\xab\x80\x69\x91\x4d\x25\x18" +
	"\x43\x86\xca\xbc\xb2\xe6\x8a\xbb\xaa\xc2\x57\xd1\x79\x14\x58\x56\xbc\x6b\x7e\xbf\xaa\x71\x49\xd2\x69\x00\x56\xe5" +
	"\x54\x25\xbe\x77\x8a\x47\x95\x76\x3e\x9f\x2c\xf8\x15\x38\x57\xd9\xa7\xc0\x05\x99\xa8\x16\x05\x03\x7e\xd7\xee\x53" +
	"\xd5\xaa\x58\x55\x6b\x87\x93\xcb\x0c\x8b\xb3\xa9\x63\xdc\x5e\x67\x2b\xa9\x40\xaf\xc1\x5d\xb1\x56\xf6\xfc\x76\x54" +
	"\xa1\x95\xcd\x29\x57\xab\x87\x3a\xd7\x6d\x84\xf7\x84\xa3\x1e\x70\xb1\x87\x39\xf0\xe0\x3d\x40\x77\x36\x42\x0e\x03" +
	"\x52\x37\x03\xb0\x0f\xa0\xd8\xa9\x80\x13\xda\xbd\x00\x23\x1e\x02\x89\x22\x87\x01\x32\x04\x98\x03\xe0\x10\xc4\x80" +
	"\x4f\x38\x18\xc3\x5b\x14\xf6\xc6\xf6\x55\x1f\xac\x54\xcb\xdd\x6e\xa9\x6a\xee\x4a\x48\xaa\x6a\x53\x67\x82\xa4\x9d" +
	"\xf2\xc8\x1a\x62\xc7\xbb\xc2\x1e\x8a\xb1\x85\x0e\x4d\x85\xae\x4e\xad\x3a\x38\x2a\x80\x23\x14\x8d\xf0\x44\xc1\x37" +
	"\x01\x82\x5a\xc9\x1f\x96\xbc\xc6\x14\xd9\x31\x41\x6e\x15\xf4\x63\x53\x22\x21\x7c\xe1\xcb\xc4\x62\xf8\x15\x41\x47" +
	"\xe2\xa6\x62\x69\x28\xee\x95\xd9\xb4\x89\xab\x81\xf8\x4e\x78\x13\xa1\xda\x3a\x24\xc3\x3b\xd5\x60\x6b\x79\x3a\x8a" +
	"\x36\xb3\x22\x5f\x4b\x0f\x80\x08\x67\x6a\x97\x78\x89\x8b\x40\x38\x5b\x7a\xbb\xbe\xda\x47\x6d\x47\x01\x59\xf5\x07" +
	"\xbb\xdd\xb5\xdb\xc7\x6a\x98\xbd\x62\x00\x3d\x07\x72\x94\xe2\x97\x3f\xfe\xf8\xe3\x8f\xe6\xbb\x77\xcd\xd7\xaf\xc1" +
	"\xaf\xbf\xf6\x3c\xaf\xc7\x34\x90\xaa\xcc\x65\x00\xc4\x5c\x54\x8a\xb7\x44\x61\x1a\x02\x47\x03\xb9\x44\x85\x4f\xb4" +
	"\x04\x8f\x05\x90\x73\x44\x25\x3b\xc5\x2a\x43\x8d\x55\x28\x87\x73\x8a\x13\x73\x50\xdc\x65\x00\xb0\x4e\x5a\xd3\x67" +
	"\x2a\xb1\x7a\x71\x8a\x7d\x8d\x70\x93\x51\xe4\x12\xcf\x14\xfb\xfe\xd3\xc7\xd7\xd6\x4c\x9b\x56\xc2\x63\x8f\xcb\x60" +
	"\xd3\x3d\x56\x40\x15\x33\xae\x9d\xe3\x2a\x1c\x22\x80\xc2\x36\x57\x45\x34\x56\x0d\x8d\x41\x96\xf0\x63\xec\x38\x48" +
	"\xa3\x1b\x8f\x09\x1f\xa2\x89\xf9\x48\xae\xbf\x01\x09\x0c\xed\xb3\xb4\x3f\x58\x84\xf6\xd2\xf3\x08\xfc\xa0\x89\x06" +
	"\x5b\x97\xfe\x61\x80\xa4\xd5\xd1\xff\x03\xfa\xcf\x04\x31\x0d\x1e\x35\x1c\xb0\x4c\x0e\xd0\xf9\xc4\x6c\x08\x07\xfc" +
	"\x26\x20\xa6\xa1\xbf\xda\x64\xb9\xf4\x7f\xb5\x99\xf4\x7f\x87\x3c\xb3\x03\x4c\xa3\x7f\xf1\x30\x3f\x3b\xfd\x5f\xaf" +
	"\x8e\xfe\xa1\x29\x71\x7e\xfa\x9b\x1d\x60\x2d\x1c\xf0\xf3\xe6\x72\x80\xd9\x01\xd6\x40\xff\x37\x9b\x49\xff\x0f\x88" +
	"\x71\x48\x39\xd0\xe8\x8c\x0d\x0b\x2c\x99\x05\x7e\x59\x2f\x08\xd8\x29\x99\x8d\xf9\xcc\x71\x39\x43\x9a\xd4\x83\x0c" +
	"\xf2\xf1\x13\x7a\x53\xaf\xec\xf7\xd8\xc4\x1b\x50\xc8\xd1\xf7\x62\xe4\x85\xf2\x70\x0c\x8d\xf8\x7d\xb1\x4b\xdb\x06" +
	"\x07\x66\xc8\xf9\xb4\x55\x9a\x0f\xa5\x3d\xbe\x50\x61\x8a\xe1\x30\x8e\xd6\x50\xb4\xd5\xcc\xe8\xb9\x7d\x31\x9b\xb4" +
	"\xc8\xf2\x41\x7e\x36\xfb\xbe\x78\x06\x6f\x47\x03\x72\x8b\xe8\x40\x48\x91\xd4\x70\x9b\x12\x34\x4e\xb8\x3b\xa0\x21" +
	"\xd8\x60\x99\x48\x95\x49\x2d\x95\x0d\x52\x0e\x50\x28\xf2\xb9\xdd\xf2\xbe\xa4\xb3\xbd\xd7\x00\x7d\x3f\x47\xa3\x88" +
	"\x44\x31\x85\x04\x81\xfe\x2e\x08\xd4\xf7\x09\x05\x93\x00\xbc\x00\xad\xc4\xd2\xbb\x05\xd4\x52\xfd\xec\xd7\x46\xad" +
	"\xd0\xfa\x60\x68\x35\x03\xad\x5e\xcd\x4f\xab\x4a\xa7\xde\x32\xe1\x08\x74\xa2\x74\x83\x65\x64\xc6\xc7\x62\x0b\xa8" +
	"\x39\xa3\x32\xbd\x7c\xe5\x2d\x49\x6a\xe6\xae\x13\x2f\x61\x31\x8a\xb5\x98\x67\xa0\xec\x8a\x4c\x4a\xb2\xeb\x52\x21" +
	"\xf5\x3c\xcb\x77\x8a\xaf\xf7\xe3\x92\xfc\xe7\xcd\x20\x79\x24\x7a\x0d\xc1\x57\x4e\xf0\x37\xcb\x22\xb8\x86\x9c\x91" +
	"\xab\x15\x0d\x0f\x59\x71\x54\xb2\x1a\x74\x0c\x88\x03\x22\x59\x3e\x9b\x6c\x5d\x99\x73\xdc\xe2\x42\x7b\x71\x9a\xa9" +
	"\x9e\x6f\x15\xde\x6b\xbf\xd4\x3e\x0c\xa5\x7e\x68\x56\xfb\x9d\x7a\x2d\xb1\x8e\xab\xd9\x45\xe8\x26\x0b\x68\xe4\x6d" +
	"\x16\x14\xaf\x58\x50\xe8\x33\x31\x3f\xfa\xd9\x09\xcb\x03\x58\x96\xa4\x34\xcd\xbf\x28\x9b\xee\xa8\x83\xd2\xe5\x9a" +
	"\xca\xa6\x4d\x5a\x4b\xaa\xa9\xcc\xf7\x16\x1c\x84\xdc\xf8\x06\xbe\xc6\xfd\x2c\x75\x32\x2e\x75\xeb\xb9\xf5\x34\x69" +
	"\xcd\x12\xb7\x1e\x51\x5a\xb5\x82\xeb\x39\xf3\xc8\xd3\xfe\x10\xfb\x38\x76\x1e\x09\xd7\x76\xe8\x02\xb7\x9b\x06\xf8" +
	"\x90\x8f\x59\x23\x02\x4c\xe2\x39\xf5\x11\x47\x6c\x80\xc9\x60\x4c\x18\xd7\x2d\x8e\x58\x94\xa9\x3e\x35\xd8\xb7\xdd" +
	"\x89\x83\xce\xcb\x6f\x26\x97\xfa\x84\x59\xde\xc4\xe5\xb8\xa4\x59\x7c\x0d\x5e\x7c\xb0\xfa\x29\x99\x74\x56\x8a\xb6" +
	"\xc1\xfa\xcf\x04\xd1\xfb\x65\x0f\x3d\xe5\x48\x35\xf5\x2f\x45\x23\x54\xbc\xb3\x2e\x58\xf2\x06\x07\x9f\xa8\xfb\xf1" +
	"\xde\xb7\xcb\xd2\xef\xea\x1d\x30\x39\x1c\x49\x46\x63\xff\x13\x8f\x44\xed\xba\xc0\xd6\x99\xe7\xe5\x8d\xa2\xd5\x17" +
	"\xce\x8f\x52\x38\x61\xe8\x2a\xec\xb4\xe0\xf3\x93\xfc\x6e\xb2\xb0\x01\x93\x85\x4d\x9f\x85\x4d\x5e\xa7\x29\x4f\xc1" +
	"\x76\xe2\x21\xc7\xf1\x32\x72\x59\x97\x7f\x2d\xa0\xc8\xc1\xd2\xe9\xcd\xe4\x5f\xb3\xb6\x2a\xff\xda\x41\xfa\x77\x3e" +
	"\x01\xdb\xc1\xf1\xd1\xe1\x71\xf7\xa0\xdd\x4a\x2e\x7e\x3c\xa1\x04\x6c\xed\x19\x33\xb0\x45\x99\x0a\x9b\xff\xc2\x0e" +
	"\x02\xbf\x53\x7b\x8c\x18\x0f\x27\x0b\xfc\x7e\xfd\x27\xb2\xf9\x22\x37\xd0\x32\x3e\xc6\x55\x2e\xc0\x6f\xfd\xa1\x3b" +
	"\xb9\x7b\xfd\xaa\xd2\x01\x78\x69\x5e\xba\xda\xe0\x08\x27\x35\x67\x7f\x5a\x92\x8e\xdc\xa3\xe9\xfe\xb7\x05\xdc\xbb" +
	"\x0a\x37\x5a\x75\x1c\x4e\x1a\xd0\xbb\x74\x34\x33\x7b\xd1\xea\x1d\xf1\xe6\x30\x0b\x4d\x77\xee\xcb\x3b\xef\x55\xa1" +
	"\x53\xe3\x90\xb9\x76\x87\x4c\xcc\x06\xd0\x85\x1e\x72\xe0\xea\xdc\x32\x1d\x64\x8f\x16\x31\xcb\x1a\xe2\xab\x4d\x96" +
	"\x44\xfc\x3a\x0e\xdc\x8f\xe3\x8d\x6b\x48\xae\x36\x59\x12\xc9\xa3\xc5\x3e\x60\x36\x74\x23\xa5\xa7\x54\x7a\x19\x36" +
	"\xd0\xd4\x7c\x56\x6c\x60\x38\x40\x53\xf3\xe9\x72\x40\xdd\x0b\x3c\x8f\x43\xf6\xf3\x90\x3f\x3f\x4a\xf6\x04\xef\xb5" +
	"\xdf\x69\x18\x61\x99\xa2\x00\x84\xa2\x60\x7e\x76\x98\x76\x2b\x6b\x11\x76\xb8\xa4\x44\x9c\x6d\xc1\xee\xfb\x78\xbf" +
	"\xd2\xd8\x5c\x0c\x3f\x2c\x0d\x14\x2e\x08\x09\x56\xca\x0a\xc4\x31\xf2\x60\xc5\x1b\xc3\x66\x52\xfe\x22\xb6\x0c\x1b" +
	"\xfa\xaf\x92\xfe\x89\x01\x7e\x33\xb9\x40\x1a\x09\x0c\x03\xac\x72\x03\x28\x5a\x4a\x37\xe4\x86\xd6\x25\x71\xb1\xad" +
	"\x5a\x1d\x0d\xe1\x97\x27\xf9\xf5\xd3\xbb\x09\xcb\xfe\x89\x13\xbd\x8a\x82\x19\x0a\xbd\xdc\x7f\xf1\x72\xbd\x4b\x73" +
	"\xa7\xe4\xb3\x67\xbf\x37\x61\x93\x89\xcf\x77\x27\xc1\xf7\x3f\xc9\xf5\x59\xdf\x4a\x5d\x26\x9a\x42\xe0\xb0\xbe\xf5" +
	"\x30\x8f\x1f\x95\x74\xe6\x7a\x75\xaf\xa5\xb2\xfa\x29\xd1\x6c\x52\xe8\xe9\xb9\x42\x96\xff\x38\x48\x3c\x05\x54\xba" +
	"\x15\x26\x21\x9d\x8c\xd8\x27\x09\x7b\xa8\xd8\xea\xa1\xd8\x66\xae\x4f\x2b\x46\x52\xaf\xf3\x4d\x32\x54\x63\xf1\x9b" +
	"\xa6\xf2\x64\x0d\x17\x34\x42\x1d\x44\x5f\xdd\x5f\xe1\xc8\xd6\xfc\x51\x73\xb7\x3f\x12\x2a\xd2\x0c\x30\x84\x13\x57" +
	"\x73\xb7\x2e\xf1\xb5\x61\xc8\x15\xa7\xbc\x32\x1d\x25\x80\x0c\x64\x9c\xf9\x34\xd5\x44\x8d\xbe\x72\xa2\xed\x5b\xa9" +
	"\xb7\xb7\x28\x0f\x88\xd3\x00\x7d\x2b\xf4\x20\x0c\x1b\x64\x5d\x3d\x53\x67\x40\xf9\x3a\xe2\xa0\xd0\xbb\x50\x8c\x42" +
	"\x14\xa7\x06\x13\x30\xa4\xc4\x4b\xbe\xc2\x0e\x0d\xb3\x91\x97\xe3\xfe\x7e\xd2\x67\xe8\x6f\x08\xae\xef\xd3\x2f\x2b" +
	"\x8c\x2c\xf4\x5c\xd4\x94\x26\xbe\x8d\x99\xbf\xa2\x2f\x97\x93\x2f\xba\x15\x4c\x07\x1c\xc4\xec\x28\xdc\x92\xc6\x3f" +
	"\x8c\xc2\xaf\xb1\x47\x8f\xd6\xdd\xb0\x2a\xce\x1d\x45\x6c\xe2\xf2\x37\xd3\x16\x62\x48\x3b\x2d\xf3\xea\xd8\x59\xb7" +
	"\x00\xa6\x2f\x81\xc4\xd5\x4d\x5b\xaa\x5d\x07\xb9\x95\x80\x5c\x47\xd7\x54\xb3\x40\x6b\x7c\xe1\xb4\xd7\x79\x08\xfa" +
	"\xda\xb7\x15\x9e\x7d\x99\xba\x18\x13\x5f\xad\xba\xd2\x39\x49\x52\x15\xf9\x50\x2b\xbe\x02\x17\xc4\x1f\xe2\xd1\x24" +
	"\xfa\x6b\x37\xaf\x6e\xbb\xf8\xc0\xf6\xd6\xe3\xb3\x99\x56\x5a\x9e\x1f\xc2\x92\x5d\x0d\xd4\x67\x77\x3a\xf7\x83\x1a" +
	"\xae\x06\x39\x7f\x91\x4d\x71\x35\x50\x9d\x58\x8c\xab\xc1\x93\x47\x9a\x8f\xe8\x6a\xe0\xc7\x9b\xe4\x66\xda\x1c\xa2" +
	"\xe4\x00\x72\xfd\x19\x1e\x50\x9a\x2c\x51\xb7\x90\xbb\xc7\xb3\xba\xd3\x4c\x92\x58\x60\x3e\x6e\xb8\xb8\xfc\x04\x2e" +
	"\x08\xd5\x7d\xa1\xe1\x85\xa5\x04\x02\x90\xbc\x90\x5c\xa7\xdd\x4c\x8d\x93\xd1\x36\x6e\xb6\x0f\x92\x51\x39\x19\x95" +
	"\x93\x51\x39\x19\x95\x53\x7e\x50\xb3\xab\x9c\x5e\x54\x2b\x73\xf4\x26\x11\xa3\x55\x79\xae\x5a\x95\xe8\x16\x06\x10" +
	"\xf0\x60\x4d\xd7\x5b\xcb\x55\x25\x8f\x72\xad\x65\x4a\x96\xe5\x63\x45\xad\x31\xed\x56\x4b\xa2\x2c\x4d\xf4\x55\x32" +
	"\x12\x23\x80\xbe\x03\x3e\x20\x9b\x78\x1e\xf2\x9d\xf0\x4e\x90\x76\xb6\x36\x3d\xc1\x52\xb3\x09\xde\xe1\x3b\xe4\xa8" +
	"\x17\xc2\xe6\x48\xa4\x74\xbc\x08\xd9\x4e\x4a\xc9\x96\x26\x0b\xb5\x8a\xe4\x3c\xcd\x3f\xca\x24\x6d\xf9\xc7\x91\x7a" +
	"\x39\xb2\x34\xf9\x52\x8d\xd4\x4a\xba\xd2\x31\x76\xd0\xcf\x5e\xc0\xef\x2b\xca\xff\x8d\x28\x29\x4b\x24\x3a\x47\x8a" +
	"\xd1\x05\x73\x88\x56\x07\xbc\x7f\x8e\x49\x44\x6b\x22\xee\xdf\xaf\x99\x60\x2c\xa9\x93\xee\x81\x69\x11\xb9\x45\x8b" +
	"\x1f\xba\xed\xd3\xae\x8d\xe6\x8e\xf7\x97\x95\x2c\xe1\x1b\xdd\x8a\xf8\x8f\xf2\x8d\xc3\x8e\x7d\x7a\xe4\x2c\xf1\x8d" +
	"\xb4\x32\xe6\xa8\x7c\xe7\x31\xba\xee\xcc\xfd\xce\xcb\xe4\x4a\x6c\xf8\xbe\xc9\xb4\x39\x1d\x9e\xa2\x8e\xd3\xd1\xa9" +
	"\x6c\x33\x92\xb0\xab\x2d\xd6\x72\xb6\x2c\xcd\x67\xd3\x3a\xac\xb9\xe3\x3e\x76\x0e\xae\x59\x27\xb1\x86\x81\x02\x28" +
	"\x67\x88\x22\x2c\xa9\x0c\xf6\xe2\x21\xc8\x26\x14\x79\xa1\xc0\x0c\x95\x28\xe9\xa5\xe7\xe2\x9b\x66\x03\xcc\x53\xbb" +
	"\x53\x81\xb3\x14\x7a\x21\x78\x4e\x0d\x98\x69\x07\x7d\x6b\x7f\x3f\x67\x5f\x05\x5f\xc7\x88\x22\xd0\x8f\x72\x71\xf5" +
	"\x2d\x70\x06\x7e\x2a\x86\x48\x4c\xe5\xd6\x4f\x12\x03\x24\x56\xcf\x33\xf0\xd3\x8f\x49\x77\x71\x59\x6a\x1f\x95\xe5" +
	"\x01\x71\xb2\xad\x22\x0b\xab\x2c\xf2\xd9\x4f\x00\x9c\xbf\x7f\x0d\x7e\x94\xa1\x4e\xb0\xab\xd5\x46\xd7\x06\xf6\x1a" +
	"\xca\x16\x80\x7d\x55\x6e\xb4\xad\x86\xf7\x0b\x00\xee\x42\x53\xed\xe1\xf4\x06\xdd\x97\xfa\xa3\xc9\x0a\x24\x40\x14" +
	"\x86\x27\x45\x4d\x7e\x7a\x00\xb2\x91\x51\x70\xd0\x6c\x1f\x77\x9a\x9d\x83\x66\xbb\x79\xda\xde\x9f\xb0\x26\x82\x8c" +
	"\x37\x3b\xfb\x36\xf1\x82\x09\x47\xfb\x12\xd5\xf8\xba\x23\x78\xdd\xc3\xb4\x60\xdd\x24\x64\xca\xf9\xfb\x62\x98\xeb" +
	"\xec\xa8\xe4\xfc\x2e\x3c\x2a\x3b\x98\xd4\x38\x68\xcf\xb4\x6f\xd4\x8c\x10\x93\x51\xb3\xb4\x5b\xad\x16\x78\x01\x96" +
	"\x1a\x14\x35\xe9\x4c\x46\x5d\x62\x59\x27\x0e\xf1\x24\x8a\xf6\x94\xef\x5f\x14\xe4\x5c\x39\xb4\xe1\x00\x2b\x35\x3e" +
	"\x0b\x24\x32\x8c\xe3\x39\x55\x27\x3a\x9c\x21\xa0\x53\x6d\x34\x34\x6f\x24\xd3\x79\x70\xd0\x1c\x1b\x5c\xbd\xc5\x63" +
	"\x94\x64\xe1\x37\x4d\x95\xa1\x95\x6c\xb8\x22\xf5\x58\x3e\x12\x9f\x58\xbd\xea\x96\x4f\x73\x2c\x54\xbe\xed\x6f\xe4" +
	"\x36\x5e\x47\x3f\xf7\x64\xb7\xf1\x6d\xd5\xd2\xad\xe4\xc8\x65\xc4\x5b\xb1\xfc\x19\x89\xb7\x88\x2f\x9e\x9c\x80\xd3" +
	"\x64\x5c\x31\x02\xae\xf2\x0b\x37\x40\xc0\xed\x94\xb4\x79\xcc\x4c\xd2\xa9\xa2\x3e\xc1\xa3\x3d\x90\x01\xaa\x0d\x90" +
	"\x2a\x4a\x34\xca\x7b\xb0\x8b\x7d\xd9\xd2\xc3\x2e\xb6\x09\x45\xaa\x9f\xe9\xd4\x0c\xd4\x33\x44\x40\x34\x29\xa8\x93" +
	"\x9f\xaa\xf4\xcc\xc5\x8c\x5e\xe9\x79\xc8\x27\xbe\xe6\xbc\xf1\x38\xd9\x99\x67\x4e\x41\x9d\x0e\x23\x71\x05\xdb\x90" +
	"\xa1\x6c\x74\xa2\x69\x63\x25\x03\xed\x6e\xe9\xfa\xaa\x34\x93\x29\xe3\x36\x76\x32\x63\x27\x5b\xb5\x9d\xac\x07\x42" +
	"\x6f\xda\xe9\x56\x9d\xa5\x5a\xca\xa2\x97\xae\xd7\x58\x16\xbd\x74\x9d\xf6\xb2\xba\x93\x6b\x4c\x66\x8b\xcc\xa3\xb1" +
	"\x9a\xcd\x63\x35\x2b\x26\xc6\xd9\x68\x5b\xd9\xb3\x56\xb2\x2d\x70\x2a\x2c\x34\x35\xb6\xb2\xf9\x46\xb5\x11\xb6\xb2" +
	"\xca\xbc\x56\x1b\x68\xf4\x5a\xad\x5d\x6b\xda\xc6\xb0\x74\xcb\x56\x35\x6e\x31\xda\xdf\x62\xf9\x7a\xb5\xbf\xeb\xb1" +
	"\x5f\x45\x5c\xf0\x94\x34\xbc\xcf\xda\x13\x65\x5b\x35\xbc\xab\x3a\x08\x19\x39\x56\x2c\x7f\x5a\x72\x2c\x36\x54\x3d" +
	"\x41\x49\x66\x6c\x55\xb3\x7e\xe1\x06\x48\xb2\x52\x6d\xc4\x46\xd8\xaa\xa2\x9b\xfd\x53\xcc\x55\xd3\x2f\x9b\x18\xeb" +
	"\xd4\xda\xad\x53\x5a\x33\x4a\x7a\x76\xd9\x28\xb3\x8e\xb1\x50\x65\x7b\x5a\x82\x85\x6a\x47\x79\x5d\x36\xa5\x63\x36" +
	"\x29\xdb\xb6\xe7\x74\x2c\xcd\xc0\x92\xe8\x2e\xe2\x1a\x55\xec\x55\x0f\xf6\x29\x99\x1d\x05\xbd\x01\x87\xa3\x50\x25" +
	"\xc9\x00\xf1\x4b\x2e\xc1\x86\x18\x23\x8d\x6a\xf6\x15\xf3\x31\xb8\x41\xf7\x67\x55\x51\xcd\xd4\x77\x2f\x9a\xfb\xd1" +
	"\x7a\x5f\x12\x9c\xba\x5e\x0a\xc8\x42\xe6\xb3\x3a\x09\x20\xd7\x3b\x43\xcf\x38\x45\x64\x63\x95\x2b\x0c\x57\x2d\x2e" +
	"\xbc\x35\xeb\x2a\x03\xde\xcb\x79\x2a\x46\xe5\x4b\x5f\x7d\x51\x98\x38\xf0\x51\x97\x2a\xa0\xd6\x12\xd4\x26\x19\x78" +
	"\xcc\x65\xb8\xd0\x84\x9a\xc5\x2a\x7f\x56\xb4\x1d\x36\x21\x6e\x3a\xdd\xa3\xeb\x93\xa3\xae\x7d\xd4\x1c\xb3\x60\xf4" +
	"\x6d\xfa\x0e\xa9\x6b\xb4\x91\x8b\x3b\x73\xbe\xae\xcf\x80\xd1\x09\x5c\xcf\xc7\xa2\x4e\xf8\x64\xf9\x2b\xbf\x98\x14" +
	"\xa0\xd6\x72\xd7\x34\x5b\xd7\x5a\x5f\xeb\xfc\x1a\x41\x20\x7f\x56\x27\x08\x6a\x2d\xfc\xcd\x5c\xe8\x2b\x63\xc2\x72" +
	"\x45\xdd\xd2\x97\x7f\x59\x4e\x88\x5a\x42\xa0\xb4\xf1\xba\x44\xc1\x06\x50\xe0\x19\x0b\x88\xe4\xf7\x25\x65\x7e\xff" +
	"\xfb\x41\xcb\x33\xd9\xdf\x8b\xe3\xd8\xf6\xec\xef\x97\x45\xff\xa9\x38\xf9\xfb\xb1\x03\xbd\x6f\x4e\xfa\xb6\x4c\xe6" +
	"\xf7\xd0\x2b\x4e\x30\x59\x92\xbd\x3c\xa0\xe4\x16\x3b\x88\xb2\xfd\x7b\xe8\xb9\x49\x06\x78\x18\xe0\x48\x41\x14\xc7" +
	"\x6a\x4e\x2a\xf6\xe4\x9f\x4d\xe0\x60\x06\xaf\x5d\xf4\x1a\xb9\x28\x34\xb4\x65\x99\x39\x4e\x76\x9e\xd3\xf3\x0d\x89" +
	"\xeb\x20\xda\x8b\x65\x52\xf4\x54\x5e\x76\x56\x9e\x45\x64\xeb\x25\x13\x14\x40\x3e\xee\x81\x97\xb7\x90\xbe\x74\xf1" +
	"\xf5\xcb\x51\x98\x31\xfe\x65\x32\x0c\xf6\x52\xe9\x80\x8e\xde\x3a\x69\x98\x69\xb1\x1c\x7b\x60\x88\x5d\xf4\x7f\x01" +
	"\x00\x00\xff\xff\x39\x9b\x45\xd4\x36\x80\x01\x00")

func bindataConfigMapDashboardsconfigyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataConfigMapDashboardsconfigyaml,
		"ConfigMap/dashboards-config.yaml",
	)
}



func bindataConfigMapDashboardsconfigyaml() (*asset, error) {
	bytes, err := bindataConfigMapDashboardsconfigyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ConfigMap/dashboards-config.yaml",
		size: 98358,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556071759, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataConfigMapGrafanadatasourcesyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4f\x6f\xdb\x3e\x0c\xbd\xe7\x53\xf0\xa7\x16\xc8\xa5\x89\x9a\xcb" +
	"\x0f\xad\x80\x1d\xd6\xf5\xb0\x0d\xd8\x1f\x60\x40\x2f\xc3\xb0\x32\x32\x1d\x6b\xb1\x25\x83\x94\xd3\x66\x5d\xbf\xfb" +
	"\x20\xb9\x4d\xb2\xc6\xc8\xb0\xad\x3e\x24\x96\xf8\xde\xa3\x48\x3e\x0b\x5b\x77\x45\x2c\x2e\x78\x03\xab\xd9\x68\xe9" +
	"\x7c\x61\xe0\x55\xf0\xa5\x5b\xbc\xc3\x76\xd4\x50\xc4\x02\x23\x9a\x11\x80\xc7\x86\x0c\x2c\x18\x4b\xf4\x38\x49\xbb" +
	"\x12\x3a\xb6\x24\x0f\x31\x69\xd1\x92\x81\x92\x0a\x62\x8c\x81\xd1\x8d\x1e\xa9\x0b\x8a\x31\x2c\xc9\x4f\xa5\x32\xf0" +
	"\x63\x32\x02\x00\x38\xfa\x4f\x77\xc2\x7a\xee\xbc\x26\xbf\x02\xa9\xfa\xdd\x9b\xca\xd5\xd4\xbf\x16\x21\xff\xaf\xb0" +
	"\xee\xe8\xc5\xb5\xc5\x08\x7a\x85\xac\xb9\xf3\x5a\xc8\x32\x45\xd1\xcb\x6e\x4e\xec\x29\x92\x4c\x5d\xd0\x42\xbc\x72" +
	"\x96\xd0\xda\xd0\xf9\xa8\x73\xca\xeb\x1d\x0d\x75\x41\xc8\xc4\x70\x7c\x97\xd7\xf7\x2a\xc7\xc8\x56\x01\x8e\xf3\x4e" +
	"\x5e\xdb\x16\x60\xa7\x3a\xdd\x72\x68\x28\x56\xd4\xc9\x74\x8d\x4d\x0d\xa0\x29\x5a\xfd\xd0\x87\x14\x5d\xb9\xd4\x3f" +
	"\xe7\x17\xfa\x00\x2d\x4b\x0b\x15\x30\x71\x30\x16\xdd\x9f\x44\x8f\x55\x9f\x58\x8d\xf5\x62\xfc\x0f\xc2\xb9\x39\x7f" +
	"\xcd\x3e\x2a\x82\x4f\xb5\x3f\x89\x6d\x46\x75\x97\x7f\xd3\xa3\xb6\x7e\x51\x06\x66\x27\xdb\xc0\x4e\x0e\x65\xe0\xf3" +
	"\x26\xf0\x2b\x7f\x03\x4f\x86\x51\x06\xd4\x1b\x5f\xd6\xdd\xed\xe5\x85\x3a\x79\x0a\x01\xd8\x67\xc5\x75\x9b\x59\x2e" +
	"\xb3\x8a\xb9\x3a\xd9\xc7\xa0\xb5\x24\xe9\x0c\xaa\xe5\x70\xbb\x1e\x82\x74\x5c\xa7\x78\x15\x63\x2b\x46\x6b\xac\xb1" +
	"\xa1\x02\x27\x8f\xaa\xd3\x1d\x0b\x4f\x65\x65\xcd\xd9\xe9\xd9\xff\x43\x3a\x2d\x8a\xdc\x04\x2e\x92\x18\x16\x8d\xf3" +
	"\x69\x63\x30\xa1\x10\x6f\x40\x43\x80\xd4\xbd\x39\x4a\x2e\xee\xab\xf3\x91\xd8\x63\x3d\x04\x9c\xa3\x38\xfb\xb2\x8b" +
	"\x95\x32\x50\x62\x2d\x34\x80\x71\x72\x49\x25\x76\x75\x3c\x80\xf9\x26\xc1\x5f\x62\x44\x65\x06\xa6\x93\x3a\x5d\xcb" +
	"\xa7\xa5\x6b\xaf\x88\x5d\xb9\x56\x06\x22\x3f\x7c\x1d\xbb\xcf\xfd\x80\x30\x13\x16\x1f\x7c\xbd\x1e\xce\xfd\x84\x71" +
	"\xc0\x18\x1f\x37\x5e\x1c\x6a\xc3\xa3\x11\xda\x83\xa8\x3f\xb7\xc2\x56\x6f\xb2\x3c\x93\x69\x68\xc9\x4b\xe5\xca\x38" +
	"\x69\x82\x77\x31\xb0\xf3\x8b\xec\x88\xf3\xd3\xf3\xd9\x73\x8c\x27\xb5\xf5\x99\xa6\xb3\x2f\x03\x7d\x5d\xaf\x09\x0b" +
	"\xe2\xf7\xd8\xd0\x2c\x95\x9a\x4e\x17\xd8\x7d\xc7\x98\x3e\xe2\x7d\xd6\xd0\x50\x85\x6c\xc7\xf4\xf6\x37\xa7\xda\x26" +
	"\xbb\x4a\x77\x5a\xce\xd6\xdf\x73\xea\x39\xac\xb3\x59\x7d\xc9\x6f\xf7\xfd\x62\x34\xca\x17\xc5\xcf\x00\x00\x00\xff" +
	"\xff\x2c\xa5\x46\xcd\xc8\x06\x00\x00")

func bindataConfigMapGrafanadatasourcesyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataConfigMapGrafanadatasourcesyaml,
		"ConfigMap/grafana-datasources.yaml",
	)
}



func bindataConfigMapGrafanadatasourcesyaml() (*asset, error) {
	bytes, err := bindataConfigMapGrafanadatasourcesyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ConfigMap/grafana-datasources.yaml",
		size: 1736,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556071759, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimAdmissioncontrollerlogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x3b\x4e\x04\x41\x0c\x44\xf3\x3e\x85\x2f\x30\x48\x10\x76\x4a\x40" +
	"\x84\x40\x04\x43\x6c\xb9\x0b\x64\x6d\xff\xd6\xf6\xcc\xf9\x57\x2d\xcd\x86\xaf\xf4\x5e\xf1\xd4\x1d\xe6\x3a\x7a\xa6" +
	"\xf3\x35\xdd\xb4\x97\x4c\xdf\x6b\xf1\x40\x8f\x7d\xd4\xa3\xe1\xbd\xb2\xb6\xd4\x10\x5c\x38\x38\x27\xa2\xce\x0d\x99" +
	"\xb8\x34\xf5\xd5\x6e\x32\x7a\xd8\xa8\x15\xf6\x32\x4f\xb9\x04\x9f\x2c\xc8\xf4\x87\x02\xe3\x18\xc6\x9a\x7c\x42\x56" +
	"\xcf\x22\x70\xff\x1c\x05\xbe\x90\x68\xa3\x1f\x70\xf9\x35\x0d\x7c\x75\x41\x22\x32\xf8\x38\x4c\x9e\x82\xe1\x7e\xc0" +
	"\xe3\x22\x22\x5f\x87\xff\xc8\xf4\xf6\xa1\xf4\x08\x00\x00\xff\xff\x30\x6f\xb1\xba\xc6\x00\x00\x00")

func bindataPersistentVolumeClaimAdmissioncontrollerlogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimAdmissioncontrollerlogyaml,
		"PersistentVolumeClaim/admission-controller-log.yaml",
	)
}



func bindataPersistentVolumeClaimAdmissioncontrollerlogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimAdmissioncontrollerlogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/admission-controller-log.yaml",
		size: 198,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555580218, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimAlamedaailogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x3b\x0e\xc2\x30\x10\x44\x7b\x9f\x62\x2f\x10\x24\x28\xdd\x52\x50" +
	"\x21\x10\x45\xa8\x47\xf6\x80\x56\xc4\x1f\xbc\x4e\xce\x8f\x2c\x85\xf2\x3d\xcd\x3c\x54\x9d\xd9\x4c\x4b\xf6\xb2\x1d" +
	"\xdd\x47\x73\xf4\x72\x1f\xc6\x3a\x73\x9f\xcb\xb2\x26\x9e\x17\x68\x72\x89\x1d\x11\x1d\xde\x89\x64\x24\x7a\xc1\x82" +
	"\xc4\x88\x09\x7a\xa8\x5b\xd8\xb5\x55\x04\x7a\x79\x31\xb2\xa1\x97\x06\x75\x56\x19\xc6\x0b\x21\xd0\xec\x5a\x22\x6d" +
	"\xa0\xc8\x24\x0f\x22\x3e\x9b\x76\xde\x72\xa0\x13\x69\xb4\xb2\xb6\xf0\x1f\x34\x7e\x57\x5a\xdf\x49\xc4\x46\xf0\x4d" +
	"\x2f\xa7\x8b\xca\x2f\x00\x00\xff\xff\xe1\xcd\x6c\xef\xbc\x00\x00\x00")

func bindataPersistentVolumeClaimAlamedaailogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimAlamedaailogyaml,
		"PersistentVolumeClaim/alameda-ai-log.yaml",
	)
}



func bindataPersistentVolumeClaimAlamedaailogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimAlamedaailogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-ai-log.yaml",
		size: 188,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555580218, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimAlamedadatahublogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x3b\x0e\x02\x21\x14\x45\x7b\x56\x71\x37\x30\x26\x5a\xd2\x5a\x58" +
	"\x19\x8d\xc5\x58\x3f\xe1\xaa\xc4\xe1\x23\x0f\x66\xfd\x86\x64\x2c\xcf\xb9\x1f\x29\x61\x66\xd5\x90\x93\xc5\xba\x37" +
	"\x9f\x90\xbc\xc5\x75\x18\x6d\x4c\x6d\xce\x4b\x8f\x3c\x2e\x12\xa2\x89\x6c\xe2\xa5\x89\x35\x40\x92\x48\x0b\x59\x24" +
	"\xd2\xcb\x34\xec\xbb\x3f\x76\x65\x75\x5b\xa6\x45\x1c\x2d\x9e\xf4\xac\xd2\x72\x95\x60\xb4\xd0\x8d\xa9\x38\x47\xd5" +
	"\x73\xf6\xd4\x81\xc0\x84\x1b\xc5\xdf\x6b\x68\xbc\x24\x47\x03\x54\x6a\xee\xd5\xfd\x0b\x95\xdf\x4e\x6d\x1b\x01\x3a" +
	"\x0e\x5f\xb4\x38\x9c\x02\x7e\x01\x00\x00\xff\xff\xab\x25\x59\x81\xc1\x00\x00\x00")

func bindataPersistentVolumeClaimAlamedadatahublogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimAlamedadatahublogyaml,
		"PersistentVolumeClaim/alameda-datahub-log.yaml",
	)
}



func bindataPersistentVolumeClaimAlamedadatahublogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimAlamedadatahublogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-datahub-log.yaml",
		size: 193,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555580218, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimAlamedaevictionerlogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\xbb\x6e\xc3\x30\x0c\x45\x77\x7d\x05\x7f\xc0\x05\xda\x51\x6b\x87" +
	"\x4e\x45\x8b\x0c\xce\x4c\x50\x37\x01\x11\xeb\x11\x92\xf6\xf7\x07\x02\x9c\xf1\xdc\xc7\xe1\xa1\x2b\xcc\xb5\xb7\x4c" +
	"\xc7\x67\x7a\x68\x2b\x99\xfe\x67\xe2\x81\x16\x6b\xdf\xf6\x8a\xef\x8d\xb5\xa6\x8a\xe0\xc2\xc1\x39\x11\x35\xae\xc8" +
	"\xc4\x1b\x57\x14\x5e\x70\xa8\x84\xf6\x06\xfb\x18\x87\x9c\xb5\x0f\x16\x64\xba\xa1\xc0\x38\xba\xb1\x26\x1f\x90\xf9" +
	"\x66\x11\xb8\xff\xf6\x02\x9f\x48\xb4\xd0\x05\x5c\xae\xa6\x81\xbf\x26\x48\x44\x06\xef\xbb\xc9\x7b\x60\x78\xee\xf0" +
	"\x38\x89\xc8\xa7\xf0\x8e\x4c\x5f\x3f\x4a\xaf\x00\x00\x00\xff\xff\x8d\xd2\xa5\x96\xc4\x00\x00\x00")

func bindataPersistentVolumeClaimAlamedaevictionerlogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimAlamedaevictionerlogyaml,
		"PersistentVolumeClaim/alameda-evictioner-log.yaml",
	)
}



func bindataPersistentVolumeClaimAlamedaevictionerlogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimAlamedaevictionerlogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-evictioner-log.yaml",
		size: 196,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555580218, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimAlamedaoperatorlogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\xbd\xae\xc2\x30\x14\x83\xf7\x3c\x85\x5f\xa0\x57\xba\x8c\x59\x19" +
	"\x98\x10\x88\xa1\xcc\x47\x89\x41\x11\xcd\x0f\x39\xa7\x7d\x7e\x14\x51\xc6\xcf\x9f\x6d\x69\x69\x66\xd7\x54\x8b\xc7" +
	"\xf6\xef\x5e\xa9\x44\x8f\xeb\x48\xd4\x58\x6c\xae\xcb\x9a\x79\x5c\x24\x65\x97\x69\x12\xc5\xc4\x3b\xa0\x48\xa6\x87" +
	"\x2c\x92\x19\x65\xaa\x8d\x5d\xac\xf6\xbf\xb6\x85\x5d\x6a\x93\x40\x8f\x07\xe3\x57\x49\x72\xda\x18\xc6\x56\x42\xa0" +
	"\xea\xb9\x46\xea\x40\x60\xc2\x8d\x12\xef\x3d\x19\x2f\x25\xd0\x01\x9d\x5a\xd7\x1e\x7e\x85\xce\xf7\x4a\xb5\x9d\x00" +
	"\x1d\x87\x4f\x7a\x1c\x4e\x09\x9f\x00\x00\x00\xff\xff\x85\x2e\x8c\x16\xc2\x00\x00\x00")

func bindataPersistentVolumeClaimAlamedaoperatorlogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimAlamedaoperatorlogyaml,
		"PersistentVolumeClaim/alameda-operator-log.yaml",
	)
}



func bindataPersistentVolumeClaimAlamedaoperatorlogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimAlamedaoperatorlogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-operator-log.yaml",
		size: 194,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555580218, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimMyalamedagrafanaPVCyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x3b\x6a\xc4\x30\x14\x45\x7b\xad\xe2\x6d\xc0\x86\xa4\x54\x9b\x22" +
	"\x55\x48\x48\xe1\xa9\x2f\xd2\xb5\x11\x63\x7d\xe6\x3d\xd9\x30\xbb\x1f\x04\x9e\xf2\xdc\xcf\x41\x4b\x0b\xd5\x52\x2d" +
	"\x5e\xce\x0f\x77\x4f\x25\x7a\xf9\x1b\x89\x75\x96\xbe\xd4\xfd\xc8\xfc\xda\x91\xb2\xcb\xec\x88\xe8\xf0\x4e\xa4\x20" +
	"\xd3\x4b\x7e\x4e\xd8\x91\x19\x31\x6f\x8a\x15\x05\x73\x3b\xc3\x55\x5b\x43\xa0\x97\x95\x91\x8a\x5e\x15\xc9\x59\x63" +
	"\x18\x6f\x84\x40\xb3\x9f\x1a\x69\x03\x45\x26\xf9\x27\xe2\x4d\x53\xe7\x6f\x09\x74\x22\x4a\xab\x87\x86\xf7\x40\xf9" +
	"\x38\x68\xfd\x22\x11\x1b\xc2\x8d\x5e\x3e\xbf\x93\xbc\x02\x00\x00\xff\xff\x05\x22\x1e\x79\xc4\x00\x00\x00")

func bindataPersistentVolumeClaimMyalamedagrafanaPVCyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimMyalamedagrafanaPVCyaml,
		"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml",
	)
}



func bindataPersistentVolumeClaimMyalamedagrafanaPVCyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimMyalamedagrafanaPVCyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/my-alamedagrafanaPVC.yaml",
		size: 196,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554175225, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimMyalamedainfluxdbPVCyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\xbb\x6e\xc3\x30\x0c\x45\x77\x7d\x05\x37\x4f\x36\xea\x55\x6b\x87" +
	"\x4e\x45\x8b\x0e\xee\xcc\x48\xd7\x01\x11\xbd\x22\x4a\x46\xf2\xf7\x81\x00\x67\x3c\xf7\x71\xb8\xc8\x86\xaa\x92\x93" +
	"\xa5\x63\x35\x37\x49\xde\xd2\xef\x48\xb4\x21\xb5\x2d\x87\x1e\xf1\x19\x58\xa2\x89\x68\xec\xb9\xb1\x35\x44\x89\x23" +
	"\x2c\xc5\xe7\xcc\x81\x23\x3c\x2f\x92\xf6\xd0\x1f\xfe\xb2\x94\xc3\x9d\xbd\x16\x76\xb0\xb4\xc3\xa3\x72\xcb\x95\xc5" +
	"\x68\x81\x1b\x77\x76\x0e\xaa\xdf\xd9\x43\x07\x12\xcd\xf4\x07\xf6\xff\x55\x1a\x7e\x92\x83\x21\xaa\xd0\xdc\xab\x7b" +
	"\x0f\x2a\xee\x1d\xda\x4e\x22\xd2\x21\xbc\xc2\xd2\xb4\x7e\x7c\xc9\xf4\x0a\x00\x00\xff\xff\x1f\xa2\x03\x61\xc7\x00" +
	"\x00\x00")

func bindataPersistentVolumeClaimMyalamedainfluxdbPVCyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimMyalamedainfluxdbPVCyaml,
		"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml",
	)
}



func bindataPersistentVolumeClaimMyalamedainfluxdbPVCyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimMyalamedainfluxdbPVCyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml",
		size: 199,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554175225, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAdmissioncontrollerSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x41\xaa\xc3\x30\x0c\x44\xf7\x3e\xc5\x5c\x20\x90\xcf\xcf\xa2\xf8" +
	"\x14\x85\x42\xf7\xaa\x3d\x2d\xa6\x8e\x6d\x24\x91\xf3\x97\xf8\x00\xed\xee\x21\x31\xf3\x46\x46\xb9\x53\xad\xf4\x16" +
	"\x71\xfc\x85\x77\x69\x39\xe2\x46\x3d\x4a\x62\xd8\xe9\x92\xc5\x25\x06\xa0\xca\x83\xd5\x4e\x02\x64\x8c\x08\xc9\x7b" +
	"\xb1\x33\xb8\xa4\xde\x5c\x7b\xad\xd4\x00\x34\xd9\xf9\xf5\x69\x43\x12\x23\x9e\xcc\x54\xf1\xae\x52\x82\x0d\xa6\xb3" +
	"\x79\x74\xf5\xa9\x58\x26\x46\x6c\xdb\xff\x14\xba\xe8\x8b\x7e\x9d\xb7\xcb\xba\xae\x01\x30\x56\x26\xef\xfa\x63\xd1" +
	"\x27\x00\x00\xff\xff\xf4\xe7\x31\xb4\xe0\x00\x00\x00")

func bindataServiceAdmissioncontrollerSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAdmissioncontrollerSVyaml,
		"Service/admission-controllerSV.yaml",
	)
}



func bindataServiceAdmissioncontrollerSVyaml() (*asset, error) {
	bytes, err := bindataServiceAdmissioncontrollerSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/admission-controllerSV.yaml",
		size: 224,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554685885, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAlamedadatahubSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\x0e\xc3\x20\x14\x43\x77\x4e\xe1\x0b\x44\x4a\x87\x2c\x5c\xa3" +
	"\x52\x77\x07\xdc\x16\x95\x04\xf4\xa1\x39\x7f\x45\xd4\x35\x9b\x65\x5b\xcf\x66\x4d\x0f\x59\x4b\x65\xf7\x38\x6e\xee" +
	"\x93\xf6\xe8\x71\x97\x1d\x29\xc8\x6d\xea\x8c\xec\xf4\x0e\xc8\x5c\x95\xdb\x50\x00\x6b\xf5\x60\xe6\xa6\xc8\x69\x14" +
	"\xde\xdf\xd5\x01\x3b\x37\x5d\xf9\xad\x32\xc8\xe3\xa9\x28\x63\x2f\xc6\xe4\x5a\x55\x18\xbc\x5a\xac\x9f\xe0\xe9\x4f" +
	"\x78\x59\x0d\xe7\xce\x48\x3c\x96\x79\x5e\x66\x07\x34\x65\x85\x5e\xec\xfa\xc3\x2f\x00\x00\xff\xff\x17\x03\xde\x3c" +
	"\xcd\x00\x00\x00")

func bindataServiceAlamedadatahubSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAlamedadatahubSVyaml,
		"Service/alameda-datahubSV.yaml",
	)
}



func bindataServiceAlamedadatahubSVyaml() (*asset, error) {
	bytes, err := bindataServiceAlamedadatahubSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/alameda-datahubSV.yaml",
		size: 205,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554175225, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAlamedagrafanaSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\xaa\xc3\x30\x10\x44\x7b\x9d\x62\x2f\x60\xf0\xe7\x77\x3a\x45" +
	"\x20\x90\x7e\x22\x8d\x8d\x88\x2c\x2d\xab\xc5\xe7\x0f\x56\x95\xc6\xdd\xe3\x15\x6f\x06\x5a\x5e\xb4\x51\x7a\x8b\x72" +
	"\xfe\x85\x4f\x69\x39\xca\x93\x76\x96\xc4\x70\xd0\x91\xe1\x88\x41\xa4\xe2\xcd\x3a\x2e\x12\x81\x6a\x14\x54\x1c\xcc" +
	"\x58\x76\xc3\x86\x86\x20\xd2\x70\xf0\xce\x0f\x45\x62\x94\x8d\x99\x06\xef\x86\x12\x86\x32\x5d\x3d\xed\xe6\x33\xbc" +
	"\x4c\x8c\xf2\xbf\xae\xeb\xdc\x71\xd8\x4e\x7f\xfc\xca\xc1\xca\xe4\xdd\xee\x8f\xc8\x37\x00\x00\xff\xff\x1d\x9d\x3e" +
	"\xc2\xd3\x00\x00\x00")

func bindataServiceAlamedagrafanaSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAlamedagrafanaSVyaml,
		"Service/alameda-grafanaSV.yaml",
	)
}



func bindataServiceAlamedagrafanaSVyaml() (*asset, error) {
	bytes, err := bindataServiceAlamedagrafanaSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/alameda-grafanaSV.yaml",
		size: 211,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554175225, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAlamedainfluxdbSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x41\x0a\xc2\x30\x14\x44\xf7\x39\xc5\xbf\x40\x41\x37\x52\x72\x0a" +
	"\x41\x70\x3f\x4d\xa6\x12\x4c\x93\xf0\xf3\x2d\x1e\x5f\x9a\x95\x1b\xdd\x3d\x66\xe0\xcd\xa0\xa5\x3b\xb5\xa7\x5a\xbc" +
	"\xec\x67\xf7\x4c\x25\x7a\xb9\x51\xf7\x14\xe8\x36\x1a\x22\x0c\xde\x89\x64\x2c\xcc\xfd\x20\x11\xb4\xe6\x05\x19\x1b" +
	"\x23\xa6\x54\xd6\xfc\x7a\xc7\xc5\x89\x14\x6c\xfc\x59\xf4\x86\x40\x2f\x2b\x23\x15\x56\x15\xc9\xf5\xc6\x70\x18\x5b" +
	"\x55\x1b\xea\x69\xa0\x97\xf9\x34\x5f\xc6\x92\x41\x1f\xb4\xeb\x77\xd8\x99\x19\xac\xea\x9f\x2b\x9f\x00\x00\x00\xff" +
	"\xff\x1e\x34\xee\x61\xd5\x00\x00\x00")

func bindataServiceAlamedainfluxdbSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAlamedainfluxdbSVyaml,
		"Service/alameda-influxdbSV.yaml",
	)
}



func bindataServiceAlamedainfluxdbSVyaml() (*asset, error) {
	bytes, err := bindataServiceAlamedainfluxdbSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/alameda-influxdbSV.yaml",
		size: 213,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554261951, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAdmissioncontrollerDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xcf\x8e\xdb\x36\x10\xc6\xef\x7e\x8a\x41\x2e\x39\x49\x76\xd0\x6e" +
	"\x8a\xf2\xa6\x58\x0a\xba\xa8\xed\x15\x6c\x37\x40\x4e\xc6\x84\x1a\x59\x44\xf8\x2f\x24\xa5\x40\x28\xfa\xee\x85\x6c" +
	"\xcb\x91\xd6\xf6\x7a\x73\x88\x4e\xc2\x50\xf3\xfb\xbe\x19\x92\x23\xb4\xe2\x13\x39\x2f\x8c\x66\x80\xd6\xfa\x69\xf3" +
	"\x6e\xf2\x55\xe8\x82\x41\x4a\x56\x9a\x56\x91\x0e\x13\x45\x01\x0b\x0c\xc8\x26\x00\x1a\x15\x31\xc0\x42\x09\xdf\x65" +
	"\x45\xdc\xe8\xe0\x8c\x94\xe4\x4e\x8b\xde\x22\x27\x06\x25\x15\xe4\x30\x18\x87\x62\x02\x20\xf1\x0b\x49\xdf\xe5\x43" +
	"\x27\xc3\x00\x25\x2a\x2a\xf0\x10\xe0\x46\x59\xa3\x49\x87\x9b\x5c\xd4\xda\x04\x0c\xc2\xe8\x13\xa3\x20\xcf\x9d\xb0" +
	"\xe1\xe0\x3b\xa5\x52\x68\xf2\x50\x99\xef\x10\x0c\x14\x07\xe3\x10\x2a\xba\x85\x03\x08\xa4\xac\xc4\x40\x31\x4a\x5b" +
	"\x61\x6c\x2c\x69\x5f\x89\x32\xc4\xc2\x4c\xbf\xa3\x08\x51\x69\x5c\xe4\x08\x8b\x96\xc1\xdb\xe0\x6a\x7a\x3b\xf1\x96" +
	"\x78\x27\xee\xc8\x4a\xc1\xd1\x33\x78\x37\x01\xf0\x24\x89\x07\xe3\x8e\xb6\x14\x06\x5e\x2d\x06\xb5\xf6\xd5\x5e\xf7" +
	"\xd1\xbb\x38\x25\x0f\xba\xdc\x3d\x2f\x76\xba\x7b\xe4\x48\xe8\x65\x29\x80\xde\xff\xb1\xe3\x3a\xa0\xd0\xe4\xce\xd9" +
	"\xd1\x7d\x39\x00\xa1\x70\x4f\x0c\xbe\xd5\xd8\x76\x8d\xb2\xce\xd8\x8a\x82\x0f\xc6\x4d\x4f\xfb\x19\xfd\xc8\x77\x15" +
	"\x49\xd6\xcc\xe2\xdf\xe2\xf7\x63\x40\x5e\x4b\x99\x1b\x29\x78\xcb\xe0\xb1\x5c\x99\x90\x3b\xf2\xdd\x31\xeb\xbf\x72" +
	"\xe4\x4d\xed\x38\x0d\x4a\x03\x90\x42\x89\x30\x8a\x00\x70\x5b\x33\x78\x3f\x53\xa3\xa0\x22\x65\x5c\xcb\xe0\xcf\xd9" +
	"\x52\x0c\x16\x1c\x7d\xab\xc9\x5f\x25\xfc\xfe\x70\x9d\xf0\xc7\xc3\x80\x40\xba\xf9\x91\xda\x77\x6b\x95\x2c\xb3\x4d" +
	"\x9e\xcc\xb3\x5d\xf7\x36\x80\x34\x28\x6b\xfa\xe8\x8c\x1a\xcb\x95\x82\x64\xb1\xa6\x72\x1c\x3d\xc5\x73\x0c\x15\x3b" +
	"\x9f\x82\xf8\x7c\x97\x00\xe0\x42\x38\x7f\x4a\x7f\x91\xe4\x85\x54\xb2\x48\x96\x59\x9a\xec\x92\x74\x39\xdf\x2e\x76" +
	"\x69\x96\x2f\x9e\x3e\x67\x47\xf9\x43\xed\xbf\xa8\xec\xbb\x46\x92\x6d\xf2\xd7\x3f\x1f\x76\x49\x9a\xae\xb3\xcd\xe6" +
	"\xb9\x0b\x06\x6f\xfa\x33\xd9\x71\xab\xfa\x4b\x3c\x18\x49\xb1\x6f\x38\x7b\x98\xcd\x1e\x66\x6f\xee\xe9\x64\xab\xe4" +
	"\xc3\xe2\xa2\xc8\xf3\x58\xb8\x93\xbd\x5d\x6c\x76\xf3\x6c\xbd\xdd\x7d\x7c\xbc\x06\x99\x52\xe0\xd3\x20\x7d\xc4\xc9" +
	"\x05\xdf\xbd\xc5\xdc\x85\xd7\x40\xf3\xf5\xe3\xa7\x64\x9b\xed\xfe\xce\x3e\xbf\x9e\xfd\x95\xda\x7b\xec\x79\xf2\x13" +
	"\x7e\x39\x8e\xec\x36\x46\xd6\x8a\x96\xa6\xd6\xc3\x7b\x16\x81\xea\x22\xc7\x7d\x1e\x03\x06\x02\x47\x33\xd7\x56\xba" +
	"\x31\xfc\xa4\x65\xcb\xa0\x44\xe9\xe9\x06\xb7\x41\x37\x95\x66\x3f\x1d\xfe\x58\x86\xe4\xab\x93\x2d\x92\x66\x1f\x75" +
	"\xf3\x0b\xf7\x3d\xf7\x58\x83\x67\xf0\x6c\x30\xbe\x36\x1f\x80\x94\x0d\x6d\x2a\x1c\x83\x7f\xff\x7b\x06\xb9\x2c\xcf" +
	"\x13\x77\x14\x86\x17\xe3\x18\x59\xdd\x9c\xc6\x51\x90\x7d\xba\x27\xd7\x08\x4e\x09\xe7\x5d\x23\x5e\x1c\xde\xe3\x4f" +
	"\x6f\xd3\xff\x0f\x00\x00\xff\xff\xf2\x2d\x0f\x69\x10\x08\x00\x00")

func bindataDeploymentAdmissioncontrollerDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAdmissioncontrollerDMyaml,
		"Deployment/admission-controllerDM.yaml",
	)
}



func bindataDeploymentAdmissioncontrollerDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAdmissioncontrollerDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/admission-controllerDM.yaml",
		size: 2064,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556175236, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedaaiDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcd\x6e\xdb\x30\x10\x84\xef\x7e\x8a\x45\xee\xb6\x95\x34\xee\x81" +
	"\x37\x17\x0a\xd0\x02\x4d\x62\x38\x69\xaf\xc5\x86\x5a\x5b\x44\x49\x2e\x43\xae\x54\x18\x45\xdf\xbd\xa0\x64\x3b\x92" +
	"\xed\xfe\xf0\xb8\xe4\x7c\x1c\x0d\x47\x18\xcc\x57\x8a\xc9\xb0\x57\x80\x21\xa4\x79\x7b\x3d\xf9\x6e\x7c\xa5\xa0\xa4" +
	"\x60\x79\xe7\xc8\xcb\xc4\x91\x60\x85\x82\x6a\x02\xe0\xd1\x91\x02\xb4\xe8\xa8\xc2\x29\x9a\xfd\x28\x05\xd4\xa4\x60" +
	"\x43\x15\x45\x14\x8e\xdd\x86\xc5\x17\xb2\x29\xab\x20\xc3\x8f\xb2\x6e\xa0\xd9\x05\xf6\xe4\xe5\x84\x86\xde\xb3\xa0" +
	"\x18\xf6\x7b\x65\x45\x49\x47\x13\xa4\xf3\x58\xd2\xc6\x78\x4a\x50\xf3\x0f\x10\x86\xaa\x33\x09\x52\x53\xbe\xc0\x1a" +
	"\xdd\x09\x8f\x40\x0e\xbd\x9b\x49\x0a\xa4\x33\x2d\x52\x77\x28\x29\xb8\x9e\x00\x24\xb2\xa4\x85\x63\x7f\x8f\x43\xd1" +
	"\xf5\xe7\x81\xe5\xb1\xe9\xde\x9d\x90\x0b\x16\x85\xf6\x92\x41\x30\x79\x5d\x08\x27\x2f\x3b\x82\x5e\xc2\x02\x1c\x1c" +
	"\xf6\xd1\x78\x41\xe3\x29\x1e\x35\xd3\x33\xf4\x94\xfc\xd6\x78\x3a\x32\x8d\xc3\x2d\x29\x78\x6d\x70\x37\x33\x3c\x0f" +
	"\x91\x43\x4d\x92\x84\xe3\xfc\x4d\xa4\xda\x62\xf6\x6e\xf6\x7e\x2c\x5a\x35\xd6\xae\xd8\x1a\xbd\x53\xf0\x69\xf3\xc0" +
	"\xb2\x8a\x94\xf2\xb3\x1f\x4e\x45\x4a\xdc\x44\x4d\x83\x2f\x00\xb0\xc6\x19\x19\x4d\x00\x74\x68\x14\xdc\x16\x45\xe1" +
	"\x46\x63\x47\x8e\xe3\x4e\xc1\xed\xa2\xb8\x37\x83\x9d\x48\xaf\x0d\xa5\x8b\x90\x9b\x3f\x42\x6e\x46\x10\xf2\xed\x9b" +
	"\xfa\x10\xd2\xe3\xea\x6e\xbd\x7c\x7e\x5c\x7f\x5b\x96\xe5\xfa\xee\xe9\x69\xc0\x69\xd1\x36\xa4\xe0\xea\xb4\x20\xb3" +
	"\x41\x71\x67\xa9\xd5\x6a\x51\x14\x8b\xe2\xea\x0c\x5d\x2e\x9f\x97\x1f\xbf\x7c\xf8\x0f\x72\xae\x45\xdd\xbc\xfc\x0b" +
	"\xdc\xb2\x6d\x1c\xdd\x73\xe3\xc7\x39\x4c\xc1\xe5\xd9\x0a\xa5\x56\x30\x6f\x31\xce\x2d\x6f\x47\x81\x9c\x15\xc2\xf2" +
	"\x76\x9a\xdf\x1b\xb7\x87\x56\xf4\xf0\x74\x9e\xd0\x5f\x55\x5d\xae\x2e\xc8\xae\x34\x51\xc1\xcf\x5f\xfb\x71\xa2\xd8" +
	"\x1a\x4d\x4b\xad\xb3\xb1\x0b\x2d\x1f\x1f\x78\x38\xfd\x15\x7e\x07\x00\x00\xff\xff\x55\x5e\xfb\x52\x6a\x04\x00\x00" +
	"")

func bindataDeploymentAlamedaaiDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedaaiDMyaml,
		"Deployment/alameda-aiDM.yaml",
	)
}



func bindataDeploymentAlamedaaiDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedaaiDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-aiDM.yaml",
		size: 1130,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555580218, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedadatahubDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xda\x4c\x10\xbe\xf3\x2b\xe6\x96\x93\xc1\xe8\x55\xa2\x64" +
	"\x6f\x8e\xcc\xab\x44\x02\x82\x20\xb4\xbd\xa1\xc9\x7a\xc0\xab\xec\x57\x76\xc7\x4e\x51\xd5\xff\x5e\x99\x00\xb1\x13" +
	"\x68\xb3\xc7\x87\x7d\x3e\xf6\x61\xc6\xe8\xd5\x37\x0a\x51\x39\x2b\x00\xbd\x8f\x83\x7a\xd8\x7b\x56\xb6\x10\x90\x93" +
	"\xd7\x6e\x6b\xc8\x72\xcf\x10\x63\x81\x8c\xa2\x07\x60\xd1\x90\x00\xd4\x68\xa8\xc0\xa4\x41\xcb\xea\x69\x8f\x47\x8f" +
	"\x92\x04\xac\xa9\xa0\x80\xec\x02\xaa\x1e\x80\xc6\x27\xd2\xb1\xa1\x42\xe3\x70\xe4\xee\x00\xe9\x8c\x77\x96\x2c\x9f" +
	"\x92\x44\x6b\x1d\x23\x2b\x67\xf7\xf4\x82\xa2\x0c\xca\xf3\x2e\x6d\x4e\x6b\x65\x29\x42\xe9\x5e\x81\x1d\x14\xbb\xb8" +
	"\xc0\x25\x35\x2e\x5a\xc9\x1d\xf1\x84\x2a\x00\x93\xf1\x1a\x99\xfa\xa8\x7d\x89\x7d\xe7\xc9\xc6\x52\xad\xb9\xaf\xdc" +
	"\xe0\x15\x15\x27\x6b\x17\x92\x40\x58\x6c\x05\x5c\x70\xa8\xe8\xa2\x17\x3d\xc9\x26\x43\xa0\x9d\x74\x14\x30\xec\x01" +
	"\x44\xd2\x24\xd9\x85\xb7\x74\x06\x59\x96\xe3\xd6\x6b\xbb\xef\x6d\x45\x38\x04\xd8\xf3\x5a\xed\x36\xe7\x5c\xc3\xcd" +
	"\xd1\x1d\xf9\xb3\x06\x00\x87\xc0\x6f\x25\x5b\x46\x65\x29\x1c\x89\xc9\x5f\x4d\x00\x94\xc1\x0d\x09\x78\xa9\x70\xdb" +
	"\x94\xe2\x83\xf3\x25\x71\x64\x17\x06\x1f\x28\x49\x28\x49\x8b\x3a\xed\xff\xd7\xbf\xea\xd2\x67\x95\xd6\x33\xa7\x95" +
	"\xdc\x0a\xb8\x5f\x4f\x1d\xcf\x02\xc5\x66\x9a\x0e\xb7\x02\x45\x57\x05\x49\xad\xe7\x00\x68\x65\x14\x77\x10\x00\xe9" +
	"\x2b\x01\xc3\x34\x35\x1d\xd4\x90\x71\x61\x2b\x60\x78\x99\x4e\x54\xeb\x97\x40\x2f\x15\xc5\x93\x1a\x97\xe7\x24\xd2" +
	"\xb6\x04\xd9\xfa\x9d\x7b\x68\x2a\x1b\x67\x93\x51\x9e\xad\xf2\xec\x31\xbb\x5b\xde\xae\xee\xa7\xff\x8f\x97\x3f\xf2" +
	"\xdb\x55\x96\xe7\xf3\xd1\x62\xd1\xd2\xad\x51\x57\x24\xa0\x64\xf6\x51\x0c\x8e\x85\x29\xbb\xd6\xd5\xcf\xe2\xa9\xdf" +
	"\x5a\x8f\x7e\xac\xa5\xb8\x4e\xaf\xaf\xbe\xee\xb7\x5c\x8c\xe6\xd3\x6c\x32\xfa\x6c\x88\x85\x51\xf6\xeb\x42\xb3\x6c" +
	"\xb1\xf8\xfe\x30\xcf\xcf\x08\x79\x8c\xf1\x9f\x62\xb3\xf9\xc3\x64\xf4\x78\x37\x5a\x2e\x56\xcb\xf9\xf8\x7c\x07\x3e" +
	"\x38\x43\x5c\x52\x15\x93\xe7\xeb\xf8\xbe\x71\x89\x71\x56\xb1\x0b\xca\x6e\x76\x55\xdc\xa4\x37\xc3\xa3\x4a\xed\x74" +
	"\x65\x68\xe2\x2a\xdb\xfd\x33\x13\x30\x0d\x36\x43\x2e\x05\x0c\x6a\x0c\x03\xed\x36\x83\xf6\x57\xe5\x70\xde\x42\x7f" +
	"\x9c\xf2\x44\xbb\x4d\xd2\xcc\x32\x6e\xa8\xd7\xb6\xfa\xb4\x1e\x5f\x60\x02\x90\xf1\xbc\xcd\x55\x10\xf0\xeb\xf7\x1e" +
	"\x8c\x14\x6a\x25\x29\x93\xb2\x09\x7a\x6e\xcd\xba\xb7\xa6\xa7\x16\xf2\x4f\x00\x00\x00\xff\xff\x91\xd7\x63\x8a\x9e" +
	"\x05\x00\x00")

func bindataDeploymentAlamedadatahubDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedadatahubDMyaml,
		"Deployment/alameda-datahubDM.yaml",
	)
}



func bindataDeploymentAlamedadatahubDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedadatahubDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-datahubDM.yaml",
		size: 1438,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555659065, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedaevictionerDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x5d\x4f\xdb\x3c\x14\xbe\xcf\xaf\x38\xe2\x86\xab\xa4\x45\xef\x5b" +
	"\xa6\xf9\x2e\x2c\x95\x86\x04\x5d\x05\x8c\xdb\xea\xe0\x9c\x36\xd6\xfc\x85\x7d\x12\x14\x4d\xfb\xef\x93\xa1\x81\x44" +
	"\x94\x0e\x5f\xb5\xc7\x7e\x3e\xfc\xe4\x31\x7a\x75\x4f\x21\x2a\x67\x05\xa0\xf7\x71\xd6\x9d\x65\xbf\x94\xad\x05\x54" +
	"\xe4\xb5\xeb\x0d\x59\xce\x0c\x31\xd6\xc8\x28\x32\x00\x8b\x86\x04\xa0\x46\x43\x35\xe6\xd4\x29\xc9\xca\x59\x0a\xfb" +
	"\xad\xe8\x51\x92\x80\x2d\xd5\x14\x90\x5d\x40\x95\x01\x68\x7c\x20\x1d\x13\x1a\x92\xc8\x2b\xfc\x79\x20\x9d\xf1\xce" +
	"\x92\xe5\x0f\x58\xd1\x5a\xc7\x98\xfe\xee\x19\x6a\x8a\x32\x28\xcf\xcf\x9e\x2b\xda\x2a\x4b\x11\x1a\xf7\x04\xec\xa0" +
	"\x7e\x36\x0d\xdc\xd0\x61\x32\x00\x26\xe3\x35\x32\x15\xa8\x7d\x83\x85\xf3\x64\x63\xa3\xb6\x5c\x28\x37\x7b\x42\xc5" +
	"\xf9\xd6\x85\x3c\x10\xd6\xbd\x80\x53\x0e\x2d\x9d\x66\xd1\x93\x4c\xd2\x81\xbc\x56\x12\xa3\x80\xb3\x0c\x20\x92\x26" +
	"\xc9\x2e\xbc\x98\x32\xc8\xb2\xb9\x1a\xdd\x73\x7a\xd3\xa9\x8b\xc1\xc3\x1e\x3a\x4a\x37\xad\x23\x09\xa7\xa5\x27\x22" +
	"\xc7\x64\x00\x06\xe7\x2f\x39\x5b\x46\x65\x29\xbc\x62\xf3\x7f\x49\x01\x28\x83\x3b\x12\xf0\xd8\x62\x9f\x02\xf2\xc1" +
	"\xf9\x86\x38\xb2\x0b\xb3\xf7\xa8\x3c\x34\xa4\x45\x37\x2f\xfe\x2b\xce\xa7\x0c\xeb\x56\xeb\xb5\xd3\x4a\xf6\x02\x2e" +
	"\xb7\x2b\xc7\xeb\x40\x31\x35\x6b\x38\x15\x28\xba\x36\x48\x1a\xdd\x0b\x40\x2b\xa3\x78\x32\x01\x90\xbe\x15\x70\x3e" +
	"\x37\x93\xa1\x21\xe3\x42\x2f\xe0\xeb\xfc\x5a\x8d\x36\x02\x3d\xb6\x14\x0f\x32\xfc\xbf\x38\xcc\xf0\x65\x31\x62\x20" +
	"\xdb\xbd\x41\x87\xb0\xca\xab\xf2\x7a\x59\x95\x9b\xe5\xfd\xe5\xb7\xbb\xcb\x1f\xab\xe5\xcd\xa6\x2a\xef\xca\xef\x3f" +
	"\x2f\x36\x65\x55\xdd\x2c\x6f\x6f\x47\xc4\x1d\xea\x96\x04\x9c\x0c\x59\xa5\xcf\xdc\xb4\x0f\xc5\xe8\x79\x14\xb1\x93" +
	"\x62\x31\x9f\x2f\xe6\x27\x9f\xd1\x1a\x7e\x6e\x96\xab\xf2\xe2\x6a\x79\x40\x2b\x75\xf6\x8d\xaa\x73\xba\x35\x74\xed" +
	"\x5a\x3b\xce\x21\x07\x93\x26\x6b\xe4\x46\xc0\xac\xc3\x30\xd3\x6e\x37\x1b\xbf\xca\x71\x15\x0f\x14\x24\xd7\x6e\x97" +
	"\xa7\x1a\xe0\x8e\xb2\xb1\xd2\xbb\x72\x7d\x0e\x0c\x40\xc6\x73\x5f\xa9\x20\xe0\xf7\x9f\xfd\x30\x52\xe8\x94\xa4\x52" +
	"\xca\x64\xf6\x48\x4f\xa7\x07\x57\x1f\x94\xfa\x6f\x00\x00\x00\xff\xff\x33\xa3\x09\xd6\xeb\x04\x00\x00")

func bindataDeploymentAlamedaevictionerDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedaevictionerDMyaml,
		"Deployment/alameda-evictionerDM.yaml",
	)
}



func bindataDeploymentAlamedaevictionerDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedaevictionerDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-evictionerDM.yaml",
		size: 1259,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555659065, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedagrafanaDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x3d\x8f\xe3\x36\x10\xed\xfd\x2b\x06\x6e\xae\x89\x24\xef\xdd\xa5" +
	"\x61\x17\xdc\x36\x01\xb2\x07\x17\x41\x9a\x20\xc5\x98\x1a\x5b\xcc\x92\x1c\x86\x1c\xf9\x60\x04\xf9\xef\x81\xb4\xfa" +
	"\xb4\x25\xaf\xaf\x38\x37\x06\x66\xde\x7b\xf3\xc9\x81\x30\x98\x3f\x28\x26\xc3\x5e\x01\x86\x90\x8a\xf3\xd3\xe6\xd5" +
	"\xf8\x52\xc1\x33\x05\xcb\x17\x47\x5e\x36\x8e\x04\x4b\x14\x54\x1b\x00\x8f\x8e\x14\xa0\x45\x47\x25\x66\xa7\x88\x47" +
	"\xf4\xd8\xd9\x53\x40\x4d\x0a\x8e\x54\x52\x44\xe1\x88\x66\x03\x60\xf1\x40\x36\x35\x54\x68\x22\x0c\xdc\xd6\xa0\xd9" +
	"\x05\xf6\xe4\x65\x49\x12\xbd\x67\x41\x31\xec\x3b\x7a\x49\x49\x47\x13\xa4\xcd\xf6\x99\x8e\xc6\x53\x82\x8a\xbf\x81" +
	"\x30\x94\x6d\xba\x20\x15\x35\x51\xac\xd1\x2d\x11\x46\x35\x00\x21\x17\x2c\x0a\xe5\x68\x43\x85\x39\x07\xf2\xa9\x32" +
	"\x47\xc9\x0d\x17\xdf\xd0\x48\x76\xe4\x98\x45\xc2\xf2\xa2\xe0\x83\xc4\x9a\x3e\x6c\x52\x20\xdd\xc4\x8e\xd4\x4a\x26" +
	"\x05\x4f\x1b\x80\x44\x96\xb4\x70\x7c\xcb\xca\xa1\xe8\xea\xb7\x49\x95\xd7\x95\x4e\x4a\xea\x53\xe8\x98\x93\xbe\x36" +
	"\x3f\xfb\x98\x08\x40\x9f\x56\xf3\x33\xde\xc8\x17\xf6\x82\xc6\x53\x1c\xc8\x59\x37\xa8\x13\x89\xf0\x2b\xf9\x41\xd3" +
	"\x38\x3c\x91\x82\x2d\xda\x60\x3c\x6d\x07\xbb\x66\xe7\xb0\x99\xfb\x9f\xdb\x54\x6d\x7f\xda\x16\xa9\x22\x6b\x8b\x9e" +
	"\x9f\xa7\x6a\xfb\xd7\x00\x3e\xb3\xad\x1d\xbd\x70\xed\x65\x92\x6e\x06\xae\xb1\xec\x51\x2a\x05\x6f\xfc\xc1\x07\x63" +
	"\x3e\x59\x2b\x98\xcd\xfd\x73\x6e\xd3\x94\xc4\x75\xd4\x94\x6e\x14\x96\x7c\x73\x36\x89\x2e\xba\x6e\x15\x21\xf2\xd9" +
	"\x34\xeb\x6d\xfc\xe9\xae\x6c\x88\xec\x48\x2a\xaa\x53\x36\xc2\x36\x7d\x6f\x56\xdb\x3b\x19\xca\xa4\xbb\x7d\xf4\xee" +
	"\x5f\xfd\x9c\x7f\xce\x3f\xcd\x41\xfb\xda\xda\x3d\x5b\xa3\x2f\x0a\x7e\x3d\x7e\x65\xd9\x47\x4a\xcd\x63\xeb\x51\x81" +
	"\xe3\xb4\xb9\x4d\xcc\x21\x8f\x3d\x47\x51\xf0\x69\xb7\xdb\x4d\xfc\x7d\x25\x95\x48\x98\x99\x43\x64\x61\xcd\x56\xc1" +
	"\xef\x5f\xf6\x83\x27\x52\xd7\x8a\x69\x0c\x6b\x9c\x99\x47\x05\xd0\xa1\x56\xf0\x71\xb7\x73\x33\xab\x23\xc7\xf1\xd2" +
	"\x3a\x5e\xcc\xc4\x13\xe9\x9f\x9a\xd2\xa2\xc6\xd3\x9a\xc6\xd3\x4c\x63\x79\xb9\xae\x87\x7c\xc6\x58\x58\x73\x28\xae" +
	"\x27\x30\xf6\xa1\xf3\x64\xa9\xb9\x44\x27\x9a\x21\x52\x7d\x08\xad\xce\x2d\xfd\x6e\x98\xa2\xc4\x54\x1d\x18\x63\x99" +
	"\x8a\xe9\x1d\x9b\x47\x1e\x41\xd9\xdf\x89\xfd\xaa\xf8\x77\x2e\xea\x23\xab\xfa\x5d\x41\xfa\x2c\xef\x95\xd0\x52\x4a" +
	"\x8a\x09\x36\xd3\xf1\xcc\x9e\xfd\x63\x69\x91\x0b\x72\x79\x36\x51\xc1\xbf\xff\xdd\x90\xd7\x87\xb5\x42\xd3\xec\x8f" +
	"\xe6\xf4\x82\x61\xbe\x68\x46\xc8\x5d\xed\x5e\x06\xaf\x74\x19\x2f\x61\x9e\xaa\x99\x1b\xa0\xdb\x84\x15\xff\x3c\xbf" +
	"\x7b\x27\x64\xfd\xb6\xad\x24\x5b\xd2\x11\x6b\x2b\x2f\x5c\x92\x82\xcf\x1f\x77\x0f\x56\x32\x36\x3a\xbf\xa0\xb3\x8b" +
	"\xd5\xdc\xc3\x3c\x5e\xd1\xf2\xad\x5d\xa9\xe6\x66\xf7\xdf\x70\x0f\x16\xa5\x6d\x9d\x84\x62\x45\x68\xa5\xca\xaf\x9e" +
	"\xcd\x58\xd7\x3b\xb0\x4e\xcc\x73\x49\xef\x29\xdd\xc3\x0c\x8d\xa6\xd2\xe8\xe6\x3b\x62\x5d\x66\x1d\x73\xff\x16\xfc" +
	"\xa0\x36\xde\xbe\xdb\xf5\x1d\x79\x1f\xbb\x76\x0b\x3a\x48\xa2\x78\x36\x9a\x7e\xd1\xba\xb9\x37\xcb\x9f\x2a\xd7\xa8" +
	"\xaf\x4b\xdf\x8f\xff\x07\x00\x00\xff\xff\x8f\xbb\x41\x7b\x86\x0a\x00\x00")

func bindataDeploymentAlamedagrafanaDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedagrafanaDMyaml,
		"Deployment/alameda-grafanaDM.yaml",
	)
}



func bindataDeploymentAlamedagrafanaDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedagrafanaDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-grafanaDM.yaml",
		size: 2694,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556071759, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedainfluxdbDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x4f\x4f\xe3\x3a\x14\xc5\xf7\xfd\x14\x57\xbc\x05\xab\xb6\x74\xf5" +
	"\x24\xef\x02\x09\x8f\xe8\x41\x89\xda\x94\x99\x59\x55\xb7\xc9\x0d\xb5\x70\x6c\xcb\xbe\x29\x44\xa3\xf9\xee\x23\x87" +
	"\x16\x42\x69\x01\xcd\x78\x51\x55\xf6\x3d\xbf\x73\x4f\xfc\x07\xad\xbc\x23\xe7\xa5\xd1\x02\xd0\x5a\x3f\xde\x4c\x06" +
	"\x0f\x52\x97\x02\x62\xb2\xca\xb4\x35\x69\x1e\xd4\xc4\x58\x22\xa3\x18\x00\x68\xac\x49\x00\x2a\xac\xa9\xc4\xa1\xd4" +
	"\x95\x6a\x9e\xca\xd5\x76\xc1\x5b\x2c\x48\x40\x45\x25\x39\x64\xe3\x50\x0e\x00\x14\xae\x48\xf9\xa0\x85\x60\xf1\x22" +
	"\xee\x26\x0a\x53\x5b\xa3\x49\xf3\x41\x26\x6a\x6d\x18\x59\x1a\xbd\xd5\x97\xe4\x0b\x27\x2d\x77\xfd\xc6\x54\x49\x4d" +
	"\x1e\xd6\xe6\x11\xd8\x40\xd9\x35\x0c\xbc\xa6\x60\xa3\x64\xd1\x09\xa1\x87\x03\x60\xaa\xad\x42\xa6\x11\x2a\xbb\xc6" +
	"\x91\xb1\xa4\xfd\x5a\x56\x3c\x92\x66\xfc\x88\x92\x87\x95\x71\x43\x47\x58\xb6\x02\x4e\xd9\x35\x74\x3a\xf0\x96\x8a" +
	"\x60\xee\xa8\x63\x7a\x01\x93\x01\x80\x27\x45\x05\x1b\xf7\xdc\x56\x8d\x5c\xac\xaf\x7b\x39\xf7\xb3\xf6\x43\xed\x7a" +
	"\xd8\x4a\x7b\xdf\x36\x0c\xf5\x45\x0a\xc0\xae\xb1\x30\xfe\x01\x4f\x45\xe3\x24\xb7\x17\x46\x33\x3d\xf1\xeb\x02\x80" +
	"\x6b\x74\xe4\x17\x9e\x9c\x80\xc9\xd9\xd9\xd9\x76\xa5\x30\x9a\x51\x6a\x72\x2f\x66\xc3\xed\xe6\xbe\x71\x09\x43\xd6" +
	"\x78\xdf\x9b\x17\x93\xd1\xbf\x43\x54\x56\x6a\x7a\x5b\x92\x35\x4a\x65\x46\xc9\xa2\x15\x90\x56\x53\xc3\x99\x23\x1f" +
	"\x0e\xd0\xae\x8a\xf4\xe6\x35\xd9\xce\x2e\x9d\x5e\x5e\x2f\xbe\xc7\xe7\xcb\x59\x92\xdd\xce\xf2\x74\xfa\xdf\x32\x4e" +
	"\xe7\xd1\xf9\x75\x12\xbf\xd4\x02\x6c\x50\x35\x24\xe0\x24\x6c\xca\xc9\x71\xc6\x55\x9e\x67\xdd\xcf\x7c\x99\x4c\xff" +
	"\x9e\x71\x91\xcc\xf2\xf4\x32\xbd\x88\xf2\xe4\x00\x67\x4c\x5c\x8c\x59\xf9\xb1\x75\x72\x83\x4c\xe1\xff\xa8\x70\xfc" +
	"\x35\x76\x36\x4b\xef\xa2\x3c\x59\xfe\x9f\xfc\xf8\x2a\xfb\x81\xda\xcf\xd8\xd1\x22\xbf\xfa\xf3\xe8\x51\x7c\x93\x4e" +
	"\x97\x8b\x79\x32\x3b\xa0\xc5\xb2\x96\xfa\x53\x71\x16\xcd\xe7\xdf\x6e\x67\x87\xcc\x3b\x80\x45\xef\x3f\x80\x1c\xf1" +
	"\x6e\x3c\xb9\x4f\x54\x1f\x39\x07\xf9\x5b\xe3\x8d\x51\x4d\x4d\x37\xa6\xd1\xec\xfb\x67\xb2\x0e\x33\x19\xf2\x5a\xc0" +
	"\xfe\x16\xf4\xb8\x87\x5f\xc1\x21\x2b\xdf\x2b\x0a\xef\xc8\xad\x56\xad\x80\x0a\x95\xa7\x23\x26\x1b\x74\x63\x25\x57" +
	"\xe3\x77\xb7\x0e\xf6\xae\xe3\xd0\x87\x17\xf5\xbe\xdf\x86\x6f\x56\xcf\x94\x3d\xf1\x73\xb8\xa3\x17\xfb\x1d\x89\x6a" +
	"\xcb\x6d\x2c\x9d\x80\x9f\xbf\xf6\x34\x1f\x66\xf4\x54\x38\x62\xd1\xef\xa8\x9b\x99\x1e\x95\xfe\x0e\x00\x00\xff\xff" +
	"\x64\x59\x19\x56\x70\x06\x00\x00")

func bindataDeploymentAlamedainfluxdbDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedainfluxdbDMyaml,
		"Deployment/alameda-influxdbDM.yaml",
	)
}



func bindataDeploymentAlamedainfluxdbDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedainfluxdbDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-influxdbDM.yaml",
		size: 1648,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554865459, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedaoperatorDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xcd\x6e\xdb\x38\x10\xbe\xfb\x29\x06\xbe\xe4\x24\xd9\xc9\x6e\xf6" +
	"\xc0\x9b\x76\xe5\x45\x03\xc4\xb1\xe0\xa4\xbd\x1a\x13\x6a\x64\x11\xe5\x5f\x48\x4a\x86\x51\xf4\xdd\x0b\x5a\x96\x2b" +
	"\xc5\x76\x50\x14\x28\x4f\xc2\x68\xbe\x9f\x19\xce\x10\xad\xf8\x42\xce\x0b\xa3\x19\xa0\xb5\x7e\xd6\xde\x4e\xbe\x0a" +
	"\x5d\x32\xc8\xc9\x4a\xb3\x57\xa4\xc3\x44\x51\xc0\x12\x03\xb2\x09\x80\x46\x45\x0c\x50\xa2\xa2\x12\x13\x63\xc9\x61" +
	"\x30\xee\xf8\xc3\x5b\xe4\xc4\xa0\xa2\xb2\x0b\xa3\x98\x00\x48\x7c\x25\xe9\x23\x16\xa2\xc4\x09\x7c\x08\x70\xa3\xac" +
	"\xd1\xa4\xc3\x45\x4e\xd4\xda\x04\x0c\xc2\xe8\x23\xbe\x24\xcf\x9d\xb0\xe1\xe0\x37\xa7\x4a\x68\xf2\x50\x9b\x1d\x04" +
	"\x03\xe5\xc1\x30\x84\x9a\xa2\x8c\x14\xfc\x00\xbc\x44\x0b\x10\x48\x59\x89\x81\x52\x94\xb6\xc6\xd4\x58\xd2\xbe\x16" +
	"\x55\x48\x85\x99\xed\x50\x84\xa4\x32\x2e\x71\x84\xe5\x9e\xc1\x4d\x70\x0d\xdd\x4c\xbc\x25\x1e\x4d\x38\x3a\x70\x7b" +
	"\x06\xb7\x13\x00\x4f\x92\x78\x30\xae\xb3\xa7\x30\xf0\xfa\x71\x50\xef\xb8\xe2\xa1\x87\xde\xc1\x11\x38\xe8\x70\x3c" +
	"\x57\xbb\x1c\x8f\x1c\x09\x5c\x97\x00\xe8\x3d\x77\x9d\xd6\x01\x85\x26\x77\x42\x26\x1f\xcb\x00\x08\x85\x5b\x62\xf0" +
	"\xd6\xe0\x3e\x36\xc6\x3a\x63\x6b\x0a\x3e\x18\x37\x7b\x8f\x49\x5c\x4d\x92\xb5\xf3\xf4\xaf\xf4\x9f\x31\xbe\x68\xa4" +
	"\x2c\x8c\x14\x7c\xcf\xe0\xa1\x7a\x32\xa1\x70\xe4\xe3\x54\xf5\x59\x8e\xbc\x69\x1c\xa7\x41\x45\x00\x52\x28\x11\x46" +
	"\x11\x00\x6e\x1b\x06\x77\x73\x35\x0a\x2a\x52\xc6\xed\x19\xfc\x3d\x5f\x8a\xc1\x0f\x47\x6f\x0d\xf9\x8b\x0c\xb7\x57" +
	"\x18\xee\x86\x0c\xa4\xdb\x9f\xd0\xbe\x51\x4f\xd9\x72\xf1\x5c\x64\xff\x2d\x36\xf1\x6b\x40\xd2\xa2\x6c\xe8\x7f\x67" +
	"\xd4\x58\xae\x12\x24\xcb\x35\x55\xe3\xe8\x31\x5e\x60\xa8\xd9\xe9\xe2\xd3\xd3\xfa\x00\xc0\x99\x70\xb1\xca\xff\x90" +
	"\xe4\x99\x54\xf6\x98\x2d\x17\x79\xb6\x59\x15\x8b\x75\xf6\xb2\x5a\x6f\xf2\xec\x25\xfb\xf4\xf9\xdf\x4d\x96\xe7\xeb" +
	"\xc5\xf3\xf3\x7b\x0b\x0c\xa6\xfd\x2c\x44\xd2\xba\x79\x4d\x07\xeb\x9f\xfa\x96\xb3\xfb\xf9\xfc\x7e\x3e\x3d\x01\x5b" +
	"\x23\x1b\x45\x4b\xd3\xe8\xe1\xf5\xf4\xfa\xd6\x94\x42\x57\x66\x20\xa3\x62\x66\x67\x7d\x46\x81\xcf\xce\x33\xe2\xa2" +
	"\xae\xb4\xdc\x33\xa8\x50\xfa\x61\x4d\x43\x6c\x8b\x6e\x26\xcd\x76\x36\x7c\x7e\xba\xd3\x29\x9f\xed\x41\x22\xcd\x36" +
	"\x89\xd3\x8e\xdb\x9e\xb3\xf3\x7e\xb6\x41\xbf\x02\x05\x20\x65\xc3\x3e\x17\x8e\xc1\xb7\xef\x93\x8f\xab\x2e\xcd\x4e" +
	"\xef\xd0\x95\x59\xf1\x30\xbc\x49\x11\x48\x8d\x46\x3a\x01\x7b\x28\x6e\xda\xbd\x09\xd3\xdf\x9e\x85\x0e\x7f\x4c\xf4" +
	"\xe4\x5a\xc1\x29\xe3\x3c\xb6\xef\xea\x03\x31\x4e\x7b\xba\xf8\x96\xc4\xbc\x1f\x01\x00\x00\xff\xff\xf6\xb6\xde\xa7" +
	"\x64\x06\x00\x00")

func bindataDeploymentAlamedaoperatorDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedaoperatorDMyaml,
		"Deployment/alameda-operatorDM.yaml",
	)
}



func bindataDeploymentAlamedaoperatorDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedaoperatorDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-operatorDM.yaml",
		size: 1636,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556175236, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"CustomResourceDefinition/alamedarecommendationsCRD.yaml": bindataCustomResourceDefinitionAlamedarecommendationsCRDyaml,
	"CustomResourceDefinition/alamedascalersCRD.yaml":         bindataCustomResourceDefinitionAlamedascalersCRDyaml,
	"ClusterRole/admission-controllerCR.yaml":                 bindataClusterRoleAdmissioncontrollerCRyaml,
	"ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml": bindataClusterRoleAggregatealamedaadmineditalamedaCRyaml,
	"ClusterRole/alameda-datahubCR.yaml":                      bindataClusterRoleAlamedadatahubCRyaml,
	"ClusterRole/alameda-evictionerCR.yaml":                   bindataClusterRoleAlamedaevictionerCRyaml,
	"ClusterRole/alameda-grafanaCR.yaml":                      bindataClusterRoleAlamedagrafanaCRyaml,
	"ClusterRole/alameda-operatorCR.yaml":                     bindataClusterRoleAlamedaoperatorCRyaml,
	"ServiceAccount/admission-controllerSA.yaml":              bindataServiceAccountAdmissioncontrollerSAyaml,
	"ServiceAccount/alameda-aiSA.yaml":                        bindataServiceAccountAlamedaaiSAyaml,
	"ServiceAccount/alameda-datahubSA.yaml":                   bindataServiceAccountAlamedadatahubSAyaml,
	"ServiceAccount/alameda-evictionerSA.yaml":                bindataServiceAccountAlamedaevictionerSAyaml,
	"ServiceAccount/alameda-grafanaSA.yaml":                   bindataServiceAccountAlamedagrafanaSAyaml,
	"ServiceAccount/alameda-operatorSA.yaml":                  bindataServiceAccountAlamedaoperatorSAyaml,
	"ClusterRoleBinding/admission-controllerCRB.yaml":         bindataClusterRoleBindingAdmissioncontrollerCRByaml,
	"ClusterRoleBinding/alameda-datahubCRB.yaml":              bindataClusterRoleBindingAlamedadatahubCRByaml,
	"ClusterRoleBinding/alameda-evictionerCRB.yaml":           bindataClusterRoleBindingAlamedaevictionerCRByaml,
	"ClusterRoleBinding/alameda-grafanaCRB.yaml":              bindataClusterRoleBindingAlamedagrafanaCRByaml,
	"ClusterRoleBinding/alameda-operatorCRB.yaml":             bindataClusterRoleBindingAlamedaoperatorCRByaml,
	"Secret/admission-controller-tls.yaml":                    bindataSecretAdmissioncontrollertlsyaml,
	"Secret/alameda-influxdb.yaml":                            bindataSecretAlamedainfluxdbyaml,
	"ConfigMap/dashboards-config.yaml":                        bindataConfigMapDashboardsconfigyaml,
	"ConfigMap/grafana-datasources.yaml":                      bindataConfigMapGrafanadatasourcesyaml,
	"PersistentVolumeClaim/admission-controller-log.yaml":     bindataPersistentVolumeClaimAdmissioncontrollerlogyaml,
	"PersistentVolumeClaim/alameda-ai-log.yaml":               bindataPersistentVolumeClaimAlamedaailogyaml,
	"PersistentVolumeClaim/alameda-datahub-log.yaml":          bindataPersistentVolumeClaimAlamedadatahublogyaml,
	"PersistentVolumeClaim/alameda-evictioner-log.yaml":       bindataPersistentVolumeClaimAlamedaevictionerlogyaml,
	"PersistentVolumeClaim/alameda-operator-log.yaml":         bindataPersistentVolumeClaimAlamedaoperatorlogyaml,
	"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml":         bindataPersistentVolumeClaimMyalamedagrafanaPVCyaml,
	"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml":        bindataPersistentVolumeClaimMyalamedainfluxdbPVCyaml,
	"Service/admission-controllerSV.yaml":                     bindataServiceAdmissioncontrollerSVyaml,
	"Service/alameda-datahubSV.yaml":                          bindataServiceAlamedadatahubSVyaml,
	"Service/alameda-grafanaSV.yaml":                          bindataServiceAlamedagrafanaSVyaml,
	"Service/alameda-influxdbSV.yaml":                         bindataServiceAlamedainfluxdbSVyaml,
	"Deployment/admission-controllerDM.yaml":                  bindataDeploymentAdmissioncontrollerDMyaml,
	"Deployment/alameda-aiDM.yaml":                            bindataDeploymentAlamedaaiDMyaml,
	"Deployment/alameda-datahubDM.yaml":                       bindataDeploymentAlamedadatahubDMyaml,
	"Deployment/alameda-evictionerDM.yaml":                    bindataDeploymentAlamedaevictionerDMyaml,
	"Deployment/alameda-grafanaDM.yaml":                       bindataDeploymentAlamedagrafanaDMyaml,
	"Deployment/alameda-influxdbDM.yaml":                      bindataDeploymentAlamedainfluxdbDMyaml,
	"Deployment/alameda-operatorDM.yaml":                      bindataDeploymentAlamedaoperatorDMyaml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"ClusterRole": {Func: nil, Children: map[string]*bintree{
		"admission-controllerCR.yaml": {Func: bindataClusterRoleAdmissioncontrollerCRyaml, Children: map[string]*bintree{}},
		"aggregate-alameda-admin-edit-alamedaCR.yaml": {Func: bindataClusterRoleAggregatealamedaadmineditalamedaCRyaml, Children: map[string]*bintree{}},
		"alameda-datahubCR.yaml": {Func: bindataClusterRoleAlamedadatahubCRyaml, Children: map[string]*bintree{}},
		"alameda-evictionerCR.yaml": {Func: bindataClusterRoleAlamedaevictionerCRyaml, Children: map[string]*bintree{}},
		"alameda-grafanaCR.yaml": {Func: bindataClusterRoleAlamedagrafanaCRyaml, Children: map[string]*bintree{}},
		"alameda-operatorCR.yaml": {Func: bindataClusterRoleAlamedaoperatorCRyaml, Children: map[string]*bintree{}},
	}},
	"ClusterRoleBinding": {Func: nil, Children: map[string]*bintree{
		"admission-controllerCRB.yaml": {Func: bindataClusterRoleBindingAdmissioncontrollerCRByaml, Children: map[string]*bintree{}},
		"alameda-datahubCRB.yaml": {Func: bindataClusterRoleBindingAlamedadatahubCRByaml, Children: map[string]*bintree{}},
		"alameda-evictionerCRB.yaml": {Func: bindataClusterRoleBindingAlamedaevictionerCRByaml, Children: map[string]*bintree{}},
		"alameda-grafanaCRB.yaml": {Func: bindataClusterRoleBindingAlamedagrafanaCRByaml, Children: map[string]*bintree{}},
		"alameda-operatorCRB.yaml": {Func: bindataClusterRoleBindingAlamedaoperatorCRByaml, Children: map[string]*bintree{}},
	}},
	"ConfigMap": {Func: nil, Children: map[string]*bintree{
		"dashboards-config.yaml": {Func: bindataConfigMapDashboardsconfigyaml, Children: map[string]*bintree{}},
		"grafana-datasources.yaml": {Func: bindataConfigMapGrafanadatasourcesyaml, Children: map[string]*bintree{}},
	}},
	"CustomResourceDefinition": {Func: nil, Children: map[string]*bintree{
		"alamedarecommendationsCRD.yaml": {Func: bindataCustomResourceDefinitionAlamedarecommendationsCRDyaml, Children: map[string]*bintree{}},
		"alamedascalersCRD.yaml": {Func: bindataCustomResourceDefinitionAlamedascalersCRDyaml, Children: map[string]*bintree{}},
	}},
	"Deployment": {Func: nil, Children: map[string]*bintree{
		"admission-controllerDM.yaml": {Func: bindataDeploymentAdmissioncontrollerDMyaml, Children: map[string]*bintree{}},
		"alameda-aiDM.yaml": {Func: bindataDeploymentAlamedaaiDMyaml, Children: map[string]*bintree{}},
		"alameda-datahubDM.yaml": {Func: bindataDeploymentAlamedadatahubDMyaml, Children: map[string]*bintree{}},
		"alameda-evictionerDM.yaml": {Func: bindataDeploymentAlamedaevictionerDMyaml, Children: map[string]*bintree{}},
		"alameda-grafanaDM.yaml": {Func: bindataDeploymentAlamedagrafanaDMyaml, Children: map[string]*bintree{}},
		"alameda-influxdbDM.yaml": {Func: bindataDeploymentAlamedainfluxdbDMyaml, Children: map[string]*bintree{}},
		"alameda-operatorDM.yaml": {Func: bindataDeploymentAlamedaoperatorDMyaml, Children: map[string]*bintree{}},
	}},
	"PersistentVolumeClaim": {Func: nil, Children: map[string]*bintree{
		"admission-controller-log.yaml": {Func: bindataPersistentVolumeClaimAdmissioncontrollerlogyaml, Children: map[string]*bintree{}},
		"alameda-ai-log.yaml": {Func: bindataPersistentVolumeClaimAlamedaailogyaml, Children: map[string]*bintree{}},
		"alameda-datahub-log.yaml": {Func: bindataPersistentVolumeClaimAlamedadatahublogyaml, Children: map[string]*bintree{}},
		"alameda-evictioner-log.yaml": {Func: bindataPersistentVolumeClaimAlamedaevictionerlogyaml, Children: map[string]*bintree{}},
		"alameda-operator-log.yaml": {Func: bindataPersistentVolumeClaimAlamedaoperatorlogyaml, Children: map[string]*bintree{}},
		"my-alamedagrafanaPVC.yaml": {Func: bindataPersistentVolumeClaimMyalamedagrafanaPVCyaml, Children: map[string]*bintree{}},
		"my-alamedainfluxdbPVC.yaml": {Func: bindataPersistentVolumeClaimMyalamedainfluxdbPVCyaml, Children: map[string]*bintree{}},
	}},
	"Secret": {Func: nil, Children: map[string]*bintree{
		"admission-controller-tls.yaml": {Func: bindataSecretAdmissioncontrollertlsyaml, Children: map[string]*bintree{}},
		"alameda-influxdb.yaml": {Func: bindataSecretAlamedainfluxdbyaml, Children: map[string]*bintree{}},
	}},
	"Service": {Func: nil, Children: map[string]*bintree{
		"admission-controllerSV.yaml": {Func: bindataServiceAdmissioncontrollerSVyaml, Children: map[string]*bintree{}},
		"alameda-datahubSV.yaml": {Func: bindataServiceAlamedadatahubSVyaml, Children: map[string]*bintree{}},
		"alameda-grafanaSV.yaml": {Func: bindataServiceAlamedagrafanaSVyaml, Children: map[string]*bintree{}},
		"alameda-influxdbSV.yaml": {Func: bindataServiceAlamedainfluxdbSVyaml, Children: map[string]*bintree{}},
	}},
	"ServiceAccount": {Func: nil, Children: map[string]*bintree{
		"admission-controllerSA.yaml": {Func: bindataServiceAccountAdmissioncontrollerSAyaml, Children: map[string]*bintree{}},
		"alameda-aiSA.yaml": {Func: bindataServiceAccountAlamedaaiSAyaml, Children: map[string]*bintree{}},
		"alameda-datahubSA.yaml": {Func: bindataServiceAccountAlamedadatahubSAyaml, Children: map[string]*bintree{}},
		"alameda-evictionerSA.yaml": {Func: bindataServiceAccountAlamedaevictionerSAyaml, Children: map[string]*bintree{}},
		"alameda-grafanaSA.yaml": {Func: bindataServiceAccountAlamedagrafanaSAyaml, Children: map[string]*bintree{}},
		"alameda-operatorSA.yaml": {Func: bindataServiceAccountAlamedaoperatorSAyaml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
