// Code generated by go-bindata. DO NOT EDIT.
// sources:
// CustomResourceDefinition/alamedarecommendationsCRD.yaml
// CustomResourceDefinition/alamedascalersCRD.yaml
// ClusterRole/admission-controllerCR.yaml
// ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml
// ClusterRole/alameda-datahubCR.yaml
// ClusterRole/alameda-evictionerCR.yaml
// ClusterRole/alameda-operatorCR.yaml
// ServiceAccount/admission-controllerSA.yaml
// ServiceAccount/alameda-aiSA.yaml
// ServiceAccount/alameda-datahubSA.yaml
// ServiceAccount/alameda-evictionerSA.yaml
// ServiceAccount/alameda-operatorSA.yaml
// ClusterRoleBinding/admission-controllerCRB.yaml
// ClusterRoleBinding/alameda-datahubCRB.yaml
// ClusterRoleBinding/alameda-evictionerCRB.yaml
// ClusterRoleBinding/alameda-operatorCRB.yaml
// Secret/admission-controller-tls.yaml
// Secret/alameda-influxdb.yaml
// ConfigMap/grafana-datasources.yaml
// PersistentVolumeClaim/admission-controller-log.yaml
// PersistentVolumeClaim/alameda-ai-log.yaml
// PersistentVolumeClaim/alameda-datahub-log.yaml
// PersistentVolumeClaim/alameda-evictioner-log.yaml
// PersistentVolumeClaim/alameda-operator-log.yaml
// PersistentVolumeClaim/my-alamedagrafanaPVC.yaml
// PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml
// Service/admission-controllerSV.yaml
// Service/alameda-datahubSV.yaml
// Service/alameda-grafanaSV.yaml
// Service/alameda-influxdbSV.yaml
// Deployment/admission-controllerDM.yaml
// Deployment/alameda-aiDM.yaml
// Deployment/alameda-datahubDM.yaml
// Deployment/alameda-evictionerDM.yaml
// Deployment/alameda-grafanaDM.yaml
// Deployment/alameda-influxdbDM.yaml
// Deployment/alameda-operatorDM.yaml

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCustomResourceDefinitionAlamedarecommendationsCRDyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x3d\x8f\xdb\x30\x0c\xdd\xf5\x2b\x88\xec\x71\x6b\x74\x29\xbc\x1d" +
	"\xda\xa5\xcb\xa1\xb8\x02\xb7\x14\x1d\x18\x89\xcd\xb1\x27\x8b\x2a\x45\x07\xbd\x7f\x5f\xd8\x8a\xf3\x71\x89\x13\x4e" +
	"\xf6\x13\xf5\xde\xe3\x87\x30\xf3\x33\x69\x61\x49\x1d\x60\x66\xfa\x67\x94\xc6\xbf\xd2\xbc\x7e\x2e\x0d\xcb\x87\x5d" +
	"\xbb\x21\xc3\xd6\xbd\x72\x0a\x1d\x7c\x19\x8a\x49\xff\x44\x45\x06\xf5\xf4\x95\x7e\x73\x62\x63\x49\xae\x27\xc3\x80" +
	"\x86\x9d\x03\x88\xb8\xa1\x58\xc6\x2f\x00\x2f\xc9\x54\x62\x24\x5d\x9b\x48\x9c\x69\x3b\x58\xb5\xcd\xc7\x95\x03\x48" +
	"\xd8\x53\x07\x18\xb1\xa7\x80\x4a\x5e\xfa\x9e\x52\x40\x9b\x3c\xe0\x60\x52\x3c\x46\x4e\xdb\x66\x64\x42\x4e\xa4\xa5" +
	"\x41\x76\x25\x93\x1f\x15\xb6\x2a\x43\xee\x60\x39\xb1\x2a\xec\xdd\xd4\x22\x1e\xaa\xd8\xd3\x99\xd8\x74\x9e\xe3\xa0" +
	"\x18\x97\xec\x38\x80\xe2\x25\x53\x07\x8f\x23\x65\x46\x4f\xc1\x01\xec\x30\x72\xcd\xa8\x22\x92\x29\x3d\x7c\xff\xf6" +
	"\xfc\xe9\x87\x7f\xa1\x1e\x2b\x08\x90\x55\x32\xa9\xf1\xec\x65\x8c\x93\xee\x1f\x30\x00\x7b\x1b\x35\x8a\x29\xa7\xed" +
	"\x01\x9e\xac\xdf\x4b\x3a\x9d\xc2\x79\xa2\x6c\xfe\x90\xb7\x03\x3c\xb7\x6f\x8e\x6b\xe6\xe6\xf1\xd5\x5e\x9e\xe3\x00" +
	"\x6c\xd4\x5f\x80\xcb\x44\x35\xa6\x61\x5f\xc1\x17\xca\x39\x86\xee\x37\xee\x2a\xeb\x42\x8d\xc7\xbb\x7f\x07\x56\x0a" +
	"\x97\x57\xd7\x93\xa1\x0b\xf8\x06\x5b\x3d\x42\x55\x7c\x73\xb7\x15\xd6\x27\xbd\xbb\x3b\x0d\x43\x1b\xca\x8d\xa1\xed" +
	"\xe6\x27\xba\x6b\x31\xe6\x17\x6c\xdd\xf1\x0a\x7a\x4f\xd9\x28\x3c\xbe\x5f\xf3\xd5\xea\x6c\xa7\xa7\x5f\x2f\x29\x4c" +
	"\x0f\xb6\x74\xf0\xf3\xd7\xb8\xd0\x26\x4a\x61\xbf\x84\x13\xf8\x3f\x00\x00\xff\xff\xc3\x68\x72\x63\x12\x04\x00\x00" +
	"")

func bindataCustomResourceDefinitionAlamedarecommendationsCRDyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCustomResourceDefinitionAlamedarecommendationsCRDyaml,
		"CustomResourceDefinition/alamedarecommendationsCRD.yaml",
	)
}



func bindataCustomResourceDefinitionAlamedarecommendationsCRDyaml() (*asset, error) {
	bytes, err := bindataCustomResourceDefinitionAlamedarecommendationsCRDyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "CustomResourceDefinition/alamedarecommendationsCRD.yaml",
		size: 1042,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCustomResourceDefinitionAlamedascalersCRDyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x41\x8f\x2b\x35\x0c\xbe\xcf\xaf\xb0\xca\x61\x2f\x74\x4a\xc5\x05" +
	"\xcd\x01\xe9\xa9\x70\x58\x21\x9e\xd0\x2e\x7a\x17\xc4\xc1\x93\x78\xda\xb0\x89\x1d\x12\x4f\x45\xf9\xf5\x28\x99\xb6" +
	"\xdb\x99\xd7\xe5\x2d\x12\x39\x4d\xbe\x71\x3e\x3b\x9f\xed\x18\xa3\xfb\x44\x29\x3b\xe1\x0e\x30\x3a\xfa\x4b\x89\xcb" +
	"\x2e\xb7\x2f\xdf\xe5\xd6\xc9\xe6\xb8\xed\x49\x71\xdb\xbc\x38\xb6\x1d\xec\xc6\xac\x12\x9e\x28\xcb\x98\x0c\xfd\x40" +
	"\x83\x63\xa7\x4e\xb8\x09\xa4\x68\x51\xb1\x03\x00\x68\x00\x3c\xf6\xe4\x73\xd7\x94\xad\x11\xd6\x24\xde\x53\x5a\xab" +
	"\x88\xbf\x50\x77\xb0\xda\xb6\xdf\xac\x1a\x00\xc6\x40\x1d\xa0\xc7\x40\x16\xb3\x41\x4f\x29\xb7\x38\xaa\x94\x6f\xc7" +
	"\xfb\xb6\x30\xa0\xe3\x0a\xbb\x26\x47\x32\x85\x79\x9f\x64\x8c\x1d\xbc\x6d\x38\x31\x9f\xa3\x98\x2e\xf0\x61\x72\xf2" +
	"\x5c\x9d\x54\x3c\xfa\x31\xa1\x5f\xba\x6f\x00\xb2\x91\x48\x1d\x7c\x2c\x14\x11\x0d\xd9\x06\xe0\x88\xde\x59\x2c\x37" +
	"\x9e\x48\x25\x12\x7f\xf8\xe5\xf1\xd3\xb7\xcf\xe6\x40\x01\x27\x10\x20\x26\x89\x94\xd4\x5d\x7c\x97\x75\xa3\xf4\x15" +
	"\x03\xb0\x94\x4d\x72\xb1\x32\xc2\xf7\xeb\x9b\x3f\x00\x0f\x85\x79\x3a\x02\xb6\x48\x4d\x19\xf4\x40\x70\x9c\x30\xb2" +
	"\x90\xab\x57\x90\x01\xf4\xe0\x32\x24\x8a\x89\x32\xb1\xd6\x08\x67\x5c\x32\x00\x32\x48\xff\x07\x19\x6d\xe1\x99\x52" +
	"\x21\x81\x7c\x90\xd1\xdb\x92\xa0\x23\x25\x85\x44\x46\xf6\xec\xfe\xbe\x32\x67\x50\xa9\x2e\x3d\x2a\x65\x9d\x31\x3a" +
	"\x56\x4a\x8c\xbe\x68\x32\xd2\xd7\x80\x6c\x21\xe0\x09\x12\x15\x1f\x30\xf2\x0d\x5b\x35\xc9\x2d\xfc\x2c\x89\xc0\xf1" +
	"\x20\x1d\x1c\x54\x63\xee\x36\x9b\xbd\xd3\x4b\xa9\x19\x09\x61\x64\xa7\xa7\x4d\xad\x18\xd7\x8f\x2a\x29\x6f\x2c\x1d" +
	"\xc9\x6f\x30\xba\x75\x8d\x93\xb5\x96\x67\xb0\x5f\xa5\x73\x19\xe6\x87\x9b\xc0\xf4\x54\x92\x96\x35\x39\xde\x5f\xe1" +
	"\x9a\xfb\xf7\xaa\xfe\x93\x63\x0b\x2e\x03\x9e\x59\xa6\xe8\x5f\xc5\x2d\x50\xd1\xe4\xe9\xc7\xe7\x5f\xe1\x12\x43\x4d" +
	"\xc0\x5c\xf1\xaa\xf5\xeb\xb1\xfc\x2a\x7b\x91\xc9\xf1\x40\x69\x4a\xdb\x90\x24\x54\x46\x62\x1b\xc5\xb1\xd6\x8d\xf1" +
	"\x8e\x78\x2e\x79\x1e\xfb\xe0\xb4\xe4\xf9\xcf\x91\xb2\x96\xec\xb4\xb0\x43\x66\x51\xe8\x09\xc6\x68\x51\xc9\xb6\xf0" +
	"\xc8\xb0\xc3\x40\x7e\x87\x99\xfe\x6f\xd1\x8b\xbe\x79\x5d\x04\xfd\xb2\xec\xd7\x47\xe1\x33\xc3\x49\x9c\x2b\x7c\xe9" +
	"\xe8\xcb\xba\xd7\x3f\x65\x99\xd9\xf3\x73\xa7\x9d\xde\x0c\xa5\x2c\x62\xec\x3d\xdd\x37\xef\x45\x3c\xe1\xbc\x67\xa2" +
	"\x78\x67\x4e\x4b\x7b\xe2\x31\x2c\xb1\x35\x64\x2d\xdc\x9f\xc1\x46\x42\x44\xa3\xef\x8d\x30\x93\x27\xa3\x92\x96\xfc" +
	"\xb3\x7a\x7d\x78\x0c\x51\x92\x22\x6b\x07\x4f\x23\xc3\x2a\xe0\x0b\xad\x4a\xa7\x26\xda\x13\x53\x42\x25\x30\x62\x09" +
	"\x70\x50\x4a\x10\xc4\xba\xe1\x34\x55\x6d\xa9\x36\xe7\xe9\xe1\x6e\x40\x8b\xa4\x40\xad\x33\x97\x68\xd6\x3a\xeb\x6b" +
	"\x90\x33\x70\xd2\xf6\x8b\x79\x56\xd4\x31\xbf\x27\xd3\xe7\xd7\x78\x77\x1d\x1d\x4b\x49\xde\x3a\x38\xc9\x15\xbd\x9c" +
	"\x02\xb1\x1a\xe1\xc1\xed\xef\x98\xbc\x79\xe7\x25\xc3\x7f\x3d\x7b\x4f\xb3\x49\xa2\x1b\xce\x7f\xf9\x77\x8e\xf8\x7d" +
	"\x09\x5a\xc0\xc7\xcb\x24\x3f\x6e\xd1\xc7\x03\x6e\x9b\x57\xc1\xd1\x18\x8a\x4a\xf6\xe3\x72\x22\xae\x56\xb3\x31\x58" +
	"\xb7\x46\xd8\xd6\xb9\x9e\x3b\xf8\xed\xf7\x32\x0b\x55\x12\xd9\x73\xc3\x55\xf0\x9f\x00\x00\x00\xff\xff\x75\xf1\x8d" +
	"\xab\x39\x08\x00\x00")

func bindataCustomResourceDefinitionAlamedascalersCRDyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCustomResourceDefinitionAlamedascalersCRDyaml,
		"CustomResourceDefinition/alamedascalersCRD.yaml",
	)
}



func bindataCustomResourceDefinitionAlamedascalersCRDyaml() (*asset, error) {
	bytes, err := bindataCustomResourceDefinitionAlamedascalersCRDyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "CustomResourceDefinition/alamedascalersCRD.yaml",
		size: 2105,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAdmissioncontrollerCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x31\x6f\x84\x30\x0c\x85\x77\x7e\x45\x74\x3b\x54\xdd\x2a\xd6\x0e" +
	"\xdd\x3b\x74\xf7\x25\x06\x2c\x42\x1c\xd9\xce\x55\xed\xaf\xaf\x80\x0a\x18\x8a\x7a\x55\x99\x78\x91\x5f\xbe\xf7\x62" +
	"\xc8\xf4\x86\xa2\xc4\xa9\x75\x72\x05\xdf\x40\xb1\x81\x85\x3e\xc1\x88\x53\x33\x3e\x69\x43\xfc\x70\x7b\xac\x46\x4a" +
	"\xa1\x75\xcf\xb1\xa8\xa1\xbc\x72\xc4\x6a\x42\x83\x00\x06\x6d\xe5\x5c\x82\x09\x5b\xd7\x61\x40\x01\x63\x01\xaa\x21" +
	"\x4c\xa4\xf3\xbd\xb5\xe7\x64\xc2\x31\xa2\x54\x52\x22\xea\x3c\x5f\x3b\xc8\xf4\x22\x5c\xf2\x22\xe7\xaf\x76\x97\xcd" +
	"\x23\xd8\x93\x9a\x1c\x33\x5c\x96\x31\x41\xe5\x22\x1e\x0f\xae\xa9\x18\x18\xa5\xfe\x1d\xaf\x03\xf3\xe8\x39\x75\xd4" +
	"\x97\xd5\xab\xcb\xd4\x0d\xe5\x7a\x30\xf4\x68\xdb\xbf\x17\x04\xc3\x4d\x96\x1c\x56\xf9\x73\xbe\xd3\x0c\x99\xc3\xaf" +
	"\xa8\x48\xba\x8b\x0c\xe6\x87\x33\x0e\xe4\xac\x67\x24\xc1\x1c\xc9\x83\xa2\xe9\x76\x16\x30\x47\xfe\x98\x30\xd9\xbd" +
	"\x21\xfe\x58\xef\x1b\x3a\xbf\xe8\xbe\xcc\x7f\xb1\xe6\x8a\x0d\x67\x4c\x3a\x50\x67\x0d\xf1\x19\x7a\xef\xb6\x2e\xf6" +
	"\x2e\xea\x57\x00\x00\x00\xff\xff\x22\xc3\x4a\xb8\xd5\x02\x00\x00")

func bindataClusterRoleAdmissioncontrollerCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAdmissioncontrollerCRyaml,
		"ClusterRole/admission-controllerCR.yaml",
	)
}



func bindataClusterRoleAdmissioncontrollerCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAdmissioncontrollerCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/admission-controllerCR.yaml",
		size: 725,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAggregatealamedaadmineditalamedaCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x4f\xbd\x4e\xf4\x30\x10\xec\xfd\x14\xab\xeb\x93\x4f\x5f\x87\xdc\x52" +
	"\xd0\x53\xd0\xef\xd9\xa3\xdc\xea\x6c\x6f\xb4\x5e\x1f\x12\x4f\x8f\x2e\x21\xd0\x81\x90\xa8\x3c\xf2\xce\x2f\xaf\xf2" +
	"\x02\xeb\xa2\x2d\x92\x9d\x39\xcd\x3c\xfc\xa2\x26\x6f\xec\xa2\x6d\xbe\x3e\xf4\x59\xf4\xdf\xed\x7f\xb8\x4a\xcb\x91" +
	"\x1e\xcb\xe8\x0e\x7b\xd6\x82\x50\xe1\x9c\xd9\x39\x06\xa2\xc6\x15\x91\x78\x59\x0c\x0b\x3b\x26\x2e\x5c\x91\x79\xe2" +
	"\x5c\xa5\x4d\xc8\xe2\xc7\x57\x20\x2a\x7c\x46\xe9\x77\x19\x7d\x93\xf9\x65\xe6\xba\xfb\x44\x3a\xb9\x0d\x9c\x7e\x23" +
	"\xbc\x47\x7f\xea\x6c\x14\xf4\x18\x26\xe2\x55\x9e\x4c\xc7\xba\x95\x98\x88\x87\x6b\x4f\x5c\xa4\x2d\x73\xd2\xe6\x2c" +
	"\x0d\xd6\x67\x96\x40\x64\xe8\x3a\x2c\xe1\xa0\xee\x2b\xee\x6c\x58\x0f\x44\x37\xd8\xf9\xe3\xb6\xc0\xb7\xb7\x48\xdf" +
	"\x41\x32\xb0\x63\x83\x63\xcd\x07\xcc\x28\x70\xfc\x45\x0b\x43\xd2\x5a\xd1\xf2\xb6\xff\xa7\x36\xaf\xec\xe9\xf2\x1e" +
	"\x00\x00\xff\xff\x36\x9a\x6e\xc2\xf0\x01\x00\x00")

func bindataClusterRoleAggregatealamedaadmineditalamedaCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAggregatealamedaadmineditalamedaCRyaml,
		"ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml",
	)
}



func bindataClusterRoleAggregatealamedaadmineditalamedaCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAggregatealamedaadmineditalamedaCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml",
		size: 496,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAlamedadatahubCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x31\x4f\xc3\x40\x0c\x85\xf7\xfb\x15\x56\x99\x13\xc4\x86\xb2\x32" +
	"\xb0\x22\x06\x76\x37\xf7\xda\x58\xcd\x9d\x0f\xdb\x57\x09\x7e\x3d\x6a\xaa\x16\x75\xb2\xf4\xfc\xf4\x7d\xb2\xb9\xc9" +
	"\x17\xcc\x45\xeb\x44\xb6\xe7\x79\xe4\x1e\x8b\x9a\xfc\x72\x88\xd6\xf1\xf4\xea\xa3\xe8\xf3\xf9\x25\x9d\xa4\xe6\x89" +
	"\xde\xd6\xee\x01\xfb\xd4\x15\xa9\x20\x38\x73\xf0\x94\x88\x2a\x17\x4c\x74\x40\x86\x71\xa8\xb1\x0c\xbc\x72\x41\xe6" +
	"\xe1\xd2\x58\xfa\x3e\x59\x5f\xe1\x53\x7a\xa2\x0f\x58\x11\xbf\x18\xe9\xa0\x46\xdf\x1d\xf6\x43\xcd\xb4\x20\x16\x74" +
	"\xa7\x5e\x33\x6c\x03\x7a\xe3\x19\xa4\x0d\xd5\x17\x39\xc4\x50\xb4\x4a\xa8\x49\x3d\x52\x1a\x88\x9b\xbc\x9b\xf6\xe6" +
	"\x13\x25\xa2\x81\x76\xbb\x44\x64\x70\xed\x36\xe3\x16\xde\x31\x9e\x88\xce\xb0\xfd\x6d\x71\x44\x3c\x30\xb6\x90\x7b" +
	"\xa8\xcf\xbc\x4a\x3d\x8e\xb3\xd6\x60\xa9\x30\x1f\x59\x1e\xc8\xd7\xea\xf5\x3c\xc3\xac\xa5\xa0\xe6\xed\x5d\xff\x92" +
	"\xbb\xe3\x32\x7b\xcb\x1c\xf8\x0b\x00\x00\xff\xff\x44\xa5\x3d\x5d\x6a\x01\x00\x00")

func bindataClusterRoleAlamedadatahubCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAlamedadatahubCRyaml,
		"ClusterRole/alameda-datahubCR.yaml",
	)
}



func bindataClusterRoleAlamedadatahubCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAlamedadatahubCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-datahubCR.yaml",
		size: 362,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAlamedaevictionerCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcc\xb1\x6e\xc3\x30\x0c\x84\xe1\x5d\x4f\x41\x78\x97\x8b\x6e\x85\xd6" +
	"\x0e\xdd\x3b\x64\xa7\xad\x4b\x42\x58\x16\x05\x8a\xf2\x90\xa7\x0f\x1c\x78\x3a\xe0\x03\xee\xe7\x26\x37\x58\x17\xad" +
	"\x89\x6c\xe1\x75\xe6\xe1\x4f\x35\x79\xb1\x8b\xd6\x79\xfb\xe9\xb3\xe8\xd7\xf1\x1d\x36\xa9\x39\xd1\x6f\x19\xdd\x61" +
	"\xff\x5a\x10\x76\x38\x67\x76\x4e\x81\xa8\xf2\x8e\x44\x77\x64\x18\xbb\x1a\x4b\xe4\xc2\x3b\x32\x47\x1c\xb2\x9e\x29" +
	"\x58\xb0\x51\xd0\x53\x88\xc4\x4d\xfe\x4c\x47\xeb\xe7\x35\xd2\x34\x05\x22\x43\xd7\x61\x2b\x2e\x6b\x9a\x7b\x20\x3a" +
	"\x60\xcb\x25\x0f\xf8\x67\x33\x0a\x1c\xef\x00\x00\x00\xff\xff\x87\xa8\xa5\xcf\xb8\x00\x00\x00")

func bindataClusterRoleAlamedaevictionerCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAlamedaevictionerCRyaml,
		"ClusterRole/alameda-evictionerCR.yaml",
	)
}



func bindataClusterRoleAlamedaevictionerCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAlamedaevictionerCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-evictionerCR.yaml",
		size: 184,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAlamedaoperatorCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x3d\x8f\xdb\x30\x0c\xdd\xfd\x2b\x84\xeb\x1c\x1f\xba\x15\x59\x3b" +
	"\x74\x2d\x3a\x74\xe7\x49\xcf\x0e\x11\x59\x54\x29\x2a\xd7\xbb\x5f\x5f\xf8\xe3\x9c\xb4\x36\xda\xe0\x86\x4e\x79\xa0" +
	"\x22\xbd\x47\xbe\x47\x53\xe6\xef\xd0\xc2\x92\x8e\x4e\x9f\xc8\xb7\x54\xed\x24\xca\xaf\x64\x2c\xa9\x3d\x7f\x2a\x2d" +
	"\xcb\xe3\xe5\x63\x73\xe6\x14\x8e\xee\x73\xac\xc5\xa0\xdf\x24\xa2\x19\x60\x14\xc8\xe8\xd8\x38\x97\x68\xc0\xd1\x75" +
	"\x08\x50\x32\x51\xe2\x03\x45\x1a\x10\xe8\x20\x79\x2e\x35\x5a\x23\xca\xb1\x39\x38\xca\xfc\x45\xa5\xe6\x32\x5e\x3c" +
	"\xb8\x87\x87\xc6\x39\x45\x91\xaa\x1e\x4b\x2d\x49\x40\x99\x50\x96\x30\x03\x45\x8e\xec\x27\x55\x5e\x92\xa9\xc4\x08" +
	"\x1d\x8f\x2e\xd0\xa7\xe5\x5a\x0f\x9b\x7e\x23\x97\x19\x3c\x93\xf9\xd3\x96\x92\x72\x2e\x5b\xd2\x85\xa1\xc0\x66\xc6" +
	"\x80\x1c\xe5\x65\x40\xb2\xfb\x68\x46\xe4\x15\x64\x98\x60\xcd\xe1\x0d\xe6\xf5\x3c\x20\xc2\xb0\xaf\xa8\x95\x8c\x54" +
	"\x4e\xdc\x59\xcb\xb2\x95\x77\x95\xe3\x25\x75\xdc\xbf\xb7\xf7\x6a\x52\x3c\x45\x4e\x7d\x3b\x0e\x92\x38\x41\x4b\x4b" +
	"\xbc\x65\x5c\x2c\x1c\xff\x3d\x8f\x7a\x2d\x29\xbc\x0c\x03\x52\x98\xfc\xf8\x0f\xe3\x79\xaf\xe8\xc7\x8e\x13\x45\x7e" +
	"\xdd\x44\x65\xa1\xff\xe0\xbe\x42\x07\x2e\xe3\x02\xb8\x4e\xd4\xfd\xa8\xd0\x17\x97\x55\x06\xd8\x09\xb5\xb8\x9a\x02" +
	"\x74\xca\x77\xc9\xe4\xe1\x56\x93\x0e\x83\x24\x36\x51\x4e\xbd\xfb\x4d\xb1\xdb\x8b\xf5\x5c\x5c\x9f\xb9\xaa\x71\xeb" +
	"\xcc\x76\x42\xc1\xf8\x69\x48\xa3\xb8\xb2\xac\xe2\xb6\x61\x5f\x8b\xc9\xf0\x56\x0c\xe8\x38\xf1\x5f\x5c\xd9\x5a\x70" +
	"\xd7\x46\x16\x78\xc5\x9f\x8b\x70\xf3\xd6\xd5\xe3\xc9\xf6\x6d\x2f\x61\x99\xb2\xa2\xe7\x62\x7a\xfb\x79\xd9\xb2\x5d" +
	"\x28\xf2\x98\xad\xd4\x3f\xe3\xe9\x24\x72\x9e\x23\x5f\x75\x2f\x6f\xff\x8a\xd7\xbe\xa0\xfd\x26\xf5\xc2\xb7\xe6\xdc" +
	"\xfd\xfe\xaf\x00\x00\x00\xff\xff\xf6\x73\x3e\x58\x47\x05\x00\x00")

func bindataClusterRoleAlamedaoperatorCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAlamedaoperatorCRyaml,
		"ClusterRole/alameda-operatorCR.yaml",
	)
}



func bindataClusterRoleAlamedaoperatorCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAlamedaoperatorCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-operatorCR.yaml",
		size: 1351,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAdmissioncontrollerSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\xaa\x42\x41\x0c\x05\xd0\x7e\x56\x91\x0d\xfc\xe2\xb7\xe9\x5c" +
	"\x83\x60\x7f\xc9\x5c\x21\xf8\x26\x79\x64\xe2\x5b\xbf\x08\xd6\x87\x83\xd3\x1f\xac\xed\x19\x2a\xd7\xff\x78\x79\x4c" +
	"\x95\x3b\xeb\x72\xe3\xcd\x2c\xdf\xd1\x63\xb1\x31\xd1\xd0\x21\x12\x58\x54\xc1\x5c\xbe\xbf\xe9\xcf\x32\xba\xf2\x38" +
	"\x58\x3f\xdc\x27\x8c\x2a\x4f\x4e\x16\x3a\x0b\xfe\x09\x00\x00\xff\xff\x7e\x31\x7e\x77\x63\x00\x00\x00")

func bindataServiceAccountAdmissioncontrollerSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAdmissioncontrollerSAyaml,
		"ServiceAccount/admission-controllerSA.yaml",
	)
}



func bindataServiceAccountAdmissioncontrollerSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAdmissioncontrollerSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/admission-controllerSA.yaml",
		size: 99,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAlamedaaiSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc8\x31\x0e\x02\x41\x08\x05\xd0\x7e\x4e\xc1\x05\x2c\x6c\xe9\x3c\x83" +
	"\x89\xfd\x0f\x7c\x13\xa2\xc3\x6c\x58\x9c\xf3\xdb\x6c\xfb\x70\xc4\x8b\x75\xc6\x4a\x95\x7d\x1f\x9f\x48\x57\x79\xb2" +
	"\x76\x18\x1f\x66\xeb\x97\x3d\x26\x1b\x8e\x86\x0e\x91\xc4\xa4\x0a\xbe\x98\x74\xdc\x10\x17\x9d\x07\x8c\x2a\x6f\x3a" +
	"\x0b\xbd\x0a\xf1\x0f\x00\x00\xff\xff\xaa\xc4\x7e\xde\x59\x00\x00\x00")

func bindataServiceAccountAlamedaaiSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAlamedaaiSAyaml,
		"ServiceAccount/alameda-aiSA.yaml",
	)
}



func bindataServiceAccountAlamedaaiSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAlamedaaiSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-aiSA.yaml",
		size: 89,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAlamedadatahubSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc8\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x78\x01\x0a\x5a\x77\xcc\x80" +
	"\x44\xff\x89\x3f\xc2\x82\x38\x27\x9f\x2f\xf3\x23\xa4\x6b\x1f\x36\x7f\x30\x77\x9f\xa1\xb2\xae\xed\xe3\x61\x2a\x77" +
	"\xe6\xf2\xce\x5b\xef\xf3\x88\x6a\x83\x05\x43\x41\x9b\x48\x60\x50\x05\x5f\x0c\x1a\x2e\x7f\x7d\x1f\xcf\xd3\xf7\x0d" +
	"\x9d\x2a\x2f\x1a\x13\x35\x13\xfe\x0b\x00\x00\xff\xff\x06\xa1\x23\x4a\x5e\x00\x00\x00")

func bindataServiceAccountAlamedadatahubSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAlamedadatahubSAyaml,
		"ServiceAccount/alameda-datahubSA.yaml",
	)
}



func bindataServiceAccountAlamedadatahubSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAlamedadatahubSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-datahubSA.yaml",
		size: 94,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAlamedaevictionerSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\x31\x0e\x02\x41\x08\x05\xd0\x7e\x4e\xc1\x05\x2c\x6c\xe9\x3c\x83" +
	"\x89\xfd\x0f\xf3\x4d\x88\x0e\x6c\x58\x9c\xf3\xdb\x6c\xfd\x70\xf8\x8b\x75\x7a\x86\xca\xbe\x8f\x8f\xc7\x54\x79\xb2" +
	"\xb6\x1b\x1f\x66\xf9\x8b\x1e\x8b\x8d\x89\x86\x0e\x91\xc0\xa2\x0a\xbe\x58\x9c\xb8\x71\xbb\xb5\x67\xb0\x2e\x3a\x0f" +
	"\x18\x55\xde\x9c\x2c\x74\x16\xfc\x1f\x00\x00\xff\xff\x58\x7c\x98\x9a\x61\x00\x00\x00")

func bindataServiceAccountAlamedaevictionerSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAlamedaevictionerSAyaml,
		"ServiceAccount/alameda-evictionerSA.yaml",
	)
}



func bindataServiceAccountAlamedaevictionerSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAlamedaevictionerSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-evictionerSA.yaml",
		size: 97,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAlamedaoperatorSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\x31\x0e\x02\x41\x08\x05\xd0\x7e\x4e\xc1\x05\x2c\x6c\xe9\x3c\x83" +
	"\x89\xfd\xcf\xf0\x4d\x88\x0e\x4c\x58\xdc\xf3\x5b\x68\xfb\x1e\xb6\x3f\x58\x87\x67\xa8\x9c\xd7\xf1\xf2\x30\x95\x3b" +
	"\xeb\xf4\xc9\xdb\x9c\xf9\x89\x1e\x8b\x0d\x43\x43\x87\x48\x60\x51\x05\x6f\x2c\x1a\x2e\xb9\x59\xe8\xac\x7f\x1c\x1b" +
	"\x93\x2a\x4f\xda\x8f\xe1\xdf\x00\x00\x00\xff\xff\x01\x08\xdb\x27\x5f\x00\x00\x00")

func bindataServiceAccountAlamedaoperatorSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAlamedaoperatorSAyaml,
		"ServiceAccount/alameda-operatorSA.yaml",
	)
}



func bindataServiceAccountAlamedaoperatorSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAlamedaoperatorSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-operatorSA.yaml",
		size: 95,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingAdmissioncontrollerCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xb1\x4e\xc4\x30\x0c\xc6\xf1\x3d\x4f\xe1\x17\x68\x11\x1b\xca\x06" +
	"\x0c\xec\x45\x62\x77\x13\x17\x4c\x53\x3b\x72\x9c\x0e\x3c\x3d\xaa\x44\x07\x74\xa7\xd3\xcd\x9f\xbe\xff\x0f\x2b\x7f" +
	"\x90\x35\x56\x89\x60\x33\xa6\x11\xbb\x7f\xa9\xf1\x0f\x3a\xab\x8c\xeb\x53\x1b\x59\x1f\xf6\xc7\xb0\xb2\xe4\x08\xaf" +
	"\xa5\x37\x27\x9b\xb4\xd0\x0b\x4b\x66\xf9\x0c\x1b\x39\x66\x74\x8c\x01\x40\x70\xa3\x08\x0b\x65\x32\x74\x35\xe4\x01" +
	"\xf3\xc6\xed\xc8\x0f\x49\xc5\x4d\x4b\x21\x0b\xa6\x85\x26\x5a\x8e\x07\x56\x7e\x33\xed\xf5\x86\x1e\x00\x2e\xf0\xfb" +
	"\xad\xd6\xe7\x6f\x4a\xde\x0e\x6c\xf8\x0b\xbd\x93\xed\x9c\xe8\x39\x25\xed\xe2\x01\xe0\xac\x5d\x2d\x9c\x73\xab\x98" +
	"\xfe\x8b\xbf\x01\x00\x00\xff\xff\x96\x62\xb4\x2f\x3d\x01\x00\x00")

func bindataClusterRoleBindingAdmissioncontrollerCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingAdmissioncontrollerCRByaml,
		"ClusterRoleBinding/admission-controllerCRB.yaml",
	)
}



func bindataClusterRoleBindingAdmissioncontrollerCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingAdmissioncontrollerCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/admission-controllerCRB.yaml",
		size: 317,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingAlamedadatahubCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x31\xae\xc2\x30\x0c\xc6\xf1\x3d\xa7\xc8\x05\xda\xa7\xb7\xa1\x6c" +
	"\xc0\xc0\x5e\x24\x76\x37\x71\xa9\x69\x1a\x47\x8e\xd3\x81\xd3\xa3\x0a\x84\x04\x48\x88\xd5\xfa\xfc\xff\x41\xa6\x13" +
	"\x4a\x21\x4e\xce\x4a\x0f\xbe\x85\xaa\x23\x0b\x5d\x41\x89\x53\x3b\x6d\x4a\x4b\xfc\xb7\xfc\x9b\x89\x52\x70\x76\x1f" +
	"\x6b\x51\x94\x8e\x23\xee\x28\x05\x4a\x67\x33\xa3\x42\x00\x05\x67\xac\x4d\x30\xa3\xb3\x03\x06\x14\x50\x16\xa0\x06" +
	"\x22\xcc\x18\xa0\x59\x17\x63\xed\x8d\x70\xc4\x0e\x87\x75\x0c\x99\x0e\xc2\x35\x7f\x81\x8d\xb5\x1f\xee\x4f\x4c\xa9" +
	"\xfd\x05\xbd\x16\x67\x9a\x47\xe1\x88\xb2\x90\xc7\xad\xf7\x5c\x93\x3e\x23\xef\x8f\xf7\x7b\xc9\xe0\x5f\x85\x5b\x00" +
	"\x00\x00\xff\xff\xc4\x91\x85\x3b\x28\x01\x00\x00")

func bindataClusterRoleBindingAlamedadatahubCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingAlamedadatahubCRByaml,
		"ClusterRoleBinding/alameda-datahubCRB.yaml",
	)
}



func bindataClusterRoleBindingAlamedadatahubCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingAlamedadatahubCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-datahubCRB.yaml",
		size: 296,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingAlamedaevictionerCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x31\x0e\xc2\x30\x0c\x85\xe1\x3d\xa7\xc8\x05\x5a\xc4\x86\xb2\x01" +
	"\x03\x7b\x91\xd8\xdd\xc4\x05\xd3\x34\x8e\x1c\xa7\x03\xa7\x47\x15\x08\x09\x81\x10\xb3\xfd\xfe\x0f\x32\x9d\x50\x0a" +
	"\x71\x72\x56\x7a\xf0\x2d\x54\xbd\xb0\xd0\x0d\x94\x38\xb5\xe3\xa6\xb4\xc4\xab\x79\x6d\x46\x4a\xc1\xd9\x7d\xac\x45" +
	"\x51\x3a\x8e\xb8\xa3\x14\x28\x9d\xcd\x84\x0a\x01\x14\x9c\xb1\x36\xc1\x84\xce\x0e\x18\x50\x40\x59\x80\x1a\x88\x30" +
	"\x61\x80\x06\x67\xf2\x4b\x11\xc5\x08\x47\xec\x70\x58\xfe\x21\xd3\x41\xb8\xe6\x1f\xb6\xb1\xf6\x83\xfe\x57\x2a\xb5" +
	"\xbf\xa2\xd7\xe2\x4c\xf3\x8c\x1c\x51\x66\xf2\xb8\xf5\x9e\x6b\xd2\x57\xe7\xcb\xf6\x71\x2a\x19\xfc\xbb\x73\x0f\x00" +
	"\x00\xff\xff\x2e\xae\x54\xf5\x31\x01\x00\x00")

func bindataClusterRoleBindingAlamedaevictionerCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingAlamedaevictionerCRByaml,
		"ClusterRoleBinding/alameda-evictionerCRB.yaml",
	)
}



func bindataClusterRoleBindingAlamedaevictionerCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingAlamedaevictionerCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-evictionerCRB.yaml",
		size: 305,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingAlamedaoperatorCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xbd\x0a\xc2\x30\x10\xc0\xf1\x3d\x4f\x91\x17\x68\xc5\x4d\xb2\xa9" +
	"\x83\x7b\x05\xf7\x6b\x72\xd5\xb3\x69\x2e\x5c\x2e\x1d\x7c\x7a\x91\x8a\x20\x05\x71\xbd\x8f\xff\x0f\x32\x5d\x50\x0a" +
	"\x71\x72\x56\x7a\xf0\x2d\x54\xbd\xb1\xd0\x03\x94\x38\xb5\xe3\xae\xb4\xc4\x9b\x79\x6b\x46\x4a\xc1\xd9\x63\xac\x45" +
	"\x51\x3a\x8e\x78\xa0\x14\x28\x5d\xcd\x84\x0a\x01\x14\x9c\xb1\x36\xc1\x84\xce\x0e\x18\x50\x40\x59\x80\x1a\x88\x30" +
	"\x61\x80\x86\xf3\x32\x32\xc2\x11\x3b\x1c\x5e\xd7\x90\xe9\x24\x5c\xf3\x0f\xd9\x58\xbb\x82\xff\x73\x4a\xed\xef\xe8" +
	"\xb5\x38\xd3\xbc\x13\x67\x94\x99\x3c\xee\xbd\xe7\x9a\xf4\x53\x59\x7d\x2e\x8b\x92\xc1\x7f\x1b\xcf\x00\x00\x00\xff" +
	"\xff\xa8\xcd\x05\x0d\x2b\x01\x00\x00")

func bindataClusterRoleBindingAlamedaoperatorCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingAlamedaoperatorCRByaml,
		"ClusterRoleBinding/alameda-operatorCRB.yaml",
	)
}



func bindataClusterRoleBindingAlamedaoperatorCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingAlamedaoperatorCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-operatorCRB.yaml",
		size: 299,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSecretAdmissioncontrollertlsyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x3d\x0a\x82\x41\x0c\x04\xd0\x3e\xa7\xc8\x05\xbe\xc2\x36\x97\xb0" +
	"\x10\xec\x87\xdd\x11\x82\xfb\x67\x36\x0a\xde\x5e\x44\xfb\xf7\x04\xcb\xaf\x8c\xed\x73\x98\xbe\x4e\x72\xf7\x51\x4d" +
	"\x2f\x2c\xc1\x94\xce\x44\x45\xc2\x44\x75\xa0\xd3\x14\xb5\xfb\xfe\xe2\xa3\xcc\x91\x31\x5b\x63\x1c\xd9\xf6\x1f\xec" +
	"\x85\x42\xd3\x1b\x2b\x03\x39\x03\x2e\xbf\x9f\xef\x45\xd3\xf3\xc2\xe3\xc9\x4f\x00\x00\x00\xff\xff\xc0\x89\x2c\x4b" +
	"\x73\x00\x00\x00")

func bindataSecretAdmissioncontrollertlsyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSecretAdmissioncontrollertlsyaml,
		"Secret/admission-controller-tls.yaml",
	)
}



func bindataSecretAdmissioncontrollertlsyaml() (*asset, error) {
	bytes, err := bindataSecretAdmissioncontrollertlsyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Secret/admission-controller-tls.yaml",
		size: 115,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSecretAlamedainfluxdbyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\xa7\xf0\x05\x3a\xb0\xfa\x12\x0c" +
	"\x48\xec\x9f\xfa\x57\xb2\x48\xd2\xe0\xb8\x08\x6e\xcf\x40\xe7\xa7\x87\xe1\x77\xc6\xf4\xbd\xab\xbc\x2f\xe5\xe9\xdd" +
	"\x54\x6e\x5c\x83\x59\x1a\x13\x86\x84\x16\x91\x8e\x46\x15\x54\x34\x1a\x16\xef\x5b\x3d\x3e\xf6\x58\xb2\xce\x13\xe7" +
	"\xc0\x4a\x95\x8d\xc6\x40\xee\x01\x2f\xff\x9b\xdf\x41\x95\xeb\xc0\xeb\xe0\x2f\x00\x00\xff\xff\x82\xf8\x7a\xe9\x6e" +
	"\x00\x00\x00")

func bindataSecretAlamedainfluxdbyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSecretAlamedainfluxdbyaml,
		"Secret/alameda-influxdb.yaml",
	)
}



func bindataSecretAlamedainfluxdbyaml() (*asset, error) {
	bytes, err := bindataSecretAlamedainfluxdbyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Secret/alameda-influxdb.yaml",
		size: 110,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataConfigMapGrafanadatasourcesyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x8f\xda\x30\x10\xc5\xef\xf9\x14\x23\x9f\xf9\x53\x2e\x15\xf2" +
	"\xad\x2d\x17\x0e\x55\x0f\x95\xb8\x54\x55\x35\xc4\x13\x70\x71\x6c\x6b\xc6\x61\x89\x76\xf9\xee\x2b\x67\x21\xc0\xe2" +
	"\x1c\xa2\xd8\xef\xf7\x9e\x9f\x27\x18\xed\x86\x58\x6c\xf0\x1a\x8e\x8b\xea\x60\xbd\xd1\xf0\x23\xf8\xc6\xee\x7e\x62" +
	"\xac\x5a\x4a\x68\x30\xa1\xae\x00\x3c\xb6\xa4\x61\xc7\xd8\xa0\xc7\x69\xde\x95\xd0\x71\x4d\x72\xd1\x24\x62\x4d\x1a" +
	"\x1a\x32\xc4\x98\x02\xa3\xad\xae\xd6\xc8\xa1\xa5\xb4\xa7\x4e\x66\x3d\xb6\x4e\xc3\xdb\xb4\x02\x00\x78\x1d\xde\xf9" +
	"\x51\xb7\x22\x4a\xc3\x62\x72\x13\xee\x0e\x52\x1a\xfe\x8c\xc2\xa3\x7f\xc4\x03\xef\xd6\xe6\x31\x62\xd4\x72\x4b\xa5" +
	"\x41\xad\x7d\xe3\xba\xd3\xea\xbb\x9a\x7c\x46\x00\x9e\x5d\xa9\x8f\x83\xcb\x0e\x2e\xb3\x55\x85\x64\xac\x6b\x92\xdc" +
	"\x4f\x45\x0e\xa7\xbe\x84\x74\xec\xb2\xbe\x4f\x29\x8a\x9e\xcf\xd1\x61\x4b\x06\xa7\xd7\xd4\xd9\xdd\xdc\x66\x72\xac" +
	"\xf5\xf2\xcb\xf2\x6b\x29\x27\xa2\xc8\x4b\xe0\x7c\x47\x85\xa6\xb5\x3e\x6f\x14\x0f\x14\xe2\x11\x2a\x01\x79\xb2\x5b" +
	"\x94\xe1\x72\xff\xac\x4f\xc4\x1e\x5d\x09\xdc\xa2\xd8\xfa\x5b\x97\xf6\x4a\x43\x83\x4e\xa8\xc0\x58\x59\x51\x83\x9d" +
	"\x4b\x4a\x43\xe2\xae\x84\xfc\x97\xe0\x57\x98\x50\xe9\xc2\x8f\xcb\x83\x76\xf2\xfb\x60\xe3\x86\xd8\x36\xfd\x25\xe6" +
	"\x89\x3b\x17\x82\x99\xd0\xfc\xf2\xae\xbf\xd6\x7b\x20\xce\xe3\xea\xef\xf0\x75\xfe\x58\xbc\x07\x00\x00\xff\xff\xc1" +
	"\x67\x54\x9d\xf9\x02\x00\x00")

func bindataConfigMapGrafanadatasourcesyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataConfigMapGrafanadatasourcesyaml,
		"ConfigMap/grafana-datasources.yaml",
	)
}



func bindataConfigMapGrafanadatasourcesyaml() (*asset, error) {
	bytes, err := bindataConfigMapGrafanadatasourcesyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ConfigMap/grafana-datasources.yaml",
		size: 761,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimAdmissioncontrollerlogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x3b\x4e\x04\x41\x0c\x44\xf3\x3e\x85\x2f\x30\x48\x10\x76\x4a\x40" +
	"\x84\x40\x04\x43\x6c\xb9\x0b\x64\x6d\xff\xd6\xf6\xcc\xf9\x57\x2d\xcd\x86\xaf\xf4\x5e\xf1\xd4\x1d\xe6\x3a\x7a\xa6" +
	"\xf3\x35\xdd\xb4\x97\x4c\xdf\x6b\xf1\x40\x8f\x7d\xd4\xa3\xe1\xbd\xb2\xb6\xd4\x10\x5c\x38\x38\x27\xa2\xce\x0d\x99" +
	"\xb8\x34\xf5\xd5\x6e\x32\x7a\xd8\xa8\x15\xf6\x32\x4f\xb9\x04\x9f\x2c\xc8\xf4\x87\x02\xe3\x18\xc6\x9a\x7c\x42\x56" +
	"\xcf\x22\x70\xff\x1c\x05\xbe\x90\x68\xa3\x1f\x70\xf9\x35\x0d\x7c\x75\x41\x22\x32\xf8\x38\x4c\x9e\x82\xe1\x7e\xc0" +
	"\xe3\x22\x22\x5f\x87\xff\xc8\xf4\xf6\xa1\xf4\x08\x00\x00\xff\xff\x30\x6f\xb1\xba\xc6\x00\x00\x00")

func bindataPersistentVolumeClaimAdmissioncontrollerlogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimAdmissioncontrollerlogyaml,
		"PersistentVolumeClaim/admission-controller-log.yaml",
	)
}



func bindataPersistentVolumeClaimAdmissioncontrollerlogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimAdmissioncontrollerlogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/admission-controller-log.yaml",
		size: 198,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554973714, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimAlamedaailogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x3b\x0e\xc2\x30\x10\x44\x7b\x9f\x62\x2f\x10\x24\x28\xdd\x52\x50" +
	"\x21\x10\x45\xa8\x47\xf6\x80\x56\xc4\x1f\xbc\x4e\xce\x8f\x2c\x85\xf2\x3d\xcd\x3c\x54\x9d\xd9\x4c\x4b\xf6\xb2\x1d" +
	"\xdd\x47\x73\xf4\x72\x1f\xc6\x3a\x73\x9f\xcb\xb2\x26\x9e\x17\x68\x72\x89\x1d\x11\x1d\xde\x89\x64\x24\x7a\xc1\x82" +
	"\xc4\x88\x09\x7a\xa8\x5b\xd8\xb5\x55\x04\x7a\x79\x31\xb2\xa1\x97\x06\x75\x56\x19\xc6\x0b\x21\xd0\xec\x5a\x22\x6d" +
	"\xa0\xc8\x24\x0f\x22\x3e\x9b\x76\xde\x72\xa0\x13\x69\xb4\xb2\xb6\xf0\x1f\x34\x7e\x57\x5a\xdf\x49\xc4\x46\xf0\x4d" +
	"\x2f\xa7\x8b\xca\x2f\x00\x00\xff\xff\xe1\xcd\x6c\xef\xbc\x00\x00\x00")

func bindataPersistentVolumeClaimAlamedaailogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimAlamedaailogyaml,
		"PersistentVolumeClaim/alameda-ai-log.yaml",
	)
}



func bindataPersistentVolumeClaimAlamedaailogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimAlamedaailogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-ai-log.yaml",
		size: 188,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554966532, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimAlamedadatahublogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x3b\x0e\x02\x21\x14\x45\x7b\x56\x71\x37\x30\x26\x5a\xd2\x5a\x58" +
	"\x19\x8d\xc5\x58\x3f\xe1\xaa\xc4\xe1\x23\x0f\x66\xfd\x86\x64\x2c\xcf\xb9\x1f\x29\x61\x66\xd5\x90\x93\xc5\xba\x37" +
	"\x9f\x90\xbc\xc5\x75\x18\x6d\x4c\x6d\xce\x4b\x8f\x3c\x2e\x12\xa2\x89\x6c\xe2\xa5\x89\x35\x40\x92\x48\x0b\x59\x24" +
	"\xd2\xcb\x34\xec\xbb\x3f\x76\x65\x75\x5b\xa6\x45\x1c\x2d\x9e\xf4\xac\xd2\x72\x95\x60\xb4\xd0\x8d\xa9\x38\x47\xd5" +
	"\x73\xf6\xd4\x81\xc0\x84\x1b\xc5\xdf\x6b\x68\xbc\x24\x47\x03\x54\x6a\xee\xd5\xfd\x0b\x95\xdf\x4e\x6d\x1b\x01\x3a" +
	"\x0e\x5f\xb4\x38\x9c\x02\x7e\x01\x00\x00\xff\xff\xab\x25\x59\x81\xc1\x00\x00\x00")

func bindataPersistentVolumeClaimAlamedadatahublogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimAlamedadatahublogyaml,
		"PersistentVolumeClaim/alameda-datahub-log.yaml",
	)
}



func bindataPersistentVolumeClaimAlamedadatahublogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimAlamedadatahublogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-datahub-log.yaml",
		size: 193,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554973648, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimAlamedaevictionerlogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\xbb\x6e\xc3\x30\x0c\x45\x77\x7d\x05\x7f\xc0\x05\xda\x51\x6b\x87" +
	"\x4e\x45\x8b\x0c\xce\x4c\x50\x37\x01\x11\xeb\x11\x92\xf6\xf7\x07\x02\x9c\xf1\xdc\xc7\xe1\xa1\x2b\xcc\xb5\xb7\x4c" +
	"\xc7\x67\x7a\x68\x2b\x99\xfe\x67\xe2\x81\x16\x6b\xdf\xf6\x8a\xef\x8d\xb5\xa6\x8a\xe0\xc2\xc1\x39\x11\x35\xae\xc8" +
	"\xc4\x1b\x57\x14\x5e\x70\xa8\x84\xf6\x06\xfb\x18\x87\x9c\xb5\x0f\x16\x64\xba\xa1\xc0\x38\xba\xb1\x26\x1f\x90\xf9" +
	"\x66\x11\xb8\xff\xf6\x02\x9f\x48\xb4\xd0\x05\x5c\xae\xa6\x81\xbf\x26\x48\x44\x06\xef\xbb\xc9\x7b\x60\x78\xee\xf0" +
	"\x38\x89\xc8\xa7\xf0\x8e\x4c\x5f\x3f\x4a\xaf\x00\x00\x00\xff\xff\x8d\xd2\xa5\x96\xc4\x00\x00\x00")

func bindataPersistentVolumeClaimAlamedaevictionerlogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimAlamedaevictionerlogyaml,
		"PersistentVolumeClaim/alameda-evictioner-log.yaml",
	)
}



func bindataPersistentVolumeClaimAlamedaevictionerlogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimAlamedaevictionerlogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-evictioner-log.yaml",
		size: 196,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554973683, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimAlamedaoperatorlogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\xbd\xae\xc2\x30\x14\x83\xf7\x3c\x85\x5f\xa0\x57\xba\x8c\x59\x19" +
	"\x98\x10\x88\xa1\xcc\x47\x89\x41\x11\xcd\x0f\x39\xa7\x7d\x7e\x14\x51\xc6\xcf\x9f\x6d\x69\x69\x66\xd7\x54\x8b\xc7" +
	"\xf6\xef\x5e\xa9\x44\x8f\xeb\x48\xd4\x58\x6c\xae\xcb\x9a\x79\x5c\x24\x65\x97\x69\x12\xc5\xc4\x3b\xa0\x48\xa6\x87" +
	"\x2c\x92\x19\x65\xaa\x8d\x5d\xac\xf6\xbf\xb6\x85\x5d\x6a\x93\x40\x8f\x07\xe3\x57\x49\x72\xda\x18\xc6\x56\x42\xa0" +
	"\xea\xb9\x46\xea\x40\x60\xc2\x8d\x12\xef\x3d\x19\x2f\x25\xd0\x01\x9d\x5a\xd7\x1e\x7e\x85\xce\xf7\x4a\xb5\x9d\x00" +
	"\x1d\x87\x4f\x7a\x1c\x4e\x09\x9f\x00\x00\x00\xff\xff\x85\x2e\x8c\x16\xc2\x00\x00\x00")

func bindataPersistentVolumeClaimAlamedaoperatorlogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimAlamedaoperatorlogyaml,
		"PersistentVolumeClaim/alameda-operator-log.yaml",
	)
}



func bindataPersistentVolumeClaimAlamedaoperatorlogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimAlamedaoperatorlogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-operator-log.yaml",
		size: 194,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554973618, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimMyalamedagrafanaPVCyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x3b\x6a\xc4\x30\x14\x45\x7b\xad\xe2\x6d\xc0\x86\xa4\x54\x9b\x22" +
	"\x55\x48\x48\xe1\xa9\x2f\xd2\xb5\x11\x63\x7d\xe6\x3d\xd9\x30\xbb\x1f\x04\x9e\xf2\xdc\xcf\x41\x4b\x0b\xd5\x52\x2d" +
	"\x5e\xce\x0f\x77\x4f\x25\x7a\xf9\x1b\x89\x75\x96\xbe\xd4\xfd\xc8\xfc\xda\x91\xb2\xcb\xec\x88\xe8\xf0\x4e\xa4\x20" +
	"\xd3\x4b\x7e\x4e\xd8\x91\x19\x31\x6f\x8a\x15\x05\x73\x3b\xc3\x55\x5b\x43\xa0\x97\x95\x91\x8a\x5e\x15\xc9\x59\x63" +
	"\x18\x6f\x84\x40\xb3\x9f\x1a\x69\x03\x45\x26\xf9\x27\xe2\x4d\x53\xe7\x6f\x09\x74\x22\x4a\xab\x87\x86\xf7\x40\xf9" +
	"\x38\x68\xfd\x22\x11\x1b\xc2\x8d\x5e\x3e\xbf\x93\xbc\x02\x00\x00\xff\xff\x05\x22\x1e\x79\xc4\x00\x00\x00")

func bindataPersistentVolumeClaimMyalamedagrafanaPVCyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimMyalamedagrafanaPVCyaml,
		"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml",
	)
}



func bindataPersistentVolumeClaimMyalamedagrafanaPVCyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimMyalamedagrafanaPVCyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/my-alamedagrafanaPVC.yaml",
		size: 196,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimMyalamedainfluxdbPVCyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\xbb\x6e\xc3\x30\x0c\x45\x77\x7d\x05\x37\x4f\x36\xea\x55\x6b\x87" +
	"\x4e\x45\x8b\x0e\xee\xcc\x48\xd7\x01\x11\xbd\x22\x4a\x46\xf2\xf7\x81\x00\x67\x3c\xf7\x71\xb8\xc8\x86\xaa\x92\x93" +
	"\xa5\x63\x35\x37\x49\xde\xd2\xef\x48\xb4\x21\xb5\x2d\x87\x1e\xf1\x19\x58\xa2\x89\x68\xec\xb9\xb1\x35\x44\x89\x23" +
	"\x2c\xc5\xe7\xcc\x81\x23\x3c\x2f\x92\xf6\xd0\x1f\xfe\xb2\x94\xc3\x9d\xbd\x16\x76\xb0\xb4\xc3\xa3\x72\xcb\x95\xc5" +
	"\x68\x81\x1b\x77\x76\x0e\xaa\xdf\xd9\x43\x07\x12\xcd\xf4\x07\xf6\xff\x55\x1a\x7e\x92\x83\x21\xaa\xd0\xdc\xab\x7b" +
	"\x0f\x2a\xee\x1d\xda\x4e\x22\xd2\x21\xbc\xc2\xd2\xb4\x7e\x7c\xc9\xf4\x0a\x00\x00\xff\xff\x1f\xa2\x03\x61\xc7\x00" +
	"\x00\x00")

func bindataPersistentVolumeClaimMyalamedainfluxdbPVCyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimMyalamedainfluxdbPVCyaml,
		"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml",
	)
}



func bindataPersistentVolumeClaimMyalamedainfluxdbPVCyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimMyalamedainfluxdbPVCyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml",
		size: 199,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAdmissioncontrollerSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x41\xaa\xc3\x30\x0c\x44\xf7\x3e\xc5\x5c\x20\x90\xcf\xcf\xa2\xf8" +
	"\x14\x85\x42\xf7\xaa\x3d\x2d\xa6\x8e\x6d\x24\x91\xf3\x97\xf8\x00\xed\xee\x21\x31\xf3\x46\x46\xb9\x53\xad\xf4\x16" +
	"\x71\xfc\x85\x77\x69\x39\xe2\x46\x3d\x4a\x62\xd8\xe9\x92\xc5\x25\x06\xa0\xca\x83\xd5\x4e\x02\x64\x8c\x08\xc9\x7b" +
	"\xb1\x33\xb8\xa4\xde\x5c\x7b\xad\xd4\x00\x34\xd9\xf9\xf5\x69\x43\x12\x23\x9e\xcc\x54\xf1\xae\x52\x82\x0d\xa6\xb3" +
	"\x79\x74\xf5\xa9\x58\x26\x46\x6c\xdb\xff\x14\xba\xe8\x8b\x7e\x9d\xb7\xcb\xba\xae\x01\x30\x56\x26\xef\xfa\x63\xd1" +
	"\x27\x00\x00\xff\xff\xf4\xe7\x31\xb4\xe0\x00\x00\x00")

func bindataServiceAdmissioncontrollerSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAdmissioncontrollerSVyaml,
		"Service/admission-controllerSV.yaml",
	)
}



func bindataServiceAdmissioncontrollerSVyaml() (*asset, error) {
	bytes, err := bindataServiceAdmissioncontrollerSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/admission-controllerSV.yaml",
		size: 224,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAlamedadatahubSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\x0e\xc3\x20\x14\x43\x77\x4e\xe1\x0b\x44\x4a\x87\x2c\x5c\xa3" +
	"\x52\x77\x07\xdc\x16\x95\x04\xf4\xa1\x39\x7f\x45\xd4\x35\x9b\x65\x5b\xcf\x66\x4d\x0f\x59\x4b\x65\xf7\x38\x6e\xee" +
	"\x93\xf6\xe8\x71\x97\x1d\x29\xc8\x6d\xea\x8c\xec\xf4\x0e\xc8\x5c\x95\xdb\x50\x00\x6b\xf5\x60\xe6\xa6\xc8\x69\x14" +
	"\xde\xdf\xd5\x01\x3b\x37\x5d\xf9\xad\x32\xc8\xe3\xa9\x28\x63\x2f\xc6\xe4\x5a\x55\x18\xbc\x5a\xac\x9f\xe0\xe9\x4f" +
	"\x78\x59\x0d\xe7\xce\x48\x3c\x96\x79\x5e\x66\x07\x34\x65\x85\x5e\xec\xfa\xc3\x2f\x00\x00\xff\xff\x17\x03\xde\x3c" +
	"\xcd\x00\x00\x00")

func bindataServiceAlamedadatahubSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAlamedadatahubSVyaml,
		"Service/alameda-datahubSV.yaml",
	)
}



func bindataServiceAlamedadatahubSVyaml() (*asset, error) {
	bytes, err := bindataServiceAlamedadatahubSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/alameda-datahubSV.yaml",
		size: 205,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAlamedagrafanaSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\xaa\xc3\x30\x10\x44\x7b\x9d\x62\x2f\x60\xf0\xe7\x77\x3a\x45" +
	"\x20\x90\x7e\x22\x8d\x8d\x88\x2c\x2d\xab\xc5\xe7\x0f\x56\x95\xc6\xdd\xe3\x15\x6f\x06\x5a\x5e\xb4\x51\x7a\x8b\x72" +
	"\xfe\x85\x4f\x69\x39\xca\x93\x76\x96\xc4\x70\xd0\x91\xe1\x88\x41\xa4\xe2\xcd\x3a\x2e\x12\x81\x6a\x14\x54\x1c\xcc" +
	"\x58\x76\xc3\x86\x86\x20\xd2\x70\xf0\xce\x0f\x45\x62\x94\x8d\x99\x06\xef\x86\x12\x86\x32\x5d\x3d\xed\xe6\x33\xbc" +
	"\x4c\x8c\xf2\xbf\xae\xeb\xdc\x71\xd8\x4e\x7f\xfc\xca\xc1\xca\xe4\xdd\xee\x8f\xc8\x37\x00\x00\xff\xff\x1d\x9d\x3e" +
	"\xc2\xd3\x00\x00\x00")

func bindataServiceAlamedagrafanaSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAlamedagrafanaSVyaml,
		"Service/alameda-grafanaSV.yaml",
	)
}



func bindataServiceAlamedagrafanaSVyaml() (*asset, error) {
	bytes, err := bindataServiceAlamedagrafanaSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/alameda-grafanaSV.yaml",
		size: 211,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAlamedainfluxdbSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x41\x0a\xc2\x30\x14\x44\xf7\x39\xc5\xbf\x40\x41\x37\x52\x72\x0a" +
	"\x41\x70\x3f\x4d\xa6\x12\x4c\x93\xf0\xf3\x2d\x1e\x5f\x9a\x95\x1b\xdd\x3d\x66\xe0\xcd\xa0\xa5\x3b\xb5\xa7\x5a\xbc" +
	"\xec\x67\xf7\x4c\x25\x7a\xb9\x51\xf7\x14\xe8\x36\x1a\x22\x0c\xde\x89\x64\x2c\xcc\xfd\x20\x11\xb4\xe6\x05\x19\x1b" +
	"\x23\xa6\x54\xd6\xfc\x7a\xc7\xc5\x89\x14\x6c\xfc\x59\xf4\x86\x40\x2f\x2b\x23\x15\x56\x15\xc9\xf5\xc6\x70\x18\x5b" +
	"\x55\x1b\xea\x69\xa0\x97\xf9\x34\x5f\xc6\x92\x41\x1f\xb4\xeb\x77\xd8\x99\x19\xac\xea\x9f\x2b\x9f\x00\x00\x00\xff" +
	"\xff\x1e\x34\xee\x61\xd5\x00\x00\x00")

func bindataServiceAlamedainfluxdbSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAlamedainfluxdbSVyaml,
		"Service/alameda-influxdbSV.yaml",
	)
}



func bindataServiceAlamedainfluxdbSVyaml() (*asset, error) {
	bytes, err := bindataServiceAlamedainfluxdbSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/alameda-influxdbSV.yaml",
		size: 213,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAdmissioncontrollerDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x4b\x6f\xe3\x36\x10\xc7\xef\xfe\x14\x83\xbd\xec\x49\xb2\x17\xad" +
	"\xb7\x28\x6f\x5a\x4b\x8b\x06\xb5\x1d\xc3\x76\x03\xe4\x64\x4c\xa8\x91\x45\x84\xaf\x90\x94\x02\xa1\xe8\x77\x2f\x14" +
	"\x3f\x22\xc5\xaf\xac\x4f\xc6\x50\xff\xdf\xfc\x67\xc8\x19\xb4\xe2\x81\x9c\x17\x46\x33\x40\x6b\xfd\xb0\xfe\x36\x78" +
	"\x16\x3a\x67\x90\x92\x95\xa6\x51\xa4\xc3\x40\x51\xc0\x1c\x03\xb2\x01\x80\x46\x45\x0c\x30\x57\xc2\xb7\xaa\x88\x1b" +
	"\x1d\x9c\x91\x92\xdc\xfe\xd0\x5b\xe4\xc4\xa0\xa0\x9c\x1c\x06\xe3\x50\x0c\x00\x24\x3e\x91\xf4\xad\x1e\xda\x34\x0c" +
	"\x50\xa2\xa2\x1c\xdf\x02\xdc\x28\x6b\x34\xe9\x70\x91\x8b\x5a\x9b\x80\x41\x18\xbd\x67\xe4\xe4\xb9\x13\x36\xbc\xf9" +
	"\x4e\xa9\x10\x9a\x3c\x94\xe6\x15\x82\x81\xfc\xcd\x38\x84\x92\x2e\xe1\x00\x02\x29\x2b\x31\x50\x8c\xd2\x96\x18\x1b" +
	"\x4b\xda\x97\xa2\x08\xb1\x30\xc3\x57\x14\x21\x2a\x8c\x8b\x1c\x61\xde\x30\xf8\x1a\x5c\x45\x5f\x07\xde\x12\x6f\x93" +
	"\x3b\xb2\x52\x70\xf4\x0c\xbe\x0d\x00\x3c\x49\xe2\xc1\xb8\x9d\x2d\x85\x81\x97\xd3\x4e\xad\x87\x6a\xcf\xfb\x38\xb8" +
	"\xd8\x8b\x3b\x5d\x6e\x7f\x57\x3b\xdd\xfe\x64\x2f\xd1\xf5\x54\x00\x07\xff\xbb\x8e\xeb\x80\x42\x93\x3b\xaa\xa3\xdb" +
	"\xe9\x00\x84\xc2\x2d\x31\x78\xa9\xb0\x69\x1b\x65\x9d\xb1\x25\x05\x1f\x8c\x1b\xee\xef\x33\x7a\xd7\xbb\x92\x24\xab" +
	"\x47\xf1\x6f\xf1\xf7\x3e\x60\x51\x49\xb9\x30\x52\xf0\x86\xc1\x5d\x31\x37\x61\xe1\xc8\xb7\xcf\xec\xf0\x95\x23\x6f" +
	"\x2a\xc7\xa9\x53\x1a\x80\x14\x4a\x84\x5e\x04\x80\xdb\x8a\xc1\xf7\x91\xea\x05\x15\x29\xe3\x1a\x06\x7f\x8e\x66\xa2" +
	"\x73\xe0\xe8\xa5\x22\x7f\x96\xf0\xfb\xf8\x3c\xe1\x8f\x71\x87\x40\xba\x7e\x97\x1e\xba\x95\x4c\x93\x59\x96\x26\x9b" +
	"\x24\x9d\x4d\xd6\xd3\x4d\x9a\x2d\xa6\xf7\x8f\x59\xba\x99\x27\xb3\x6c\xb5\x48\x26\x59\x87\x5b\xa3\xac\xe8\xa7\x33" +
	"\xaa\xef\xa0\x10\x24\xf3\x25\x15\xfd\xe8\x3e\xbe\xc0\x50\xb2\xe3\xc3\x88\x8f\xe3\x75\xd3\x48\xb2\x4e\xfe\xfa\xe7" +
	"\xc7\x26\x49\xd3\x65\xb6\x5a\x7d\x74\xc1\xe0\xcb\xe1\xbe\x5a\x6e\x59\x3d\xc5\x9d\x71\x8d\x7d\xcd\xd9\x78\x34\x1a" +
	"\x8f\xbe\xdc\xca\x93\xcd\x93\x1f\xd3\x93\x22\x8f\x23\x73\x43\xbd\x9e\xae\x36\x93\x6c\xb9\xde\xfc\xbc\x3b\x07\x19" +
	"\x52\xe0\xc3\x20\x7d\xc4\xc9\x05\xdf\xfe\x8b\xb9\x0b\x9f\x81\x2e\x96\x77\x0f\xc9\x3a\xdb\xfc\x9d\x3d\x7e\x9e\xfd" +
	"\x4c\xcd\x2d\xf6\x24\xf9\x05\xbf\x1c\x7b\x76\x6b\x23\x2b\x45\x33\x53\xe9\xee\x1b\x8c\x40\xb5\x91\xdd\x3d\xf7\x01" +
	"\x9d\x04\x3b\x33\xe7\x4e\xda\x15\x75\xaf\x65\xc3\xa0\x40\xe9\xe9\x02\xb7\x46\x37\x94\x66\x7b\x42\x3c\x3b\xed\x91" +
	"\x34\xdb\xa8\x9d\x69\xdc\x52\x47\xe1\xab\xa7\x1d\xed\xda\x8a\xd8\x15\x79\xb2\x54\x3e\x9f\x87\x94\x0d\x4d\x2a\x1c" +
	"\x83\x7f\xff\xfb\x00\x39\x2d\xdf\x13\x77\x14\xba\x83\xb3\x8b\xcc\x2f\x6e\xb2\x28\xc8\x83\xdc\x93\xab\x05\xa7\x84" +
	"\xf3\xb6\x51\x57\x17\x5f\xff\xd3\xcb\xf4\xff\x03\x00\x00\xff\xff\x9e\xeb\xcc\xce\x4c\x07\x00\x00")

func bindataDeploymentAdmissioncontrollerDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAdmissioncontrollerDMyaml,
		"Deployment/admission-controllerDM.yaml",
	)
}



func bindataDeploymentAdmissioncontrollerDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAdmissioncontrollerDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/admission-controllerDM.yaml",
		size: 1868,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554979175, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedaaiDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x41\x6f\xdb\x30\x0c\x85\xef\xf9\x15\x44\xef\x49\xdc\xae\xdd\x41" +
	"\xb7\x0c\x2e\xb0\x01\x6b\x1b\xa4\xdd\xae\x03\x23\x33\xb1\x30\x49\x54\x25\xda\x43\x30\xec\xbf\x0f\xb2\x93\xd4\x4e" +
	"\x32\x74\x3a\x52\x7c\x1f\x9f\x9f\x68\x0c\xe6\x3b\xc5\x64\xd8\x2b\xc0\x10\xd2\xbc\xbd\x9e\xfc\x34\xbe\x52\x50\x52" +
	"\xb0\xbc\x73\xe4\x65\xe2\x48\xb0\x42\x41\x35\x01\xf0\xe8\x48\x01\x5a\x74\x54\xe1\x14\xcd\xbe\x94\x02\x6a\x52\xb0" +
	"\xa1\x8a\x22\x0a\xc7\xee\xc2\xe2\x9a\x6c\xca\x2a\xc8\xf0\xa3\xac\x2b\x68\x76\x81\x3d\x79\x39\xa1\xa1\xf7\x2c\x28" +
	"\x86\xfd\x5e\x59\x51\xd2\xd1\x04\xe9\x3c\x96\xb4\x31\x9e\x12\xd4\xfc\x0b\x84\xa1\xea\x4c\x82\xd4\x94\x07\x58\xa3" +
	"\x3b\xe1\x11\xc8\xa1\x77\x33\x49\x81\x74\xa6\x45\xea\x9a\x92\x82\xeb\x09\x40\x22\x4b\x5a\x38\xf6\x73\x1c\x8a\xae" +
	"\xbf\x0e\x2c\x8f\x4d\xf7\xee\x84\x5c\xb0\x28\xb4\x97\x0c\x82\xc9\xe7\x42\x38\xf9\xd8\x11\xf4\x12\x16\xe0\xe0\xb0" +
	"\x8f\xc6\x0b\x1a\x4f\xf1\xa8\x99\x9e\xa1\xa7\xe4\xb7\xc6\xd3\x91\x69\x1c\x6e\x49\xc1\x6b\x83\xbb\x99\xe1\x79\x88" +
	"\x1c\x6a\x92\x24\x1c\xe7\x6f\x22\xd5\x16\xb3\x0f\xb3\x8f\x63\xd1\xb2\xb1\x76\xc9\xd6\xe8\x9d\x82\x2f\x9b\x47\x96" +
	"\x65\xa4\x94\x9f\xfd\xd0\x15\x29\x71\x13\x35\x0d\xbe\x00\xc0\x1a\x67\x64\x54\x01\xd0\xa1\x51\x70\x5b\x14\x85\x1b" +
	"\x95\x1d\x39\x8e\x3b\x05\xb7\x77\xc5\x83\x19\xdc\x44\x7a\x6d\x28\x5d\x84\xdc\xfc\x13\x72\x33\x82\x90\x6f\xdf\xd4" +
	"\x87\x90\x9e\x96\xf7\xab\xc5\xcb\xd3\xea\xc7\xa2\x2c\x57\xf7\xcf\xcf\x03\x4e\x8b\xb6\x21\x05\x57\xa7\x0b\x32\x1b" +
	"\x2c\xee\x2c\xb5\x5a\xdd\x15\xc5\x5d\x71\x75\x86\x2e\x17\x2f\x8b\xcf\xdf\x3e\xfd\x07\x39\xaf\x45\xdd\xac\xdf\x03" +
	"\xb7\x6c\x1b\x47\x0f\xdc\xf8\x71\x0e\x53\x70\xb9\xb6\x44\xa9\x15\xcc\x5b\x8c\x73\xcb\xdb\x51\x20\x67\x0b\x61\x79" +
	"\x3b\xcd\xef\x8d\x5b\x1a\x35\xa6\x66\xdd\x63\xce\xf6\xb2\x1f\x9e\xce\x13\x7c\x97\x4a\x2e\xc8\xae\x34\x51\xc1\xef" +
	"\x3f\xfb\x72\xa2\xd8\x1a\x4d\x0b\xad\xb3\xf1\x0b\xd3\xc6\x0d\x8f\xa7\xbf\xca\xdf\x00\x00\x00\xff\xff\xeb\x17\x26" +
	"\x2b\x8a\x04\x00\x00")

func bindataDeploymentAlamedaaiDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedaaiDMyaml,
		"Deployment/alameda-aiDM.yaml",
	)
}



func bindataDeploymentAlamedaaiDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedaaiDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-aiDM.yaml",
		size: 1162,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555040667, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedadatahubDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcb\x6e\xe2\x4c\x10\x85\xf7\x3c\x45\xed\xb2\x32\x17\xfd\x4a\x94" +
	"\xf4\xce\x91\xf9\x95\x48\x40\x10\x84\x99\xd9\xa1\xa2\x5d\xe0\x56\xfa\x96\xee\xb2\x33\x68\x34\xef\x3e\x32\xb7\x98" +
	"\x04\xcf\xa4\x97\xe5\x3e\x5f\x9d\x3a\xee\x42\xaf\xbe\x51\x88\xca\x59\x01\xe8\x7d\xec\x55\x83\xce\x8b\xb2\xb9\x80" +
	"\x8c\xbc\x76\x5b\x43\x96\x3b\x86\x18\x73\x64\x14\x1d\x00\x8b\x86\x04\xa0\x46\x43\x39\x26\x75\xb5\x28\x57\x87\x7a" +
	"\xf4\x28\x49\xc0\x9a\x72\x0a\xc8\x2e\xa0\xea\x00\x68\x5c\x91\x8e\xb5\x14\xea\x0e\x27\xed\xae\x20\x9d\xf1\xce\x92" +
	"\xe5\x4b\x48\xb4\xd6\x31\xb2\x72\xf6\x20\xcf\x29\xca\xa0\x3c\xef\xdc\x66\xb4\x56\x96\x22\x14\xee\x0d\xd8\x41\xbe" +
	"\xb3\x0b\x5c\x50\xdd\x45\x2b\xb9\x13\x5e\xa0\x02\x30\x19\xaf\x91\xa9\x8b\xda\x17\xd8\x75\x9e\x6c\x2c\xd4\x9a\xbb" +
	"\xca\xf5\xde\x50\x71\xb2\x76\x21\x09\x84\xf9\x56\xc0\x15\x87\x92\xae\x3a\xd1\x93\xac\x3d\x04\xda\xa1\xa3\x80\x41" +
	"\x07\x20\x92\x26\xc9\x2e\xec\xdd\x19\x64\x59\x8c\x1a\xd3\x9e\xcf\xdb\xb0\x70\x34\x70\xd0\x35\xd2\xad\x4f\x5b\xc2" +
	"\xf5\xd1\x67\xf8\xd6\x06\x00\x47\xc3\xfb\x90\x2d\xa3\xb2\x14\x4e\xc2\xe4\xaf\x4d\x00\x94\xc1\x0d\x09\x78\x2d\x71" +
	"\x5b\x87\xe2\x83\xf3\x05\x71\x64\x17\x7a\x1f\x24\x49\x28\x48\x8b\xaa\xdf\xfd\xaf\x7b\x73\x2e\x9f\x96\x5a\x4f\x9d" +
	"\x56\x72\x2b\xe0\x71\x3d\x71\x3c\x0d\x14\xeb\xd7\x74\xbc\x15\x28\xba\x32\x48\x6a\x8c\x03\xa0\x95\x51\x7c\x56\x01" +
	"\x90\xbe\x14\x30\xe8\xf7\xcd\x59\xd5\x90\x71\x61\x2b\x60\x70\xdd\x1f\xab\xc6\x97\x40\xaf\x25\xc5\x8b\x8c\xeb\x36" +
	"\x44\xbf\x89\x20\x5b\xbd\x6b\x8f\x49\xa5\xa3\x74\x3c\xcc\xd2\x65\x96\x3e\xa7\x0f\x8b\xfb\xe5\xe3\xe4\xff\xd1\xe2" +
	"\x47\x76\xbf\x4c\xb3\x6c\x36\x9c\xcf\x1b\xdc\x0a\x75\x49\x02\x0a\x66\x1f\x45\xef\x14\x98\xb2\x6b\x5d\xfe\xcc\x57" +
	"\xdd\xc6\x7a\x74\x63\x25\xc5\x6d\xff\xf6\xe6\xeb\xfd\x16\xf3\xe1\x6c\x92\x8e\x87\x9f\x1b\x62\x6e\x94\xfd\x3a\x68" +
	"\x9a\xce\xe7\xdf\x9f\x66\x59\x0b\xc8\x63\x8c\xff\x84\x4d\x67\x4f\xe3\xe1\xf3\xc3\x70\x31\x5f\x2e\x66\xa3\xf6\x0c" +
	"\x7c\x70\x86\xb8\xa0\x32\x26\x2f\xb7\xf1\x7d\xe3\x12\xe3\xac\x62\x17\x94\xdd\xec\xa2\xb8\xeb\xdf\x0d\x4e\x94\xca" +
	"\xe9\xd2\xd0\xd8\x95\xb6\xf9\x33\x13\x30\x75\x65\x8a\x5c\x08\xe8\x55\x18\x7a\xda\x6d\x1a\x9d\xf7\x46\x3f\xbe\xec" +
	"\x44\xbb\x4d\x52\xbf\x5f\xdc\x50\xe3\x72\x2c\x57\x7b\x50\xcb\x26\xec\x2d\x7c\x5a\x9b\x2f\xd1\xc9\x78\xde\x66\x2a" +
	"\x08\xf8\xf5\xfb\x50\x8c\x14\x2a\x25\x29\x95\xb2\x1e\xa1\x6d\xfd\xce\x6f\x4d\x2e\x2d\xea\x9f\x00\x00\x00\xff\xff" +
	"\xd0\x66\x87\xa9\xb6\x05\x00\x00")

func bindataDeploymentAlamedadatahubDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedadatahubDMyaml,
		"Deployment/alameda-datahubDM.yaml",
	)
}



func bindataDeploymentAlamedadatahubDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedadatahubDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-datahubDM.yaml",
		size: 1462,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554979157, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedaevictionerDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4f\x4f\xdb\x4e\x10\xbd\xe7\x53\x8c\xb8\x70\xb2\x13\xf4\xfb\x85" +
	"\xaa\x7b\x33\xb5\xa5\x22\x41\x1a\x01\xe5\x1a\x0d\xeb\x49\xbc\xea\xfe\x63\x77\x6c\x64\x55\xfd\xee\xd5\x92\x18\x6c" +
	"\x11\x28\x7b\x4a\x66\x67\xde\x7b\xf3\xf6\x19\xbd\xba\xa7\x10\x95\xb3\x02\xd0\xfb\x38\xef\xce\x66\xbf\x94\xad\x05" +
	"\x94\xe4\xb5\xeb\x0d\x59\x9e\x19\x62\xac\x91\x51\xcc\x00\x2c\x1a\x12\x80\x1a\x0d\xd5\x98\x51\xa7\x24\x2b\x67\x29" +
	"\x1c\xae\xa2\x47\x49\x02\xb6\x54\x53\x40\x76\x01\xd5\x0c\x40\xe3\x03\xe9\x98\xa6\x21\x91\xbc\x8c\x3f\x17\xa4\x33" +
	"\xde\x59\xb2\xfc\x0e\x2a\x5a\xeb\x18\xd3\xdf\x03\x42\x4d\x51\x06\xe5\xf9\x59\x73\x49\x5b\x65\x29\x42\xe3\x9e\x80" +
	"\x1d\xd4\xcf\xa2\x81\x1b\x3a\x0e\x06\xc0\x64\xbc\x46\xa6\x1c\xb5\x6f\x30\x77\x9e\x6c\x6c\xd4\x96\x73\xe5\xe6\x4f" +
	"\xa8\x38\xdb\xba\x90\x05\xc2\xba\x17\x70\xca\xa1\xa5\xd3\x59\xf4\x24\x13\x75\x20\xaf\x95\xc4\x28\xe0\x6c\x06\x10" +
	"\x49\x93\x64\x17\xf6\xa2\x0c\xb2\x6c\xae\x46\x7b\x4e\x37\x9d\xaa\x18\x34\x1c\x46\x47\xee\xa6\xf3\x81\xc3\xe9\xe8" +
	"\x09\xc9\x47\x34\x00\x83\xf2\xbd\xcf\x96\x51\x59\x0a\x2f\xb3\xd9\xbf\xa8\x00\x94\xc1\x1d\x09\x78\x6c\xb1\x4f\x06" +
	"\xf9\xe0\x7c\x43\x1c\xd9\x85\xf9\xdb\xa9\x2c\x34\xa4\x45\xb7\xc8\xff\xcb\xcf\xa7\x08\xeb\x56\xeb\xb5\xd3\x4a\xf6" +
	"\x02\x2e\xb7\x2b\xc7\xeb\x40\x31\x25\x6b\xe8\x0a\x14\x5d\x1b\x24\x8d\xf6\x02\xd0\xca\x28\x9e\x54\x00\xa4\x6f\x05" +
	"\x9c\x2f\xcc\xa4\x68\xc8\xb8\xd0\x0b\xf8\xba\xb8\x56\xa3\x8b\x40\x8f\x2d\xc5\xa3\x08\xff\x2f\x8f\x23\x7c\x59\x8e" +
	"\x10\xc8\x76\xaf\xa3\x83\x59\xc5\x55\x71\x5d\x95\xc5\xa6\xba\xbf\xfc\x76\x77\xf9\x63\x55\xdd\x6c\xca\xe2\xae\xf8" +
	"\xfe\xf3\x62\x53\x94\xe5\x4d\x75\x7b\x3b\x02\xee\x50\xb7\x24\xe0\x64\xf0\x2a\x3d\x73\xd3\x3e\xe4\xa3\xcf\x23\x8f" +
	"\x9d\x14\xcb\xc5\x62\xb9\x38\xf9\x0c\xd7\xf0\x73\x53\xad\x8a\x8b\xab\xea\x08\x57\xca\xec\x2b\x54\xe7\x74\x6b\xe8" +
	"\xda\xb5\x76\xec\x43\x06\x26\x55\xd6\xc8\x8d\x80\x79\x87\x61\xae\xdd\x6e\x84\xb5\xa7\x3f\x12\x8c\x4c\xbb\x5d\x96" +
	"\x9e\x1f\x77\x34\xea\x8f\xed\xc3\x1e\xeb\xfd\x2c\xed\x85\xbc\xc9\xde\x67\x39\xc8\x78\xee\x4b\x15\x04\xfc\xfe\x73" +
	"\x28\x46\x0a\x9d\x92\x54\x48\x99\x76\xf9\x20\xc6\xd3\xc6\xd5\x3b\x99\xff\x1b\x00\x00\xff\xff\xd5\x9f\x38\x28\x0a" +
	"\x05\x00\x00")

func bindataDeploymentAlamedaevictionerDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedaevictionerDMyaml,
		"Deployment/alameda-evictionerDM.yaml",
	)
}



func bindataDeploymentAlamedaevictionerDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedaevictionerDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-evictionerDM.yaml",
		size: 1290,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554979169, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedagrafanaDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbd\x8e\xdb\x30\x0c\xde\xfd\x14\xdc\x6e\x72\x9c\xdc\x5d\x17\xad" +
	"\xbd\xa5\x40\x53\x78\x28\xba\xf3\x64\x3a\x16\x2a\x89\x2a\x45\xe7\x10\x14\x7d\xf7\x42\x8e\x93\xb3\xef\xaf\xd5\x22" +
	"\x80\xe4\xf7\x43\x8a\xc2\xe4\x7e\x90\x64\xc7\xd1\x00\xa6\x94\x9b\xe3\xae\xfa\xe9\x62\x67\xe0\x81\x92\xe7\x53\xa0" +
	"\xa8\x55\x20\xc5\x0e\x15\x4d\x05\x10\x31\x90\x01\xf4\x18\xa8\xc3\xfa\x20\xd8\x63\xc4\x39\x9e\x13\x5a\x32\xd0\x53" +
	"\x47\x82\xca\x82\xae\x02\xf0\xf8\x48\x3e\x17\x28\x14\x85\x2b\x76\x0a\x58\x0e\x89\x23\x45\x7d\x8b\x12\x63\x64\x45" +
	"\x75\x1c\x67\x78\x47\xd9\x8a\x4b\x3a\xb9\x7d\xa0\xde\x45\xca\x30\xf0\x13\x28\x43\x37\xd9\x05\x1d\xa8\xa8\x78\x67" +
	"\x27\x20\x3c\xb3\x01\x28\x85\xe4\x51\x69\x83\x3e\x0d\xb8\xe1\x44\x31\x0f\xae\xd7\x8d\xe3\xe6\x09\x9d\xd6\x3d\x4b" +
	"\x2d\x84\xdd\xc9\xc0\x8d\xca\x48\x37\x55\x4e\x64\x8b\xb6\xd0\x44\x99\x0d\xec\x2a\x80\x4c\x9e\xac\xb2\x9c\x5d\x05" +
	"\x54\x3b\x7c\x5d\x74\xf9\xb2\xd3\x45\x4b\x17\x0b\x33\x72\x31\xd7\x72\xfc\xff\x91\x00\x5c\x6c\x9d\x47\x18\x15\x5d" +
	"\x24\xb9\x02\xeb\xf9\x91\x96\x88\x72\x5c\xc0\xc3\x73\xb8\x99\x6f\xf3\x69\x73\xbf\xb9\x5b\x17\xb5\xa3\xf7\x2d\x7b" +
	"\x67\x4f\x06\xbe\xf4\xdf\x58\x5b\xa1\x5c\x36\xe1\x52\x95\x58\x74\x61\xb4\x68\x5e\x7d\xb4\x2c\x6a\xe0\x6e\xbb\xdd" +
	"\x2e\xf2\x97\xc5\x19\x54\xd3\x2a\x9c\x84\x95\x2d\x7b\x03\xdf\x3f\xb7\xd7\x8c\x50\xe6\x51\x2c\xad\x34\xbc\x0b\x6e" +
	"\xad\x0a\x60\xd3\x68\xe0\x76\xbb\x0d\xab\x68\xa0\xc0\x72\x9a\x12\x7b\xb7\xc8\x08\xfd\x1a\x29\xbf\xc9\xb1\x7b\x8f" +
	"\x63\xb7\xe2\x38\xb2\x1f\x03\xed\x79\x8c\x2f\xfb\x0f\x25\xd6\xa2\x0e\x06\x9a\x23\x4a\xe3\xdd\x63\xf3\xf2\x05\x9e" +
	"\xe7\x30\x67\xea\x5c\xbe\xc9\x81\x56\x15\x79\x7c\x3c\xf3\xbc\x86\xaf\x65\x48\xed\x45\xa2\x49\xc2\x47\x57\xfe\xb1" +
	"\x8b\x87\xa6\x2c\xd5\x3c\xc0\x0f\xb4\x5f\x57\x9d\xbb\x5b\x34\x56\xff\xd3\x2e\x85\xa4\xa7\x07\x27\x06\x7e\xff\x59" +
	"\xc0\x2c\xc7\xde\x1d\xf6\x98\xd6\xa3\xee\xa8\xc7\xd1\xeb\x9e\x3b\x32\x70\x7f\xfb\xd6\x86\xbc\xef\xee\xc3\x1a\xf8" +
	"\x1b\x00\x00\xff\xff\xdf\xb0\xd2\x49\xca\x04\x00\x00")

func bindataDeploymentAlamedagrafanaDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedagrafanaDMyaml,
		"Deployment/alameda-grafanaDM.yaml",
	)
}



func bindataDeploymentAlamedagrafanaDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedagrafanaDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-grafanaDM.yaml",
		size: 1226,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555031457, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedainfluxdbDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x4f\x4f\xe3\x3a\x14\xc5\xf7\xfd\x14\x57\xbc\x05\xab\xb6\x74\xf5" +
	"\x24\xef\x02\x09\x8f\xe8\x41\x89\xda\x94\x99\x59\x55\xb7\xc9\x0d\xb5\x70\x6c\xcb\xbe\x29\x44\xa3\xf9\xee\x23\x87" +
	"\x16\x42\x69\x01\xcd\x78\x51\x55\xf6\x3d\xbf\x73\x4f\xfc\x07\xad\xbc\x23\xe7\xa5\xd1\x02\xd0\x5a\x3f\xde\x4c\x06" +
	"\x0f\x52\x97\x02\x62\xb2\xca\xb4\x35\x69\x1e\xd4\xc4\x58\x22\xa3\x18\x00\x68\xac\x49\x00\x2a\xac\xa9\xc4\xa1\xd4" +
	"\x95\x6a\x9e\xca\xd5\x76\xc1\x5b\x2c\x48\x40\x45\x25\x39\x64\xe3\x50\x0e\x00\x14\xae\x48\xf9\xa0\x85\x60\xf1\x22" +
	"\xee\x26\x0a\x53\x5b\xa3\x49\xf3\x41\x26\x6a\x6d\x18\x59\x1a\xbd\xd5\x97\xe4\x0b\x27\x2d\x77\xfd\xc6\x54\x49\x4d" +
	"\x1e\xd6\xe6\x11\xd8\x40\xd9\x35\x0c\xbc\xa6\x60\xa3\x64\xd1\x09\xa1\x87\x03\x60\xaa\xad\x42\xa6\x11\x2a\xbb\xc6" +
	"\x91\xb1\xa4\xfd\x5a\x56\x3c\x92\x66\xfc\x88\x92\x87\x95\x71\x43\x47\x58\xb6\x02\x4e\xd9\x35\x74\x3a\xf0\x96\x8a" +
	"\x60\xee\xa8\x63\x7a\x01\x93\x01\x80\x27\x45\x05\x1b\xf7\xdc\x56\x8d\x5c\xac\xaf\x7b\x39\xf7\xb3\xf6\x43\xed\x7a" +
	"\xd8\x4a\x7b\xdf\x36\x0c\xf5\x45\x0a\xc0\xae\xb1\x30\xfe\x01\x4f\x45\xe3\x24\xb7\x17\x46\x33\x3d\xf1\xeb\x02\x80" +
	"\x6b\x74\xe4\x17\x9e\x9c\x80\xc9\xd9\xd9\xd9\x76\xa5\x30\x9a\x51\x6a\x72\x2f\x66\xc3\xed\xe6\xbe\x71\x09\x43\xd6" +
	"\x78\xdf\x9b\x17\x93\xd1\xbf\x43\x54\x56\x6a\x7a\x5b\x92\x35\x4a\x65\x46\xc9\xa2\x15\x90\x56\x53\xc3\x99\x23\x1f" +
	"\x0e\xd0\xae\x8a\xf4\xe6\x35\xd9\xce\x2e\x9d\x5e\x5e\x2f\xbe\xc7\xe7\xcb\x59\x92\xdd\xce\xf2\x74\xfa\xdf\x32\x4e" +
	"\xe7\xd1\xf9\x75\x12\xbf\xd4\x02\x6c\x50\x35\x24\xe0\x24\x6c\xca\xc9\x71\xc6\x55\x9e\x67\xdd\xcf\x7c\x99\x4c\xff" +
	"\x9e\x71\x91\xcc\xf2\xf4\x32\xbd\x88\xf2\xe4\x00\x67\x4c\x5c\x8c\x59\xf9\xb1\x75\x72\x83\x4c\xe1\xff\xa8\x70\xfc" +
	"\x35\x76\x36\x4b\xef\xa2\x3c\x59\xfe\x9f\xfc\xf8\x2a\xfb\x81\xda\xcf\xd8\xd1\x22\xbf\xfa\xf3\xe8\x51\x7c\x93\x4e" +
	"\x97\x8b\x79\x32\x3b\xa0\xc5\xb2\x96\xfa\x53\x71\x16\xcd\xe7\xdf\x6e\x67\x87\xcc\x3b\x80\x45\xef\x3f\x80\x1c\xf1" +
	"\x6e\x3c\xb9\x4f\x54\x1f\x39\x07\xf9\x5b\xe3\x8d\x51\x4d\x4d\x37\xa6\xd1\xec\xfb\x67\xb2\x0e\x33\x19\xf2\x5a\xc0" +
	"\xfe\x16\xf4\xb8\x87\x5f\xc1\x21\x2b\xdf\x2b\x0a\xef\xc8\xad\x56\xad\x80\x0a\x95\xa7\x23\x26\x1b\x74\x63\x25\x57" +
	"\xe3\x77\xb7\x0e\xf6\xae\xe3\xd0\x87\x17\xf5\xbe\xdf\x86\x6f\x56\xcf\x94\x3d\xf1\x73\xb8\xa3\x17\xfb\x1d\x89\x6a" +
	"\xcb\x6d\x2c\x9d\x80\x9f\xbf\xf6\x34\x1f\x66\xf4\x54\x38\x62\xd1\xef\xa8\x9b\x99\x1e\x95\xfe\x0e\x00\x00\xff\xff" +
	"\x64\x59\x19\x56\x70\x06\x00\x00")

func bindataDeploymentAlamedainfluxdbDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedainfluxdbDMyaml,
		"Deployment/alameda-influxdbDM.yaml",
	)
}



func bindataDeploymentAlamedainfluxdbDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedainfluxdbDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-influxdbDM.yaml",
		size: 1648,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedaoperatorDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4b\x6f\xdb\x30\x0c\xbe\xfb\x57\x10\xb9\xf4\x64\x27\xed\xd6\x1d" +
	"\x74\xf3\xe0\x02\x2b\xd0\x47\x90\x76\xbb\x16\xac\x4c\xc7\xc2\xf4\xaa\x24\x3b\x30\x86\xfd\xf7\x41\x71\xdc\xc9\x4b" +
	"\x52\xcc\x47\x8a\xdf\x83\xf4\x47\xb4\xe2\x07\x39\x2f\x8c\x66\x80\xd6\xfa\x65\x7f\x99\xfd\x14\xba\x66\x50\x91\x95" +
	"\x66\x50\xa4\x43\xa6\x28\x60\x8d\x01\x59\x06\xa0\x51\x11\x03\x94\xa8\xa8\xc6\xdc\x58\x72\x18\x8c\x3b\x3c\x78\x8b" +
	"\x9c\x18\x34\x54\x8f\x65\x14\x19\x80\xc4\x57\x92\x3e\x62\x21\x4a\xbc\x83\xf7\x05\x6e\x94\x35\x9a\x74\x38\xc9\x89" +
	"\x5a\x9b\x80\x41\x18\x7d\xc0\xd7\xe4\xb9\x13\x36\xec\xfd\x56\xd4\x08\x4d\x1e\x5a\xb3\x83\x60\xa0\xde\x1b\x86\xd0" +
	"\x52\x94\x91\x82\xef\x81\xa7\x68\x01\x02\x29\x2b\x31\x50\x81\xd2\xb6\x58\x18\x4b\xda\xb7\xa2\x09\x85\x30\xcb\x1d" +
	"\x8a\x90\x37\xc6\xe5\x8e\xb0\x1e\x18\x5c\x04\xd7\xd1\x45\xe6\x2d\xf1\x68\xc2\xd1\x9e\xdb\x33\xb8\xcc\x00\x3c\x49" +
	"\xe2\xc1\xb8\xd1\x9e\xc2\xc0\xdb\xbb\x64\xde\xf9\xc4\xa9\x87\xc9\xc1\x01\x98\x6c\x38\x7e\x67\xb7\x1c\x3f\x39\x13" +
	"\x38\x2f\x01\x30\x79\x1e\x37\xad\x03\x0a\x4d\xee\x1d\x99\x7f\x2c\x03\x20\x14\x6e\x89\xc1\x5b\x87\x43\x5c\x8c\x75" +
	"\xc6\xb6\x14\x7c\x30\x6e\xf9\x2f\x26\x77\x2d\x49\xd6\xaf\x8a\x4f\xc5\x97\x39\x7e\xdd\x49\xb9\x36\x52\xf0\x81\xc1" +
	"\x6d\xf3\x60\xc2\xda\x91\x8f\xa9\x9a\xba\x1c\x79\xd3\x39\x4e\xc9\x44\x00\x52\x28\x11\x66\x15\x00\x6e\x3b\x06\x57" +
	"\x2b\x35\x2b\x2a\x52\xc6\x0d\x0c\x3e\xaf\xee\x45\xf2\xe0\xe8\xad\x23\x7f\x92\xe1\xf2\x0c\xc3\x55\xca\x40\xba\xff" +
	"\x0b\x9d\x16\x55\xde\x95\xf7\x37\x55\xf9\xf2\xb8\xbe\xd9\x94\xcf\x8f\x9b\x97\xaa\x7c\x2e\xbf\x7d\xff\xfa\x52\x56" +
	"\xd5\xe6\xe6\xe9\x29\xa1\xed\x51\x76\xc4\x60\x31\xed\x29\xfe\xdc\xb6\x7b\x2d\x92\xd3\x28\x7c\xcf\xd9\xf5\x6a\x75" +
	"\xbd\x5a\xbc\x03\x7b\x23\x3b\x45\xf7\xa6\xd3\xa9\xf5\x49\xdf\x9a\x5a\xe8\xc6\x24\x32\x2a\x76\xae\x31\xb4\x0c\x96" +
	"\x14\xf8\xf2\xb8\x23\x86\xf8\x51\xcb\x81\x41\x83\xd2\x53\xc2\x99\x62\x7b\x74\x4b\x69\xb6\x09\x6e\x54\x3c\xca\x46" +
	"\x2e\xcd\x36\x8f\x09\xc0\x2d\x25\xdd\xbe\x7b\x1d\x99\xce\x85\x29\x4b\xe7\x3b\x4a\xe0\xff\xc9\x90\xb2\x61\xa8\x84" +
	"\x63\xf0\xeb\x77\xf6\xf1\x66\x6a\xb3\xd3\x3b\x74\x75\xb9\xbe\x4d\x13\x20\x02\xa9\x59\x24\x72\xb0\x7b\xdb\x8b\xf1" +
	"\xa6\x16\xb3\x60\x34\x82\x64\xbd\xa1\x66\x9e\xa1\x43\x7d\x1c\x77\xba\xdb\x62\xc4\x1f\x1a\x3d\xb9\x5e\x70\x2a\x39" +
	"\x8f\x2b\x3e\x7b\x60\xf3\xb6\x87\x93\xb7\x18\xfb\xfe\x04\x00\x00\xff\xff\x7f\x42\x66\x89\xa4\x05\x00\x00")

func bindataDeploymentAlamedaoperatorDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedaoperatorDMyaml,
		"Deployment/alameda-operatorDM.yaml",
	)
}



func bindataDeploymentAlamedaoperatorDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedaoperatorDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-operatorDM.yaml",
		size: 1444,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554979197, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"CustomResourceDefinition/alamedarecommendationsCRD.yaml": bindataCustomResourceDefinitionAlamedarecommendationsCRDyaml,
	"CustomResourceDefinition/alamedascalersCRD.yaml":         bindataCustomResourceDefinitionAlamedascalersCRDyaml,
	"ClusterRole/admission-controllerCR.yaml":                 bindataClusterRoleAdmissioncontrollerCRyaml,
	"ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml": bindataClusterRoleAggregatealamedaadmineditalamedaCRyaml,
	"ClusterRole/alameda-datahubCR.yaml":                      bindataClusterRoleAlamedadatahubCRyaml,
	"ClusterRole/alameda-evictionerCR.yaml":                   bindataClusterRoleAlamedaevictionerCRyaml,
	"ClusterRole/alameda-operatorCR.yaml":                     bindataClusterRoleAlamedaoperatorCRyaml,
	"ServiceAccount/admission-controllerSA.yaml":              bindataServiceAccountAdmissioncontrollerSAyaml,
	"ServiceAccount/alameda-aiSA.yaml":                        bindataServiceAccountAlamedaaiSAyaml,
	"ServiceAccount/alameda-datahubSA.yaml":                   bindataServiceAccountAlamedadatahubSAyaml,
	"ServiceAccount/alameda-evictionerSA.yaml":                bindataServiceAccountAlamedaevictionerSAyaml,
	"ServiceAccount/alameda-operatorSA.yaml":                  bindataServiceAccountAlamedaoperatorSAyaml,
	"ClusterRoleBinding/admission-controllerCRB.yaml":         bindataClusterRoleBindingAdmissioncontrollerCRByaml,
	"ClusterRoleBinding/alameda-datahubCRB.yaml":              bindataClusterRoleBindingAlamedadatahubCRByaml,
	"ClusterRoleBinding/alameda-evictionerCRB.yaml":           bindataClusterRoleBindingAlamedaevictionerCRByaml,
	"ClusterRoleBinding/alameda-operatorCRB.yaml":             bindataClusterRoleBindingAlamedaoperatorCRByaml,
	"Secret/admission-controller-tls.yaml":                    bindataSecretAdmissioncontrollertlsyaml,
	"Secret/alameda-influxdb.yaml":                            bindataSecretAlamedainfluxdbyaml,
	"ConfigMap/grafana-datasources.yaml":                      bindataConfigMapGrafanadatasourcesyaml,
	"PersistentVolumeClaim/admission-controller-log.yaml":     bindataPersistentVolumeClaimAdmissioncontrollerlogyaml,
	"PersistentVolumeClaim/alameda-ai-log.yaml":               bindataPersistentVolumeClaimAlamedaailogyaml,
	"PersistentVolumeClaim/alameda-datahub-log.yaml":          bindataPersistentVolumeClaimAlamedadatahublogyaml,
	"PersistentVolumeClaim/alameda-evictioner-log.yaml":       bindataPersistentVolumeClaimAlamedaevictionerlogyaml,
	"PersistentVolumeClaim/alameda-operator-log.yaml":         bindataPersistentVolumeClaimAlamedaoperatorlogyaml,
	"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml":         bindataPersistentVolumeClaimMyalamedagrafanaPVCyaml,
	"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml":        bindataPersistentVolumeClaimMyalamedainfluxdbPVCyaml,
	"Service/admission-controllerSV.yaml":                     bindataServiceAdmissioncontrollerSVyaml,
	"Service/alameda-datahubSV.yaml":                          bindataServiceAlamedadatahubSVyaml,
	"Service/alameda-grafanaSV.yaml":                          bindataServiceAlamedagrafanaSVyaml,
	"Service/alameda-influxdbSV.yaml":                         bindataServiceAlamedainfluxdbSVyaml,
	"Deployment/admission-controllerDM.yaml":                  bindataDeploymentAdmissioncontrollerDMyaml,
	"Deployment/alameda-aiDM.yaml":                            bindataDeploymentAlamedaaiDMyaml,
	"Deployment/alameda-datahubDM.yaml":                       bindataDeploymentAlamedadatahubDMyaml,
	"Deployment/alameda-evictionerDM.yaml":                    bindataDeploymentAlamedaevictionerDMyaml,
	"Deployment/alameda-grafanaDM.yaml":                       bindataDeploymentAlamedagrafanaDMyaml,
	"Deployment/alameda-influxdbDM.yaml":                      bindataDeploymentAlamedainfluxdbDMyaml,
	"Deployment/alameda-operatorDM.yaml":                      bindataDeploymentAlamedaoperatorDMyaml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"ClusterRole": {Func: nil, Children: map[string]*bintree{
		"admission-controllerCR.yaml": {Func: bindataClusterRoleAdmissioncontrollerCRyaml, Children: map[string]*bintree{}},
		"aggregate-alameda-admin-edit-alamedaCR.yaml": {Func: bindataClusterRoleAggregatealamedaadmineditalamedaCRyaml, Children: map[string]*bintree{}},
		"alameda-datahubCR.yaml": {Func: bindataClusterRoleAlamedadatahubCRyaml, Children: map[string]*bintree{}},
		"alameda-evictionerCR.yaml": {Func: bindataClusterRoleAlamedaevictionerCRyaml, Children: map[string]*bintree{}},
		"alameda-operatorCR.yaml": {Func: bindataClusterRoleAlamedaoperatorCRyaml, Children: map[string]*bintree{}},
	}},
	"ClusterRoleBinding": {Func: nil, Children: map[string]*bintree{
		"admission-controllerCRB.yaml": {Func: bindataClusterRoleBindingAdmissioncontrollerCRByaml, Children: map[string]*bintree{}},
		"alameda-datahubCRB.yaml": {Func: bindataClusterRoleBindingAlamedadatahubCRByaml, Children: map[string]*bintree{}},
		"alameda-evictionerCRB.yaml": {Func: bindataClusterRoleBindingAlamedaevictionerCRByaml, Children: map[string]*bintree{}},
		"alameda-operatorCRB.yaml": {Func: bindataClusterRoleBindingAlamedaoperatorCRByaml, Children: map[string]*bintree{}},
	}},
	"ConfigMap": {Func: nil, Children: map[string]*bintree{
		"grafana-datasources.yaml": {Func: bindataConfigMapGrafanadatasourcesyaml, Children: map[string]*bintree{}},
	}},
	"CustomResourceDefinition": {Func: nil, Children: map[string]*bintree{
		"alamedarecommendationsCRD.yaml": {Func: bindataCustomResourceDefinitionAlamedarecommendationsCRDyaml, Children: map[string]*bintree{}},
		"alamedascalersCRD.yaml": {Func: bindataCustomResourceDefinitionAlamedascalersCRDyaml, Children: map[string]*bintree{}},
	}},
	"Deployment": {Func: nil, Children: map[string]*bintree{
		"admission-controllerDM.yaml": {Func: bindataDeploymentAdmissioncontrollerDMyaml, Children: map[string]*bintree{}},
		"alameda-aiDM.yaml": {Func: bindataDeploymentAlamedaaiDMyaml, Children: map[string]*bintree{}},
		"alameda-datahubDM.yaml": {Func: bindataDeploymentAlamedadatahubDMyaml, Children: map[string]*bintree{}},
		"alameda-evictionerDM.yaml": {Func: bindataDeploymentAlamedaevictionerDMyaml, Children: map[string]*bintree{}},
		"alameda-grafanaDM.yaml": {Func: bindataDeploymentAlamedagrafanaDMyaml, Children: map[string]*bintree{}},
		"alameda-influxdbDM.yaml": {Func: bindataDeploymentAlamedainfluxdbDMyaml, Children: map[string]*bintree{}},
		"alameda-operatorDM.yaml": {Func: bindataDeploymentAlamedaoperatorDMyaml, Children: map[string]*bintree{}},
	}},
	"PersistentVolumeClaim": {Func: nil, Children: map[string]*bintree{
		"admission-controller-log.yaml": {Func: bindataPersistentVolumeClaimAdmissioncontrollerlogyaml, Children: map[string]*bintree{}},
		"alameda-ai-log.yaml": {Func: bindataPersistentVolumeClaimAlamedaailogyaml, Children: map[string]*bintree{}},
		"alameda-datahub-log.yaml": {Func: bindataPersistentVolumeClaimAlamedadatahublogyaml, Children: map[string]*bintree{}},
		"alameda-evictioner-log.yaml": {Func: bindataPersistentVolumeClaimAlamedaevictionerlogyaml, Children: map[string]*bintree{}},
		"alameda-operator-log.yaml": {Func: bindataPersistentVolumeClaimAlamedaoperatorlogyaml, Children: map[string]*bintree{}},
		"my-alamedagrafanaPVC.yaml": {Func: bindataPersistentVolumeClaimMyalamedagrafanaPVCyaml, Children: map[string]*bintree{}},
		"my-alamedainfluxdbPVC.yaml": {Func: bindataPersistentVolumeClaimMyalamedainfluxdbPVCyaml, Children: map[string]*bintree{}},
	}},
	"Secret": {Func: nil, Children: map[string]*bintree{
		"admission-controller-tls.yaml": {Func: bindataSecretAdmissioncontrollertlsyaml, Children: map[string]*bintree{}},
		"alameda-influxdb.yaml": {Func: bindataSecretAlamedainfluxdbyaml, Children: map[string]*bintree{}},
	}},
	"Service": {Func: nil, Children: map[string]*bintree{
		"admission-controllerSV.yaml": {Func: bindataServiceAdmissioncontrollerSVyaml, Children: map[string]*bintree{}},
		"alameda-datahubSV.yaml": {Func: bindataServiceAlamedadatahubSVyaml, Children: map[string]*bintree{}},
		"alameda-grafanaSV.yaml": {Func: bindataServiceAlamedagrafanaSVyaml, Children: map[string]*bintree{}},
		"alameda-influxdbSV.yaml": {Func: bindataServiceAlamedainfluxdbSVyaml, Children: map[string]*bintree{}},
	}},
	"ServiceAccount": {Func: nil, Children: map[string]*bintree{
		"admission-controllerSA.yaml": {Func: bindataServiceAccountAdmissioncontrollerSAyaml, Children: map[string]*bintree{}},
		"alameda-aiSA.yaml": {Func: bindataServiceAccountAlamedaaiSAyaml, Children: map[string]*bintree{}},
		"alameda-datahubSA.yaml": {Func: bindataServiceAccountAlamedadatahubSAyaml, Children: map[string]*bintree{}},
		"alameda-evictionerSA.yaml": {Func: bindataServiceAccountAlamedaevictionerSAyaml, Children: map[string]*bintree{}},
		"alameda-operatorSA.yaml": {Func: bindataServiceAccountAlamedaoperatorSAyaml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
