// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ClusterRoleBinding\admission-controllerCRB.yaml
// ClusterRoleBinding\alameda-datahubCRB.yaml
// ClusterRoleBinding\alameda-evictionerCRB.yaml
// ClusterRoleBinding\alameda-operatorCRB.yaml
// ClusterRole\admission-controllerCR.yaml
// ClusterRole\aggregate-alameda-admin-edit-alamedaCR.yaml
// ClusterRole\alameda-datahubCR.yaml
// ClusterRole\alameda-evictionerCR.yaml
// ClusterRole\alameda-operatorCR.yaml
// ServiceAccount\admission-controllerSA.yaml
// ServiceAccount\alameda-aiSA.yaml
// ServiceAccount\alameda-datahubSA.yaml
// ServiceAccount\alameda-evictionerSA.yaml
// ServiceAccount\alameda-operatorSA.yaml
// CustomResourceDefinition\alamedarecommendationsCRD.yaml
// CustomResourceDefinition\alamedascalersCRD.yaml
// ConfigMap\grafana-datasources.yaml
// Deployment\admission-controllerDM.yaml
// Deployment\alameda-aiDM.yaml
// Deployment\alameda-datahubDM.yaml
// Deployment\alameda-evictionerDM.yaml
// Deployment\alameda-grafanaDM.yaml
// Deployment\alameda-influxdbDM.yaml
// Deployment\alameda-operatorDM.yaml
// Service\admission-controllerSV.yaml
// Service\alameda-datahubSV.yaml
// Service\alameda-grafanaSV.yaml
// Service\alameda-influxdbSV.yaml
// PersistentVolumeClaim\admission-controller-log.yaml
// PersistentVolumeClaim\alameda-ai-log.yaml
// PersistentVolumeClaim\alameda-datahub-log.yaml
// PersistentVolumeClaim\alameda-evictioner-log.yaml
// PersistentVolumeClaim\alameda-operator-log.yaml
// PersistentVolumeClaim\my-alamedagrafanaPVC.yaml
// PersistentVolumeClaim\my-alamedainfluxdbPVC.yaml
// Secret\admission-controller-tls.yaml
// Secret\alameda-influxdb.yaml

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataClusterRoleBindingadmissioncontrollerCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\x31\x4e\xc0\x30\x0c\x45\xf7\x48\xb9\x43\x2e\xd0\x22\x36\x94\x0d" +
	"\x18\xd8\x8b\xc4\xee\x26\x2e\x98\xa6\x76\xe4\x38\x1d\x38\x3d\x6a\x45\x07\x04\x42\x62\xfe\xf6\x7b\x0f\x2a\xbd\xa0" +
	"\x36\x12\x8e\x41\x67\x48\x23\x74\x7b\x13\xa5\x0f\x30\x12\x1e\xd7\xbb\x36\x92\xdc\xec\xb7\xde\xad\xc4\x39\x86\xc7" +
	"\xd2\x9b\xa1\x4e\x52\xf0\x81\x38\x13\xbf\x7a\xb7\xa1\x41\x06\x83\xe8\x5d\x08\x0c\x1b\xc6\xb0\x60\x46\x05\x13\x05" +
	"\x1a\x20\x6f\xd4\x0e\xc3\x90\x84\x4d\xa5\x14\x54\xef\x54\x0a\x4e\xb8\x9c\x3f\x50\xe9\x49\xa5\xd7\x3f\x12\x8e\xb3" +
	"\x1f\x05\xff\xf1\xb5\x3e\xbf\x63\xb2\x76\x0a\x87\x2f\xd6\x33\xea\x4e\x09\xef\x53\x92\xce\x76\x2c\x17\xf0\x77\xc8" +
	"\xb5\xb7\x0a\xe9\xbb\xf5\x33\x00\x00\xff\xff\xf1\x2b\x30\x0e\x48\x01\x00\x00")

func bindataClusterRoleBindingadmissioncontrollerCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingadmissioncontrollerCRByaml,
		"ClusterRoleBinding/admission-controllerCRB.yaml",
	)
}



func bindataClusterRoleBindingadmissioncontrollerCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingadmissioncontrollerCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/admission-controllerCRB.yaml",
		size: 328,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingalamedadatahubCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xb1\x6a\xc3\x30\x10\xc6\xf1\x5d\xa0\x77\xd0\x0b\xd8\xa5\x5b\xd1" +
	"\xd6\x76\xe8\xee\x42\xf7\xb3\x74\xae\xaf\x96\x75\xe2\x74\xf2\xd0\xa7\x0f\x4e\x02\x21\x18\x42\xe6\xfb\xdf\xf7\x83" +
	"\x42\x3f\x28\x95\x38\x7b\x27\x23\x84\x1e\x9a\xce\x2c\xf4\x0f\x4a\x9c\xfb\xe5\xad\xf6\xc4\x2f\xdb\xab\x35\x0b\xe5" +
	"\xe8\xdd\x67\x6a\x55\x51\x06\x4e\xf8\x41\x39\x52\xfe\xb5\x66\x45\x85\x08\x0a\xde\x1a\xe7\x32\xac\xe8\xdd\x84\x11" +
	"\x05\x94\x05\xa8\x83\x04\x2b\x46\xe8\xf6\x64\x6e\xa3\x35\xc2\x09\x07\x9c\xce\x39\x14\xfa\x12\x6e\xe5\x81\xbe\x67" +
	"\x07\xfc\x49\xaa\xb6\xf1\x0f\x83\x56\x6f\x4d\x77\x1d\xf9\x46\xd9\x28\xe0\x7b\x08\xdc\xb2\xde\x76\x0e\xbf\x97\x43" +
	"\x2d\x10\xee\x95\x53\x00\x00\x00\xff\xff\x4c\xd6\xf1\xee\x33\x01\x00\x00")

func bindataClusterRoleBindingalamedadatahubCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingalamedadatahubCRByaml,
		"ClusterRoleBinding/alameda-datahubCRB.yaml",
	)
}



func bindataClusterRoleBindingalamedadatahubCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingalamedadatahubCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-datahubCRB.yaml",
		size: 307,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingalamedaevictionerCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x31\x6e\xc3\x30\x0c\x45\x77\x01\xba\x83\x2e\x60\x17\xdd\x0a\x6d" +
	"\x6d\x87\xee\x2e\xd0\x9d\x96\xe8\x86\xb1\x2c\x0a\x14\xe5\x21\xa7\x0f\x9c\x04\x08\x82\x04\x41\x66\xf2\xbd\xf7\xa1" +
	"\xd0\x1f\x4a\x25\xce\xde\xc9\x08\xa1\x87\xa6\x3b\x16\x3a\x80\x12\xe7\x7e\xfe\xa8\x3d\xf1\xdb\xfa\x6e\xcd\x4c\x39" +
	"\x7a\xf7\x9d\x5a\x55\x94\x81\x13\x7e\x51\x8e\x94\xff\xad\x59\x50\x21\x82\x82\xb7\xc6\xb9\x0c\x0b\x7a\x37\x61\x44" +
	"\x01\x65\x01\xea\x20\xc1\x82\x11\x3a\x5c\x29\x6c\x52\x14\x6b\x84\x13\x0e\x38\x9d\x08\x28\xf4\x23\xdc\xca\x93\x01" +
	"\xdb\xdb\x5d\xff\xf5\x5a\x6d\xe3\x1e\x83\x56\x6f\x4d\x77\xf1\xfc\xa2\xac\x14\xf0\x33\x04\x6e\x59\xaf\xaa\x47\xf8" +
	"\xf9\x56\x0b\x84\xdb\xd6\x31\x00\x00\xff\xff\x22\x7a\x42\xcd\x3c\x01\x00\x00")

func bindataClusterRoleBindingalamedaevictionerCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingalamedaevictionerCRByaml,
		"ClusterRoleBinding/alameda-evictionerCRB.yaml",
	)
}



func bindataClusterRoleBindingalamedaevictionerCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingalamedaevictionerCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-evictionerCRB.yaml",
		size: 316,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingalamedaoperatorCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xb1\x6a\xc3\x30\x10\x06\xe0\x5d\xa0\x77\xd0\x0b\xd8\xa5\x5b\xd1" +
	"\xd6\x76\xe8\xee\x42\xf7\xb3\x74\x6e\x2e\x96\x75\xe2\x74\xf2\x90\xa7\x0f\x89\x03\x21\x18\x42\xd6\xbb\xff\xff\x3f" +
	"\x28\xf4\x87\x52\x89\xb3\x77\x32\x42\xe8\xa1\xe9\x81\x85\x4e\xa0\xc4\xb9\x9f\x3f\x6a\x4f\xfc\xb6\xbe\x5b\x33\x53" +
	"\x8e\xde\x7d\xa7\x56\x15\x65\xe0\x84\x5f\x94\x23\xe5\x7f\x6b\x16\x54\x88\xa0\xe0\xad\x71\x2e\xc3\x82\xde\x4d\x18" +
	"\x51\x40\x59\x80\x3a\x48\xb0\x60\x84\x8e\xcb\x76\xb2\x46\x38\xe1\x80\xd3\x35\x0f\x85\x7e\x84\x5b\x79\xc2\x5f\x62" +
	"\x3b\xfd\x55\xab\xb6\xf1\x88\x41\xab\xb7\xa6\xbb\xad\xfc\xa2\xac\x14\xf0\x33\x04\x6e\x59\xef\x43\xfb\xf2\xf6\xa9" +
	"\x05\xc2\xa3\x73\x0e\x00\x00\xff\xff\x3b\x4d\x10\x29\x36\x01\x00\x00")

func bindataClusterRoleBindingalamedaoperatorCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingalamedaoperatorCRByaml,
		"ClusterRoleBinding/alameda-operatorCRB.yaml",
	)
}



func bindataClusterRoleBindingalamedaoperatorCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingalamedaoperatorCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-operatorCRB.yaml",
		size: 310,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleadmissioncontrollerCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x31\x6f\xbc\x30\x0c\xc5\x77\x24\xbe\x43\x74\x3b\xfc\xf5\xdf\x2a" +
	"\xd6\x0e\xdd\x3b\x74\x37\x89\x01\x8b\x10\x47\xb6\x73\x55\xfb\xe9\x2b\xca\xa9\xb0\x50\xdd\xa9\xd9\x5e\xe4\x97\xdf" +
	"\x7b\x31\x64\x7a\x43\x51\xe2\xd4\x39\xe9\xc1\xb7\x50\x6c\x62\xa1\x4f\x30\xe2\xd4\xce\x4f\xda\x12\xff\xbb\xfe\xaf" +
	"\xab\x99\x52\xe8\xdc\x73\x2c\x6a\x28\xaf\x1c\xb1\xae\x16\x34\x08\x60\xd0\xd5\x95\x73\x09\x16\xec\xdc\x80\x01\x05" +
	"\x8c\x05\xa8\x81\xb0\x90\xae\x4f\x37\x9e\x93\x09\xc7\x88\x52\x57\x52\x22\xea\xb7\xa3\x71\x90\xe9\x45\xb8\xe4\x4d" +
	"\xaf\xa7\x71\x97\x1f\x9b\xe0\x48\x6a\x72\x4c\x72\xd9\xe6\x04\x95\x8b\x78\x3c\xfa\x96\x62\x60\x94\xc6\x77\xec\x27" +
	"\xe6\xd9\x73\x1a\x68\x2c\x9b\x5b\xb7\xb1\x2b\x4a\x7f\xb4\x8c\x68\xbb\xf0\x82\x60\xb8\xeb\x92\xc3\x4d\x9f\xe4\xfc" +
	"\x25\x4b\xe6\x70\x0f\x32\x92\x1e\x54\x06\xf3\xd3\x39\x0f\x72\xd6\x73\xa2\x60\x8e\xe4\x41\xd1\x74\xbf\x0c\x98\x23" +
	"\x7f\x2c\x98\xec\x91\x34\x8f\xd7\xbd\xc1\xd7\x9f\xde\x37\xfd\x77\xe4\xda\xb8\xe5\x8c\x49\x27\x1a\xac\x25\x3e\x4f" +
	"\xb0\x37\xdd\xf6\x7e\x2f\xfc\x2b\x00\x00\xff\xff\xb5\x2b\xfb\x62\xff\x02\x00\x00")

func bindataClusterRoleadmissioncontrollerCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleadmissioncontrollerCRyaml,
		"ClusterRole/admission-controllerCR.yaml",
	)
}



func bindataClusterRoleadmissioncontrollerCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleadmissioncontrollerCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/admission-controllerCR.yaml",
		size: 767,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleaggregatealamedaadmineditalamedaCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xbf\x6a\x33\x31\x10\xc4\x7b\xc3\xbd\x83\x70\x7f\xf7\xf1\x75\xe1" +
	"\xda\x14\xe9\x53\xa4\x9f\x93\x86\xf3\x62\xfd\x39\x56\x2b\x07\xf2\xf4\x41\xbe\xd8\xee\x42\x02\xe9\x7e\xec\xce\xec" +
	"\x8c\x84\x4d\xde\xa8\x55\x4a\x9e\x9d\x2e\xf0\x13\x9a\x9d\x8a\xca\x07\x4c\x4a\x9e\xce\x4f\x75\x92\xf2\xef\xf2\x7f" +
	"\x38\x9c\x25\x87\xd9\x3d\xc7\x56\x8d\xfa\x5a\x22\x87\x43\xa2\x21\xc0\x30\x0f\x07\xe7\x32\x12\x67\x87\x75\x55\xae" +
	"\x30\x8e\x88\x48\x0c\x18\x11\x92\xe4\x91\x41\xec\x36\xea\xea\x88\x85\xb1\x5e\x8d\xee\x9b\xe0\xc7\x39\x2b\xfb\xa5" +
	"\xd9\x1d\x4d\x1b\x8f\xbf\x72\xf6\xf4\x87\x51\x5b\x64\x8f\x1e\x1d\x36\x79\xd1\xd2\xb6\xbd\xc8\xe8\xd0\xac\x54\x8f" +
	"\x28\x79\x9d\x7c\xc9\x06\xc9\xd4\x3a\x41\xfa\x5a\x59\x4b\x53\xcf\xbb\x78\x7f\x4d\xd7\x53\x6b\x9f\x5d\xa8\xcb\x6d" +
	"\xbb\xd2\x76\x88\x52\xbf\xc8\x2b\x61\xdc\xb9\x6d\xe1\xce\x81\x91\x9d\xff\xa6\x8f\xd2\x97\x94\x98\xc3\xf5\x3b\x7e" +
	"\xd2\xeb\x1d\xe6\x4f\x9f\x01\x00\x00\xff\xff\xc6\xe3\x80\x4c\x09\x02\x00\x00")

func bindataClusterRoleaggregatealamedaadmineditalamedaCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleaggregatealamedaadmineditalamedaCRyaml,
		"ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml",
	)
}



func bindataClusterRoleaggregatealamedaadmineditalamedaCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleaggregatealamedaadmineditalamedaCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml",
		size: 521,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRolealamedadatahubCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x31\x4f\xc3\x40\x0c\x85\xf7\x48\xf9\x0f\x56\x99\x13\xc4\x86\xb2" +
	"\x32\xb0\x22\x06\x76\x37\xf7\xda\x58\xcd\x9d\x0f\xdb\x57\x09\x7e\x3d\x4a\x8b\xaa\x76\xba\xf3\xf3\xd3\xf7\x6c\x73" +
	"\x95\x2f\x98\x8b\x96\x89\x6c\xcf\xf3\xc8\x2d\x16\x35\xf9\xe5\x10\x2d\xe3\xe9\xd5\x47\xd1\xe7\xf3\x4b\xdf\x9d\xa4" +
	"\xa4\x89\xde\xd6\xe6\x01\xfb\xd4\x15\x7d\x97\x11\x9c\x38\x78\xea\x3b\xa2\xc2\x19\x13\x1d\x90\x60\x1c\x6a\x2c\x03" +
	"\xaf\x9c\x91\x78\xd8\x2c\x4b\xdb\xf7\x9d\xb5\x15\x3e\xf5\xdd\x13\x7d\xc0\xb2\xf8\x16\x4b\x07\x35\xfa\x6e\xb0\x1f" +
	"\xaa\xa6\x19\xb1\xa0\x39\xb5\x92\x60\x17\xa4\x57\x9e\x41\x5a\x51\x7c\x91\x43\x0c\x59\x8b\x84\x9a\x94\x23\xf5\xdd" +
	"\x40\x5c\xe5\xdd\xb4\x55\x9f\x68\x1b\x62\xa0\xdd\x6e\x7b\x0d\xae\xcd\x66\xdc\xe4\x1b\xca\xb7\xfa\x0c\xdb\xdf\x5a" +
	"\x47\xc4\x23\xe9\x2a\x73\x0b\xf5\x99\x57\x29\xc7\x71\xd6\x12\x2c\x05\xe6\x23\xcb\x23\xff\xdf\x7c\x5d\xd5\x30\x6b" +
	"\xce\x28\xe9\x72\xbd\xbb\xa8\xbb\xa4\xed\xd3\x6a\xe2\xc0\x5f\x00\x00\x00\xff\xff\xcf\xba\x16\xbd\x7c\x01\x00\x00" +
	"")

func bindataClusterRolealamedadatahubCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRolealamedadatahubCRyaml,
		"ClusterRole/alameda-datahubCR.yaml",
	)
}



func bindataClusterRolealamedadatahubCRyaml() (*asset, error) {
	bytes, err := bindataClusterRolealamedadatahubCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-datahubCR.yaml",
		size: 380,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555379301, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRolealamedaevictionerCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x4e\x04\x31\x0c\x44\xfb\x95\xf2\x0f\xd1\xf5\x1b\x44\x87\xd2" +
	"\x52\xd0\x53\xd0\xfb\x92\xe1\xb0\x2e\x89\x57\xb6\x73\x05\x5f\x8f\xf6\xe0\x0a\xa4\xad\x3c\x7a\xb2\xc7\xa3\xa1\x8d" +
	"\x3f\xa0\xc6\x32\x72\xd4\x33\x95\x44\xd3\xbf\x44\xf9\x9b\x9c\x65\xa4\xeb\x8b\x25\x96\xa7\xdb\x73\x58\xae\x3c\x6a" +
	"\x8e\xaf\x6d\x9a\x43\xdf\xa5\x21\x2c\x1d\x4e\x95\x9c\x72\x58\x62\x1c\xd4\x91\xe3\x27\x2a\x94\x5c\x94\x78\xa5\x46" +
	"\x1d\x95\x56\xdc\xb8\xec\x6e\xd0\xb0\xe8\x6c\xb0\x1c\x96\x35\xd2\xc6\x6f\x2a\x73\xb3\xfb\xf5\x1a\x4f\xa7\x7d\x2a" +
	"\x4c\xa6\x16\x3c\xe8\x26\xd5\x76\x75\x83\x9e\x1f\xec\x02\xff\x15\x15\x0d\x8e\x23\x33\x9a\x2e\x56\xa8\xf1\xb8\xa4" +
	"\x22\xc3\x89\x07\xd4\x12\xf1\xd1\x8f\xbf\x9c\xfb\x3e\xd4\xfe\x31\x45\x91\xde\x31\xea\xbd\x8e\xa3\x24\x3f\x01\x00" +
	"\x00\xff\xff\x84\x7e\x10\x71\x41\x01\x00\x00")

func bindataClusterRolealamedaevictionerCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRolealamedaevictionerCRyaml,
		"ClusterRole/alameda-evictionerCR.yaml",
	)
}



func bindataClusterRolealamedaevictionerCRyaml() (*asset, error) {
	bytes, err := bindataClusterRolealamedaevictionerCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-evictionerCR.yaml",
		size: 321,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645578, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRolealamedaoperatorCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\xb1\x6e\xdb\x30\x10\xdd\x0d\xf8\x1f\x88\x74\xb6\x82\x6e\x85\xd7" +
	"\x0e\x5d\x8b\x0e\xdd\xcf\xe4\x93\x7c\x30\xc5\x63\xef\x48\xa7\xc9\xd7\x17\xb2\x64\x47\x41\x99\x22\x69\x81\x4e\x3e" +
	"\x9c\x49\xbe\x77\xf7\xde\x13\x65\xfe\x0e\x35\x96\xb4\x77\x7a\x20\xdf\x51\x2d\x47\x51\x7e\xa2\xc2\x92\xba\xd3\x27" +
	"\xeb\x58\xee\xcf\x1f\xb7\x9b\x13\xa7\xb0\x77\x9f\x63\xb5\x02\xfd\x26\x11\xdb\xcd\x88\x42\x81\x0a\xed\xb7\x1b\xe7" +
	"\x12\x8d\xd8\xbb\x1e\x01\x4a\x45\x94\x78\x47\x91\x46\x04\xda\x49\x9e\x5b\xdb\x8d\xd6\x08\xdb\x6f\x37\x3b\x47\x99" +
	"\xbf\xa8\xd4\x6c\x97\xbb\x3b\x77\x77\x37\xfd\x2a\x4c\xaa\x7a\x5c\xbb\x49\x02\x6c\x2e\xb3\x84\xa5\x52\xe4\xc8\xfe" +
	"\xc2\xcf\x4b\x2a\x2a\x31\x42\x2f\xff\x9d\xa1\x87\xeb\xd5\x01\x65\x2e\x22\xdb\x52\x3d\x50\xf1\xc7\x16\x38\xe5\x6c" +
	"\x2d\xf8\x05\xc9\x50\x16\xe8\x80\x1c\xe5\x71\x44\x2a\xef\xc0\x9b\x4a\xaf\xa0\x82\xb9\xae\x39\xdc\xea\xfc\x7c\x24" +
	"\x20\x62\x6a\xb7\xe9\x75\x92\x91\xec\xc8\x7d\xe9\x58\x5a\x5c\x9f\xa9\x79\x49\x3d\x0f\xff\xb6\x90\x5a\xc4\x3c\x45" +
	"\x4e\x43\x37\xed\x98\x38\x41\xad\x23\x6e\x21\x2f\x32\x4f\xe7\x17\x1d\x6e\x3d\x85\x97\x71\x44\x0a\x17\xb5\xfe\xeb" +
	"\xce\xfe\x7e\x82\xfb\x9e\x13\x45\x7e\x6a\x98\xea\x4a\xe3\x83\xfb\x0a\x1d\xd9\xa6\xdc\xb8\x5e\xd4\xfd\xa8\xd0\x47" +
	"\x97\x55\x46\x94\x23\xaa\xb9\x9a\x02\xf4\x92\x09\xcb\xe4\xe1\x6e\xf2\xed\x46\x49\x5c\x44\x39\x0d\xee\x25\x71\xd7" +
	"\x4e\xc2\xd2\xbe\x3d\xb5\x22\xe5\x56\x6b\x6c\xd9\x86\xf1\xb3\x20\x4d\x24\x6d\x49\x72\x6b\x7a\x5f\xad\xc8\x78\xed" +
	"\x06\xf4\x9c\xf8\xcf\x72\xb5\x94\x79\x6b\xa4\x0d\x5e\xf1\x7b\x7c\xd6\x4f\xae\x3c\x30\x1b\xa3\x31\x5b\x58\xb6\xaf" +
	"\x18\xd8\x8a\xae\xbf\x56\x2d\xd4\x33\x45\x9e\x4c\x98\x86\x07\x1c\x8e\x22\xa7\x39\x24\x55\xdb\xc6\x7c\x83\x0b\x5f" +
	"\x63\xf6\xda\xd4\x7a\xe6\x17\xda\xbd\x0b\xe8\x57\x00\x00\x00\xff\xff\x47\xf1\xf1\x0d\xa6\x05\x00\x00")

func bindataClusterRolealamedaoperatorCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRolealamedaoperatorCRyaml,
		"ClusterRole/alameda-operatorCR.yaml",
	)
}



func bindataClusterRolealamedaoperatorCRyaml() (*asset, error) {
	bytes, err := bindataClusterRolealamedaoperatorCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-operatorCR.yaml",
		size: 1446,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountadmissioncontrollerSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcb\x31\x0a\x42\x31\x0c\x06\xe0\xbd\xd0\x3b\xe4\x02\x0e\xae\xd9\x3c" +
	"\x83\xe0\x1e\xd2\x5f\x08\xbe\x26\x8f\x34\xf6\xfc\xe2\xf0\xe6\x8f\x4f\x4e\x7b\x21\x97\x85\x33\xed\x7b\x6f\x1f\xf3" +
	"\xc1\xf4\x44\x6e\x53\x3c\x54\xe3\xeb\xd5\xdb\x44\xc9\x90\x12\xee\x8d\xc8\x65\x82\x49\xc6\xb4\xf5\x7f\x37\x0d\xaf" +
	"\x8c\xe3\x40\x5e\xba\x4e\x51\x30\xbd\x31\x90\x52\x91\x62\xbf\x00\x00\x00\xff\xff\xd9\x4c\xcf\x12\x67\x00\x00\x00" +
	"")

func bindataServiceAccountadmissioncontrollerSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountadmissioncontrollerSAyaml,
		"ServiceAccount/admission-controllerSA.yaml",
	)
}



func bindataServiceAccountadmissioncontrollerSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountadmissioncontrollerSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/admission-controllerSA.yaml",
		size: 103,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountalamedaaiSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xc8\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x52\x76\xf0\x02\x14\xb4\xee\x98" +
	"\x01\x89\xfe\x2b\xfe\x48\x16\xc4\x39\xf9\x4c\xe6\xa7\xba\xf6\xe1\xf0\x17\xf3\xf4\x15\x2a\xfb\xde\xdb\xc7\xc3\x54" +
	"\x9e\xcc\xed\x83\x8f\x31\xd6\x2f\xaa\xb7\xc9\x82\xa1\xa0\xbd\x89\x04\x26\x55\xf0\xc5\xa4\xe1\x06\xbf\xec\x3c\x30" +
	"\xa8\xf2\xa6\x31\x51\x2b\xe1\xff\x00\x00\x00\xff\xff\x07\xaf\x8b\xb5\x5d\x00\x00\x00")

func bindataServiceAccountalamedaaiSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountalamedaaiSAyaml,
		"ServiceAccount/alameda-aiSA.yaml",
	)
}



func bindataServiceAccountalamedaaiSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountalamedaaiSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-aiSA.yaml",
		size: 93,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555492503, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountalamedadatahubSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xc9\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x52\x76\xf0\x02\x14\xb4\xee\x98" +
	"\x01\x89\xfe\x93\x7c\x84\x05\x71\x4e\x3e\x5f\xe6\x47\x14\xd7\xbe\x87\xcd\x1e\x8c\xdd\xa6\xab\xac\x6b\x2d\x1f\xf3" +
	"\xae\x72\x67\x2c\x6b\xbc\xb5\x36\x0f\xcf\x5a\x06\x13\x1d\x09\xad\x45\xc4\x31\xa8\x82\x2f\x06\x3b\x2e\x7f\x7e\x1f" +
	"\xcf\x33\xf6\x0d\x8d\x2a\x2f\x76\x06\x72\x06\xec\x17\x00\x00\xff\xff\xdb\x23\xc6\x56\x62\x00\x00\x00")

func bindataServiceAccountalamedadatahubSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountalamedadatahubSAyaml,
		"ServiceAccount/alameda-datahubSA.yaml",
	)
}



func bindataServiceAccountalamedadatahubSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountalamedadatahubSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-datahubSA.yaml",
		size: 98,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountalamedaevictionerSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xc9\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x52\x76\xf0\x02\x14\xb4\xee\x98" +
	"\x01\x89\xfe\xcb\xf9\x48\x16\xc4\x39\xf9\x4c\xe6\xa7\xba\xfa\xe1\xf0\x17\xf3\xf4\x15\x2a\xfb\xde\xdb\xc7\x63\xa8" +
	"\x3c\x99\xdb\x8d\x0f\xb3\xf5\x8b\xea\x6d\xb2\x30\x50\xd0\xde\x44\x02\x93\x2a\xf8\x62\x72\xe0\xc6\xed\x56\xbe\x82" +
	"\x79\xd9\x79\xc0\xa8\xf2\xe6\x60\xa2\x56\xc2\xff\x01\x00\x00\xff\xff\xd8\xfc\xd0\xd8\x65\x00\x00\x00")

func bindataServiceAccountalamedaevictionerSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountalamedaevictionerSAyaml,
		"ServiceAccount/alameda-evictionerSA.yaml",
	)
}



func bindataServiceAccountalamedaevictionerSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountalamedaevictionerSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-evictionerSA.yaml",
		size: 101,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountalamedaoperatorSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xc9\x31\x0a\x42\x31\x0c\x06\xe0\xbd\xd0\x3b\xe4\x02\x0e\xae\xd9\x3c" +
	"\x83\xe0\xfe\xd3\xfe\x42\xd0\x26\x25\x2f\xbe\xf3\x3b\x88\xeb\xf7\x61\xdb\x83\x79\x58\xb8\xca\x79\xed\xed\x65\x3e" +
	"\x55\xee\xcc\xd3\x06\x6f\x63\xc4\xc7\xab\xb7\xc5\xc2\x44\x41\x7b\x13\x71\x2c\xaa\xe0\x8d\xc5\x89\x4b\x6c\x26\x2a" +
	"\xf2\x3f\xc7\xc6\xa0\xca\x93\xf3\xe7\xb0\x6f\x00\x00\x00\xff\xff\x5b\xca\x2a\xec\x63\x00\x00\x00")

func bindataServiceAccountalamedaoperatorSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountalamedaoperatorSAyaml,
		"ServiceAccount/alameda-operatorSA.yaml",
	)
}



func bindataServiceAccountalamedaoperatorSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountalamedaoperatorSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-operatorSA.yaml",
		size: 99,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCustomResourceDefinitionalamedarecommendationsCRDyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x8f\x13\x31\x0c\xbd\x57\xea\x7f\xb0\x7a\xef\x40\xc5\x05\xcd" +
	"\x6d\x05\x17\x2e\x2b\xb4\x48\x7b\x41\x1c\xdc\xc4\x74\xc3\x26\x71\x70\x3c\x15\xfb\xef\x51\x92\xce\x4e\x4b\xa7\xc3" +
	"\xfa\x34\xf3\xfc\xe2\xe7\x4f\x4c\xee\x91\x24\x3b\x8e\x3d\x60\x72\xf4\x47\x29\x96\xbf\xdc\x3d\x7f\xcc\x9d\xe3\x77" +
	"\xc7\xdd\x9e\x14\x77\xeb\xd5\xb3\x8b\xb6\x87\x4f\x43\x56\x0e\x0f\x94\x79\x10\x43\x9f\xe9\xa7\x8b\x4e\x1d\xc7\xf5" +
	"\x2a\x90\xa2\x45\xc5\x7e\xbd\x02\xf0\xb8\x27\x9f\xeb\x27\x80\xe1\xa8\xc2\xde\x93\x6c\x95\xd9\x8f\xa1\x7b\xd8\xec" +
	"\xba\xf7\x9b\xc2\x89\x18\xa8\x07\xf4\x18\xc8\xa2\x90\xe1\x10\x28\x5a\xd4\x9a\x08\x0e\xca\xd9\xa0\x77\xf1\xd0\x95" +
	"\x50\xe8\x22\x49\xee\xd0\xad\x57\x39\x91\xa9\x22\x07\xe1\x21\xf5\xb0\x40\x6d\x22\x63\x4a\xad\x98\xbb\x26\xf8\x70" +
	"\x21\xd8\x08\xc9\x0f\x82\xfe\x56\x4e\x85\x93\x0d\x27\xea\xe1\xbe\x44\x4d\x68\xc8\x16\xf0\x88\xde\x35\xce\x49\x88" +
	"\x13\xc5\xbb\xaf\x5f\x1e\x3f\x7c\x33\x4f\x14\xf0\x84\x02\x24\xe1\x44\xa2\xee\x35\xa3\x62\x67\xc3\x98\x40\x00\x7d" +
	"\x29\x42\x59\xc5\xc5\xc3\x84\xd7\x12\xfe\x4f\xbb\x18\xcb\x25\x95\xf7\xbf\xc8\xe8\x84\xbf\x76\x73\xb4\xd9\x24\xc7" +
	"\x89\xb6\xde\xfe\xe3\x00\x70\x4a\xe1\x1a\x5d\x88\xd5\xac\x6e\xc0\x9c\xe3\x56\x5d\x93\xc9\x69\x19\xe7\x03\xdf\x2a" +
	"\x76\x7a\xfd\x7b\x70\x42\x76\xe6\xf1\xb6\x66\x75\x8d\x2f\x05\x6c\x3e\x14\xc1\x97\x73\xd7\xac\xca\xf6\xac\x8f\x6f" +
	"\x98\x8e\xa2\x0e\x79\x71\x8c\xc7\xf1\x92\x8f\x3b\xf4\xe9\xa9\x5c\xed\xd9\x2b\x34\x86\x92\x92\xbd\xbf\xba\x83\xcd" +
	"\xe6\x72\xe9\xdb\xbf\xe1\x68\xeb\x6d\xe7\x1e\xbe\xff\xa8\x2b\xaf\x2c\x64\x4f\x2b\x5a\xd1\xbf\x01\x00\x00\xff\xff" +
	"\xa6\x65\x21\x8a\x3f\x04\x00\x00")

func bindataCustomResourceDefinitionalamedarecommendationsCRDyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCustomResourceDefinitionalamedarecommendationsCRDyaml,
		"CustomResourceDefinition/alamedarecommendationsCRD.yaml",
	)
}



func bindataCustomResourceDefinitionalamedarecommendationsCRDyaml() (*asset, error) {
	bytes, err := bindataCustomResourceDefinitionalamedarecommendationsCRDyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "CustomResourceDefinition/alamedarecommendationsCRD.yaml",
		size: 1087,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCustomResourceDefinitionalamedascalersCRDyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xbd\x8e\x2b\x37\x0f\xed\x17\xd8\x77\x20\xfc\x15\xdb\x7c\xb6\xb3" +
	"\x48\x13\x4c\x11\xe0\xc2\x49\xb1\x08\x72\x11\xec\x06\xb7\x09\x52\xd0\x12\xc7\x66\x56\x22\x15\x89\x63\xc4\x79\xfa" +
	"\x40\x1a\xff\xdb\x7b\xe1\x00\x51\x35\x3a\x12\x0f\xa9\x43\x52\x1a\x4c\xfc\x85\x72\x61\x95\x0e\x30\x31\xfd\x65\x24" +
	"\x75\x56\x66\xef\xdf\x95\x19\xeb\x7c\xf3\xbc\x24\xc3\xe7\xc7\x87\x77\x16\xdf\xc1\x62\x28\xa6\xf1\x95\x8a\x0e\xd9" +
	"\xd1\x0f\xd4\xb3\xb0\xb1\xca\xe3\x43\x24\x43\x8f\x86\x1d\x00\xc0\xe3\x03\x40\xc0\x25\x85\xd2\xd5\x4f\x00\xa7\x62" +
	"\x59\x43\xa0\x3c\x35\xd5\xb0\xa7\xef\x60\xf2\x3c\xfb\x66\x52\xf7\x08\x46\xea\x00\x03\x46\xf2\x58\x1c\x06\xca\x65" +
	"\x86\x83\x69\xfd\x66\x59\xcd\x2a\x05\xb2\x34\x98\x1f\x1f\x4a\x22\xd7\xc8\x57\x59\x87\xd4\xc1\x57\xb6\x8e\xe4\xfb" +
	"\x50\xc6\x83\x7c\x1a\x1d\xbd\x35\x47\xe3\x42\x0a\x43\xc6\x70\x19\x43\x5d\x2b\x4e\x13\x75\xf0\xb9\xb2\x24\x74\xe4" +
	"\x2b\xb8\xc1\xc0\x1e\xeb\xe1\x77\xc4\x9a\x48\x3e\xfd\xf2\xf2\xe5\xdb\x37\xb7\xa6\x88\x3b\x14\x20\x65\x4d\x94\x8d" +
	"\x0f\x11\xd4\x71\x22\xfc\x11\x04\xf0\x54\x5c\xe6\xd4\x58\xe1\xfb\xe9\xe9\x12\xc0\x53\x65\x1f\x8d\xc0\x57\xe9\xa9" +
	"\x80\xad\x09\x36\x23\x46\x1e\x4a\xf3\x0c\xda\x83\xad\xb9\x40\xa6\x94\xa9\x90\x18\x8e\x39\x3a\x25\xd3\x1e\x50\x40" +
	"\x97\x7f\x90\xb3\x19\xbc\x51\xae\x2c\x50\xd6\x3a\x04\x5f\xd3\xb5\xa1\x6c\x90\xc9\xe9\x4a\xf8\xef\x03\x75\x01\xd3" +
	"\xe6\x33\xa0\x51\xb1\x73\x4a\x16\xa3\x2c\x18\xaa\x34\x03\xfd\x1f\x50\x3c\x44\xdc\x42\xa6\xea\x04\x06\x39\xa1\x6b" +
	"\x5b\xca\x0c\x7e\xd6\x4c\xc0\xd2\x6b\x07\x6b\xb3\x54\xba\xf9\x7c\xc5\xb6\xaf\x3e\xa7\x31\x0e\xc2\xb6\x9d\xb7\x02" +
	"\xe2\xe5\x60\x9a\xcb\xdc\xd3\x86\xc2\x1c\x13\x4f\x5b\xa0\x62\xad\x62\xa3\xff\x5f\xde\x15\x66\x79\x3a\x8d\xcc\xb6" +
	"\x35\x7b\xc5\x32\xcb\xea\x88\xb7\x3a\xb8\x5f\xfb\x9f\x58\x3c\x70\x01\xdc\x11\x8d\x27\x38\x4a\x5c\xa1\x2a\xcc\xeb" +
	"\x8f\x6f\xbf\xc2\x3e\x8e\x96\x86\x0b\xdd\x9b\xe2\x47\xbb\x72\x14\xbf\x6a\xc5\xd2\x53\x1e\xb3\xd7\x67\x8d\x8d\x92" +
	"\xc4\x27\x65\xb1\x36\x71\x81\x49\x2e\x84\x2f\xc3\x32\xb2\xd5\x7c\xff\x39\x50\xb1\x9a\xa4\x19\x2c\x50\x44\x0d\x96" +
	"\x04\x43\xf2\x68\xe4\x67\xf0\x22\xb0\xc0\x48\x61\x81\x85\xfe\x6b\xe9\xab\xc8\x65\x5a\x45\xbd\x47\xfc\xc3\x6d\x71" +
	"\xbd\x75\x14\xe8\x88\x1f\x1a\x7d\x3f\x6e\xf6\x53\x1d\xee\xec\x72\xba\xd5\x5e\x1f\x07\x54\x07\x09\x2e\x03\x7d\x60" +
	"\xb0\x54\x0d\x84\x17\x4d\x94\x34\xb0\xdb\x5e\x59\x90\x0c\xf1\x0a\x9c\x42\xb1\xca\x7f\x8d\x3b\x8d\x09\x9d\xdd\x1f" +
	"\x68\xa1\x40\xce\x34\x5f\xf9\x38\x2b\xe1\xa7\x97\x98\x34\x1b\x8a\x75\xf0\x3a\x08\x4c\x22\xbe\xd3\xa4\x36\x70\xa6" +
	"\x15\x09\x65\x34\x02\xa7\x9e\x00\x7b\xa3\x0c\x51\x3d\xf7\xdb\xb1\x8e\x6b\xf9\x71\xa0\xa7\xdb\x31\x5d\xa6\x08\x5a" +
	"\xe5\x71\xa6\xf3\x86\x9a\x1e\x02\x3d\x47\x47\x9d\xef\xc8\xbc\xa1\x0d\xe5\xbe\xdc\xef\x2e\xed\xc5\xe1\x9d\xb9\xd2" +
	"\xe6\x43\xd3\x51\xb8\x14\x74\x1b\x49\xcc\xa9\xf4\xbc\xba\xb5\xe7\xe3\xd3\x5f\x72\xfc\x7b\xeb\x9b\xfa\x8d\x6a\x9d" +
	"\xd0\x7e\x6d\x71\x17\xf7\xbd\x09\xbb\xc4\x37\xfb\xbf\x80\xcd\x33\x86\xb4\xae\x2f\xfe\x89\xfc\xe8\x1c\x25\x23\xff" +
	"\xf9\xea\x1d\x9d\x4c\xce\x1f\xcf\x71\xee\x54\x7c\xfb\x2f\x28\x1d\xfc\xf6\x7b\x7b\x42\x4d\x33\xf9\x5d\x4f\x36\xf4" +
	"\x9f\x00\x00\x00\xff\xff\xae\x07\x76\xea\x7b\x08\x00\x00")

func bindataCustomResourceDefinitionalamedascalersCRDyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCustomResourceDefinitionalamedascalersCRDyaml,
		"CustomResourceDefinition/alamedascalersCRD.yaml",
	)
}



func bindataCustomResourceDefinitionalamedascalersCRDyaml() (*asset, error) {
	bytes, err := bindataCustomResourceDefinitionalamedascalersCRDyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "CustomResourceDefinition/alamedascalersCRD.yaml",
		size: 2171,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataConfigMapgrafanadatasourcesyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x8f\xda\x30\x10\xc5\xef\x91\xf2\x1d\x46\x3e\xf3\xa7\x5c\x2a" +
	"\xe4\x5b\x5b\x2e\x1c\xaa\x1e\x2a\x71\xa9\xaa\x6a\x88\x27\xe0\xe2\xd8\xd6\x8c\x43\x89\xba\x7c\xf7\x95\x61\x09\x2c" +
	"\xeb\x5c\x12\xcf\xfc\xde\xf3\x9b\x09\x46\xbb\x21\x16\x1b\xbc\x86\xe3\xa2\xae\x0e\xd6\x1b\x0d\xdf\x82\x6f\xed\xee" +
	"\x3b\xc6\xba\xea\x28\xa1\xc1\x84\xba\xae\x00\x3c\x76\xa4\x61\xc7\xd8\xa2\xc7\x69\x2e\x4b\xe8\xb9\x21\xb9\x35\x25" +
	"\x62\x43\x1a\x5a\x32\xc4\x98\x02\xa3\xad\xab\x51\x1d\x39\x74\x94\xf6\xd4\xcb\x6c\xc0\xce\x69\x78\x99\xe6\x32\xc0" +
	"\xff\xeb\x2b\x3f\xea\x1e\x48\x69\x58\x4c\x1e\x3a\x0f\xd7\x29\x0d\xbf\xee\x9d\x27\x8b\x51\x10\x78\xb7\x36\x4f\x2e" +
	"\x63\x33\xa7\x55\x1a\xd4\xda\xb7\xae\x3f\xad\xbe\xaa\xc9\x33\x02\x50\x90\xa5\x21\x5e\x64\xf6\x22\x33\x5b\x55\xf2" +
	"\xc6\xa6\x21\xc9\x21\x55\xe4\x70\x1a\x8a\x4c\xcf\x2e\x03\xfb\x94\xa2\xe8\xf9\x1c\x1d\x76\x64\x70\x7a\xf3\x9d\x3d" +
	"\xac\x70\x26\xc7\x46\x2f\x3f\x2d\x3f\x17\x8d\x22\x8a\xfc\x0b\x9c\x07\x55\x68\x3a\xeb\x73\xa1\x7c\xa5\x10\x8f\x54" +
	"\x91\xc8\x2b\xde\xa2\x5c\x26\xfc\x63\x7d\x22\xf6\xe8\x8a\xe4\x16\xc5\x36\x5f\xfa\xb4\x57\x1a\x5a\x74\x42\x25\xc8" +
	"\xca\x8a\x5a\xec\x5d\x52\x1a\x12\xf7\x45\xe6\xaf\x04\xbf\xc2\x84\x4a\x97\xfe\x61\xde\xb8\x93\x9f\x07\x1b\x37\xc4" +
	"\xb6\x1d\xde\x8c\x3e\x82\xe7\x92\x37\x13\x9a\x1f\xde\x0d\xb7\x8c\xef\x91\xf3\xfd\xf8\xfb\xfa\x79\xbe\x9e\x5e\x03" +
	"\x00\x00\xff\xff\x85\x43\xb9\xc1\x14\x03\x00\x00")

func bindataConfigMapgrafanadatasourcesyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataConfigMapgrafanadatasourcesyaml,
		"ConfigMap/grafana-datasources.yaml",
	)
}



func bindataConfigMapgrafanadatasourcesyaml() (*asset, error) {
	bytes, err := bindataConfigMapgrafanadatasourcesyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ConfigMap/grafana-datasources.yaml",
		size: 788,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555080688, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentadmissioncontrollerDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xcf\x8e\xda\x48\x10\xc6\xef\x48\xbc\x43\x29\x97\x9c\x6c\x88\x76" +
	"\xc9\x6a\xfb\xe6\x60\x47\x3b\x5a\x20\x08\xd8\x48\x39\xa1\x4a\xbb\x8c\x5b\xe9\x7f\xe9\x6e\x3b\xb2\x56\xfb\xee\x2b" +
	"\xc3\x98\xb1\x19\x18\x66\x7c\x82\x2a\xf7\xaf\xbe\xaf\xda\x55\x68\xc5\x57\x72\x5e\x18\xcd\x00\xad\xf5\x93\xfa\xc3" +
	"\x78\xf4\x43\xe8\x9c\x41\x4a\x56\x9a\x46\x91\x0e\xe3\x91\xa2\x80\x39\x06\x64\xe3\x11\x80\x46\x45\x0c\x30\x57\xc2" +
	"\xb7\x07\x23\x6e\x74\x70\x46\x4a\x72\x5d\xd6\x5b\xe4\xc4\xa0\xa0\x9c\x1c\x06\xe3\x50\xb4\x19\x89\xdf\x49\xfa\x23" +
	"\x02\xda\x62\x0c\x50\xa2\xa2\x1c\x4f\x11\x6e\x94\x35\x9a\x74\xb8\xcd\x46\xad\x4d\xc0\x20\x8c\xee\x30\x39\x79\xee" +
	"\x84\x0d\x47\x03\x29\x15\x42\x93\x87\xd2\xfc\x82\x60\x20\x3f\x1a\x80\x50\xd2\x4d\x20\x40\x20\x65\x25\x06\x8a\x51" +
	"\xda\x12\x63\x63\x49\xfb\x52\x14\x21\x16\x66\xf2\x0b\x45\x88\x0a\xe3\x22\x47\x98\x37\x0c\xde\x07\x57\xd1\xfb\xf1" +
	"\xc8\x5b\xe2\xc7\xfa\x8e\xac\x14\x1c\x3d\x83\x0f\xed\x5f\x4f\x92\x78\x30\xee\x51\x9b\xc2\xc0\xcb\x45\xdf\x74\x67" +
	"\xfb\x86\x9a\x4e\x4b\x77\xbe\xdf\xf4\xf6\x79\xb9\xf1\xed\x23\x87\xd5\xee\xd4\x03\x38\x3b\x39\x5d\x80\x0e\x28\x34" +
	"\xb9\x27\x40\xf4\x8a\x9a\x00\x42\xe1\x81\x18\xfc\xac\xb0\x69\xdb\x66\x9d\xb1\x25\x05\x1f\x8c\x9b\x3c\xde\x70\xf4" +
	"\x04\x70\x25\x49\x56\x4f\xe3\xdf\xe2\x8f\x17\x84\x75\x25\xe5\xda\x48\xc1\x1b\x06\x0f\xc5\xca\x84\xb5\x23\x7f\xfc" +
	"\xfc\xba\xd7\x1c\x79\x53\x39\x4e\x7d\x87\x00\x52\x28\x11\x86\x21\x00\x6e\x2b\x06\x1f\xa7\x6a\x18\x55\xa4\x8c\x6b" +
	"\x18\xfc\x39\x5d\x8a\x7e\xc6\xd1\xcf\x8a\xfc\x75\xc8\xef\xb3\x1b\x90\x3f\x66\x7d\x08\xe9\xba\x77\xba\x6b\x5c\xb2" +
	"\x48\x96\x59\x9a\xec\x93\x74\x39\xdf\x2d\xf6\x69\xb6\x5e\x7c\xf9\x96\xa5\xfb\x55\xb2\xcc\xb6\xeb\x64\x9e\xf5\xd1" +
	"\x35\xca\x8a\x3e\x3b\xa3\x2e\x64\x14\x82\x64\xbe\xa1\xe2\x22\xfc\x98\x58\x63\x28\xd9\xf9\x63\x89\xcf\xf3\x77\x5f" +
	"\x4c\xb2\x4b\xfe\xfa\xe7\xd3\x3e\x49\xd3\x4d\xb6\xdd\x3e\x53\xc2\xe0\x5d\x77\x7d\x2d\xb9\xac\xbe\xc7\xbd\x89\x8e" +
	"\x7d\xcd\xd9\x6c\x3a\x9d\x4d\xdf\xdd\xad\x94\xad\x92\x4f\x8b\xe7\x56\x9f\x26\xea\xce\xf9\xdd\x62\xbb\x9f\x67\x9b" +
	"\xdd\xfe\xf3\xc3\x55\xcc\x84\x02\x9f\x04\xe9\x23\x4e\x2e\xf8\xf6\x57\xcc\x5d\x78\x15\x76\xbd\x79\xf8\x9a\xec\xb2" +
	"\xfd\xdf\xd9\xb7\x37\xd0\x7f\x50\x73\x97\x3e\x4f\xde\xa2\x99\xe3\x50\x72\x6d\x64\xa5\x68\x69\x2a\x3d\xf8\x2a\x23" +
	"\x50\x6d\xe8\x74\xe7\x43\x44\xbf\xc6\x49\xd0\xd5\x54\xbb\xcb\xbe\x68\xd9\x30\x28\x50\x7a\xba\x85\xae\xd1\x4d\xa4" +
	"\x39\x4c\x06\x2b\xba\x0f\xbf\xba\x13\x22\x69\x0e\x51\x3b\xf8\x78\x38\x93\x4f\x4e\x3c\x83\xcb\xa5\xf2\x6a\x02\x00" +
	"\x29\x1b\x9a\x54\x38\x06\xff\xfe\x77\x89\xb9\xe2\xd2\x13\x77\x14\x06\xe3\x72\x0a\xad\x6e\x6e\xb3\x28\xc8\x33\xc0" +
	"\x93\xab\x05\xa7\x84\xf3\xb6\x21\x2f\x6f\xbf\xe1\xbb\xb7\xf9\xff\x07\x00\x00\xff\xff\xb1\x5f\x2e\xaa\x69\x07\x00" +
	"\x00")

func bindataDeploymentadmissioncontrollerDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentadmissioncontrollerDMyaml,
		"Deployment/admission-controllerDM.yaml",
	)
}



func bindataDeploymentadmissioncontrollerDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentadmissioncontrollerDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/admission-controllerDM.yaml",
		size: 1897,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentalamedaaiDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcd\x6e\xdb\x30\x10\x84\xef\x06\xfc\x0e\x8b\xdc\x6d\x2b\x69\xdc" +
	"\x03\x6f\x2e\x14\xa0\x05\x9a\xc4\x70\xd2\x5e\x8b\x0d\xb5\xb6\x88\x92\x5c\x86\x5c\xa9\x30\x8a\xbe\x7b\x21\x39\xb2" +
	"\x25\x5b\xfd\xe1\x4d\x4b\xce\xc7\xd1\x68\x84\xc1\x7c\xa5\x98\x0c\x7b\x05\x18\x42\x5a\xd4\xd7\xd3\xc9\x77\xe3\x0b" +
	"\x05\x39\x05\xcb\x7b\x47\x5e\xa6\x13\x47\x82\x05\x0a\xaa\xe9\x04\xc0\xa3\x23\x05\x68\xd1\x51\x81\x33\x34\xdd\x2c" +
	"\x05\xd4\xa4\x60\x4b\x05\x45\x14\x8e\x87\x1d\x8b\x2f\x64\x53\x2b\x84\xe6\x8a\xa3\xf2\x30\xd1\xec\x02\x7b\xf2\x72" +
	"\x4e\x44\xef\x59\x50\x0c\xfb\x4e\x5c\x50\xd2\xd1\x04\x69\xcd\xe6\xb4\x35\x9e\x12\x94\xfc\x03\x84\xa1\x68\xcd\x82" +
	"\x94\xd4\xdc\x61\x8d\x6e\x95\x47\x24\x87\x83\xa5\xe9\x24\x05\xd2\x2d\x2f\x52\x7b\x2c\x29\xb8\x6e\x1e\x13\x59\xd2" +
	"\xc2\xf1\xed\x2e\x87\xa2\xcb\xcf\x7d\xeb\x43\xf3\x6f\x26\x85\x5c\xb0\x28\xd4\xa9\xfa\x31\x35\x6b\x2c\xaa\x66\xd9" +
	"\x21\x79\x94\x0d\x70\xf4\x7a\x08\xca\x0b\x1a\x4f\xf1\x24\x9b\x5d\xf0\x67\xe4\x77\xc6\xd3\x89\x6b\x1c\xee\x48\xc1" +
	"\x6b\x85\xfb\xb9\xe1\x45\x88\x1c\x4a\x92\x24\x1c\x17\x27\x95\xaa\xb3\xf9\xbb\xf9\xfb\x33\xd5\xba\xb2\x76\xcd\xd6" +
	"\xe8\xbd\x82\x4f\xdb\x07\x96\x75\xa4\xd4\xb6\xa1\x3b\x16\x29\x71\x15\x35\xf5\x5f\x04\xc0\x1a\x67\x64\x38\x02\xd0" +
	"\xa1\x52\x70\x9b\x65\x99\x1b\xce\x1d\x39\x8e\x7b\x05\xb7\xcb\xec\xde\xf4\xb7\x22\xbd\x56\x94\xc6\x39\x37\x7f\xe6" +
	"\xdc\x0c\x39\xe4\xeb\x1e\xa0\xcb\xeb\x71\x7d\xb7\x59\x3d\x3f\x6e\xbe\xad\xf2\x7c\x73\xf7\xf4\xd4\x47\xd5\x68\x2b" +
	"\x52\x70\x75\xde\x9c\x79\xaf\xd6\xf3\x54\x6b\xb5\xcc\xb2\x65\x76\x75\x09\xcf\x57\xcf\xab\x8f\x5f\x3e\xfc\x0f\xbb" +
	"\xa9\x4a\x59\xbd\xfc\x13\x5d\xb3\xad\x1c\xdd\x73\xe5\xcf\xf2\x98\x81\x6b\x86\x6b\x94\x52\xc1\xa2\xc6\xb8\xb0\xbc" +
	"\x1b\x06\x73\xd1\x10\xcb\xbb\x59\xf3\xfd\x71\x77\xac\xc9\x81\x9f\x46\x92\xfa\xbb\xae\x4d\xd8\x05\xd9\xe7\x26\x2a" +
	"\xf8\xf9\xab\x9b\x27\x8a\xb5\xd1\xb4\xd2\xba\x71\x37\xd6\xff\xe1\x89\x87\x8b\xbf\xe4\x77\x00\x00\x00\xff\xff\x24" +
	"\x94\x49\x4f\x97\x04\x00\x00")

func bindataDeploymentalamedaaiDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentalamedaaiDMyaml,
		"Deployment/alameda-aiDM.yaml",
	)
}



func bindataDeploymentalamedaaiDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentalamedaaiDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-aiDM.yaml",
		size: 1175,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentalamedadatahubDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4b\x6f\xda\x4c\x14\xdd\x23\xf1\x1f\xee\x2e\x2b\xf3\xd0\xa7\x44" +
	"\xc9\xec\x1c\x99\x4f\x89\x04\x04\x41\x68\xbb\x43\x37\xf6\x05\x8f\x32\xaf\xcc\x5c\x3b\x45\x55\xff\x7b\x65\x53\x27" +
	"\x36\x85\xb4\x99\x1d\x67\xe6\x3c\xe6\x30\xd7\xe8\xe4\x17\xf2\x41\x5a\x23\x00\x9d\x0b\xc3\x72\xdc\xef\x3d\x4b\x93" +
	"\x09\x48\xc8\x29\xbb\xd7\x64\xb8\xdf\xd3\xc4\x98\x21\xa3\xe8\xf7\x00\x0c\x6a\x12\x80\x0a\x35\x65\x18\x55\x70\x5e" +
	"\x3c\x35\x1b\xc1\x61\x4a\x02\xb6\x94\x91\x47\xb6\x1e\x65\xb5\xa3\xf0\x89\x54\xa8\xd9\x50\xf9\xbc\xd1\x0f\x48\x6a" +
	"\xb5\xb3\x86\x0c\x9f\x94\x45\x63\x2c\x23\x4b\x6b\x1a\x85\x8c\x42\xea\xa5\xe3\x3a\x76\x42\x5b\x69\x28\x40\x6e\x5f" +
	"\x81\x2d\x64\x75\x6c\xe0\x9c\x2a\x23\x25\xd3\x9a\x79\x4a\x17\x80\x49\x3b\x85\x4c\x03\x54\x2e\xc7\x81\x75\x64\x42" +
	"\x2e\xb7\x3c\x90\x76\xf8\x8a\x92\xa3\xad\xf5\x91\x27\xcc\xf6\x02\x2e\xd8\x17\x74\xd1\xef\x05\x47\x69\x1d\xc3\x53" +
	"\xad\x1e\x04\x8c\xab\x9f\x81\x14\xa5\x6c\xfd\xef\x88\x1a\x39\xcd\xa7\xed\x6b\x77\x2f\xde\x0e\xd2\xc4\x68\xa8\xed" +
	"\xb2\xab\x75\xb6\xf0\x6a\xa9\xae\xc7\x79\x17\x80\xb7\xe8\x87\xce\x0d\xa3\x34\xe4\xdf\xb9\xd1\xc7\x4e\x00\x52\xe3" +
	"\x8e\x04\xbc\x14\xb8\xaf\x2a\x72\xde\xba\x9c\x38\xb0\xf5\xc3\x23\x4e\xe4\x73\x52\xa2\x1c\x0d\xfe\x1b\x5c\x1d\xf1" +
	"\x17\x85\x52\x0b\xab\x64\xba\x17\x70\xbf\x9d\x5b\x5e\x78\x0a\xf5\x2b\x6b\x8e\x79\x0a\xb6\xf0\x29\xb5\x6f\x05\xa0" +
	"\xa4\x96\xdc\x85\x00\x52\x57\x08\x18\x8f\x46\xba\x0b\x6b\xd2\xd6\xef\x05\x8c\x2f\x47\x33\xd9\xde\xf2\xf4\x52\x50" +
	"\x38\x2d\x73\x79\x56\x65\xd4\x51\x21\x53\xb6\xe8\x4d\x69\xf1\x34\x9e\x4d\x92\x78\x93\xc4\x8f\xf1\xdd\xfa\x76\x73" +
	"\x3f\xff\x7f\xba\xfe\x96\xdc\x6e\xe2\x24\x59\x4e\x56\xab\xb6\x74\x89\xaa\x20\x01\x39\xb3\x0b\x62\xf8\xd6\x9d\x34" +
	"\x5b\x55\x7c\xcf\x9e\x06\xad\xe9\x19\x84\x32\x15\xd7\xa3\xeb\xab\x4f\x38\xae\x57\x93\xe5\x3c\x9e\x4d\x4e\x58\x62" +
	"\xa6\xa5\xf9\x84\xd4\x22\x5e\xad\xbe\x3e\x2c\x93\x73\x52\x0e\x43\xf8\xbb\xdc\x62\xf9\x30\x9b\x3c\xde\x4d\xd6\xab" +
	"\xcd\x7a\x39\xfd\xa0\x09\xe7\xad\x26\xce\xa9\x08\xd1\xf3\x75\x78\x1f\xc8\x48\x5b\x23\xd9\x7a\x69\x76\x75\x21\x37" +
	"\xa3\x9b\xf1\xbb\x4c\x69\x55\xa1\x69\x66\x0b\x73\xf4\xc7\x46\xa0\x2b\x70\x81\x9c\x0b\x18\x96\xe8\x87\xca\xee\x86" +
	"\x9d\x4f\x4f\xb3\x0e\xc1\x8f\x9f\x7e\xa4\xec\x2e\xaa\xde\x37\xee\xa8\x39\x7f\x70\xfb\x73\x6a\xfe\x85\x0b\x40\xda" +
	"\xf1\x3e\x91\x5e\xc0\x8f\x9f\x0d\x1a\xc8\x97\x32\xa5\x38\x4d\xab\xb4\x67\xe7\xaf\x7b\x6c\x7e\x6a\x54\x7f\x05\x00" +
	"\x00\xff\xff\x79\xf8\x29\x2d\xcf\x05\x00\x00")

func bindataDeploymentalamedadatahubDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentalamedadatahubDMyaml,
		"Deployment/alameda-datahubDM.yaml",
	)
}



func bindataDeploymentalamedadatahubDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentalamedadatahubDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-datahubDM.yaml",
		size: 1487,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentalamedaevictionerDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xcd\x6e\xdb\x3c\x10\xbc\x1b\xf0\x3b\x2c\x72\xc9\x49\xb2\x83\xef" +
	"\x73\x8a\xf2\xa6\x54\x06\x1a\x20\x71\x8d\x24\xcd\xd5\xd8\x50\x6b\x8b\x28\xff\x42\xae\x14\x08\x45\xdf\xbd\xa0\x53" +
	"\xa5\x52\x12\xbb\xe1\x49\x5c\x72\x67\x66\x47\x43\xf4\xea\x9e\x42\x54\xce\x0a\x40\xef\xe3\xac\x3d\x9b\x4e\x7e\x28" +
	"\x5b\x09\x28\xc9\x6b\xd7\x19\xb2\x3c\x9d\x18\x62\xac\x90\x51\x4c\x27\x00\x16\x0d\x09\x40\x8d\x86\x2a\xcc\xa8\x55" +
	"\x92\x95\xb3\x14\xfa\xb3\xe8\x51\x92\x80\x2d\x55\x14\x90\x5d\x40\x95\x4e\x34\x3e\x90\x8e\x7b\x00\x48\x54\x2f\x08" +
	"\xcf\x15\xe9\x8c\x77\x96\x2c\x1f\x42\x46\x6b\x1d\x63\xda\xf7\x20\x15\x45\x19\x94\xe7\xbd\xf8\x92\xb6\xca\x52\x84" +
	"\xda\x3d\x01\x3b\xa8\xf6\xe2\x81\x6b\x3a\x00\x07\xc0\x64\xbc\x46\xa6\x1c\xb5\xaf\x31\x77\x9e\x6c\xac\xd5\x96\x73" +
	"\xe5\x66\x4f\xa8\x38\xdb\xba\x90\x05\xc2\xaa\x13\x70\xca\xa1\xa1\xd3\xe9\x24\x7a\x92\x7b\xf6\x40\x5e\x2b\x89\x51" +
	"\xc0\x59\xda\x46\xd2\x24\xd9\x85\x3f\xca\x0c\xb2\xac\xaf\x86\x03\x8f\x47\x7e\xa5\xa5\x57\xd2\x77\x0f\xcd\x4e\xeb" +
	"\x98\xe1\x69\xe9\x31\xd3\x51\x2e\x80\x97\x19\x9e\x6d\xb7\x8c\xca\x52\xf8\xdb\x9e\xfd\x93\x0f\x40\x19\xdc\x91\x80" +
	"\xc7\x06\xbb\x64\x97\x0f\xce\xd7\xc4\x91\x5d\x98\xbd\x6d\xcb\x42\x4d\x5a\xb4\xf3\xfc\xbf\xfc\xfc\x15\xc4\xba\xd1" +
	"\x7a\xed\xb4\x92\x9d\x80\xcb\xed\xca\xf1\x3a\x50\xdc\x27\xae\xbf\x16\x28\xba\x26\x48\x1a\x8e\x07\xa0\x95\x51\x3c" +
	"\x2e\x01\x48\xdf\x08\x38\x9f\x9b\x71\xd5\x90\x71\xa1\x13\xf0\x79\x7e\xad\x86\x27\x81\x1e\x1b\x8a\xef\x83\xfc\xbf" +
	"\x38\x00\xf2\x69\x31\x04\x21\xdb\x0e\xba\x7b\xdf\x8a\xab\xe2\x7a\x59\x16\x9b\xe5\xfd\xe5\x97\xbb\xcb\x6f\xab\xe5" +
	"\xcd\xa6\x2c\xee\x8a\xaf\xdf\x2f\x36\x45\x59\xde\x2c\x6f\x6f\x87\xd8\x2d\xea\x86\x04\x9c\xf4\xb6\xa5\x1f\x5f\x37" +
	"\x0f\xf9\xe0\xf5\xe4\xb1\x95\x62\x31\x9f\x2f\xe6\x27\x1f\x62\xeb\x3f\x37\xcb\x55\x71\x71\xb5\x7c\x8f\x2d\xc5\x79" +
	"\x00\xd6\x3a\xdd\x18\xba\x76\x8d\x1d\xf9\x91\x81\x49\xa5\x35\x72\x2d\x60\xd6\x62\x98\x69\xb7\x9b\x8d\x9e\xed\x30" +
	"\xa0\xef\x24\x26\xd3\x6e\x97\xa5\x58\xe0\x8e\xfa\x86\x67\xb2\xb7\x79\xfb\x60\x3b\x00\x19\xcf\x5d\xa9\x82\x80\x9f" +
	"\xbf\xfa\x6a\xa4\xd0\x2a\x49\x85\x94\x49\xf1\xb1\xf0\x8e\x6f\xae\x0e\x44\xfd\x77\x00\x00\x00\xff\xff\x42\x59\x6f" +
	"\xb4\x18\x05\x00\x00")

func bindataDeploymentalamedaevictionerDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentalamedaevictionerDMyaml,
		"Deployment/alameda-evictionerDM.yaml",
	)
}



func bindataDeploymentalamedaevictionerDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentalamedaevictionerDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-evictionerDM.yaml",
		size: 1304,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentalamedagrafanaDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbf\x8e\xdb\x3c\x0c\xdf\x03\xe4\x1d\xb8\xdd\xe4\x38\xb9\xbb\x6f" +
	"\xd1\xfa\xdd\x52\xa0\x29\x3c\x14\xdd\x19\x99\x8e\x85\x4a\xa2\x4a\xd1\x39\x04\x45\xdf\xbd\xb0\x13\x27\x76\x2e\x4d" +
	"\xab\xc5\x30\xc9\xdf\x1f\x52\x14\x26\xf7\x8d\x24\x3b\x8e\x06\x30\xa5\x5c\x1e\x36\xcb\xc5\x77\x17\x6b\x03\x6f\x94" +
	"\x3c\x1f\x03\x45\x5d\x2e\x02\x29\xd6\xa8\x68\x96\x0b\x80\x88\x81\x0c\xa0\xc7\x40\x35\x16\x7b\xc1\x06\x23\x8e\x89" +
	"\x9c\xd0\x92\x81\x86\x6a\x12\x54\x16\x74\x7d\xc6\xe3\x8e\x7c\x1e\xd0\xd0\xeb\x5c\xe0\xa7\x88\xe5\x90\x38\x52\xd4" +
	"\xbb\xb4\x18\x23\x2b\xaa\xe3\x38\x32\xd4\x94\xad\xb8\xa4\x83\xed\x37\x6a\x5c\xa4\x0c\x2d\xbf\x83\x32\xd4\x83\x6d" +
	"\xd0\x96\x7a\x21\xef\xec\x80\x84\x09\x1f\x80\x52\x48\x1e\x95\x56\xe8\x53\x8b\x2b\x4e\x14\x73\xeb\x1a\x5d\x39\x2e" +
	"\xdf\xd1\x69\xd1\xb0\x14\x42\x58\x1f\x0d\x3c\xa9\x74\xf4\xb4\x5c\xe4\x44\x76\x90\x17\x1a\x58\xb3\x81\x4d\xff\x9b" +
	"\xc9\x93\x55\x96\xb3\xb5\x80\x6a\xdb\xcf\xd3\x76\x6f\x5b\x9e\xb6\x36\x1a\x19\xc1\xd3\x31\xf7\xc7\xff\x2b\x11\xc0" +
	"\xc5\xdf\x69\xa0\x51\xd1\x45\x92\x2b\xb6\x38\xdf\xdb\x0c\xd4\x1f\x17\x70\x7f\x8d\x97\xe7\xaf\xf9\x6f\xf5\xba\x7a" +
	"\xb9\xa9\xaa\x3a\xef\x2b\xf6\xce\x1e\x0d\x7c\x6a\xbe\xb0\x56\x42\x79\x58\x90\xb1\x2c\xb1\xe8\xd4\x6f\xaf\x7b\x31" +
	"\x53\xb1\xa8\x81\x97\xf5\x7a\x3d\x2d\x18\x17\xaa\x55\x4d\xf3\x78\x12\x56\xb6\xec\x0d\x7c\xfd\xbf\xba\xa6\x84\x32" +
	"\x77\x62\x69\xae\xe3\x5d\x70\x37\xd2\x00\x36\x75\x06\x9e\xd7\xeb\x30\x0f\x07\x0a\x2c\xc7\x21\xb3\x75\xd3\x94\xd0" +
	"\x8f\x8e\xf2\x7d\x9a\xcd\x1f\x69\x36\x73\x9a\x03\xfb\x2e\xd0\x96\xbb\xf8\x61\x14\xa1\x0f\x56\xa8\xad\x81\xf2\x80" +
	"\x52\x7a\xb7\x2b\x3f\x5c\xc8\x75\x24\xe7\x54\x91\xfb\x87\xb4\xa7\x79\x49\xee\x76\x27\xa6\x3b\x04\x73\x25\x52\x3b" +
	"\xaa\x94\x49\xf8\xe0\xfa\xf7\xee\xe2\xbe\xec\x77\xed\x3c\xcb\x47\xf2\x77\xca\x4e\x3d\x4e\xdb\x2b\xfe\xee\x99\x42" +
	"\xd2\xe3\x9b\x13\x03\x3f\x7f\x4d\x81\x96\x63\xe3\xf6\x5b\x4c\x37\x63\xaf\xa9\xc1\xce\xeb\x96\x6b\x32\xf0\xfa\x7c" +
	"\x77\x6b\x1e\x78\x7c\x58\x04\xbf\x03\x00\x00\xff\xff\xf8\x8e\xb4\x15\xfa\x04\x00\x00")

func bindataDeploymentalamedagrafanaDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentalamedagrafanaDMyaml,
		"Deployment/alameda-grafanaDM.yaml",
	)
}



func bindataDeploymentalamedagrafanaDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentalamedagrafanaDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-grafanaDM.yaml",
		size: 1274,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1554715168, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentalamedainfluxdbDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xc1\x4f\xdb\x30\x14\xc6\xef\x95\xfa\x3f\x3c\xb1\x03\xa7\xb6\xf4" +
	"\x34\xc9\xb7\x42\xc3\x88\x06\x25\x6a\x53\xb6\x9d\xaa\xd7\xe4\x85\x5a\x38\xb6\x65\xbf\x14\xa2\x69\xff\xfb\x94\x40" +
	"\x20\x0d\x6d\x41\xda\x7c\xa8\x1a\x3f\x7f\xbf\xef\x7b\x71\x6c\xb4\xf2\x8e\x9c\x97\x46\x0b\x40\x6b\xfd\x68\x3b\xee" +
	"\xf7\x1e\xa4\x4e\x05\x4c\xc9\x2a\x53\xe6\xa4\xb9\xdf\xcb\x89\x31\x45\x46\xd1\xef\x01\x68\xcc\x49\x00\x2a\xcc\x29" +
	"\xc5\x81\xd4\x99\x2a\x9e\xd2\x75\x53\xf1\x16\x13\x12\x90\x51\x4a\x0e\xd9\x38\x94\x55\x45\xe1\x9a\x94\xaf\xe5\x50" +
	"\x19\xbd\xea\x9f\x67\x12\x93\x5b\xa3\x49\xf3\x7e\x2e\x6a\x6d\x18\x59\x1a\xdd\x20\x52\xf2\x89\x93\x96\xeb\xe0\x53" +
	"\xca\xa4\x26\x0f\x1b\xf3\x08\x6c\x20\xad\x83\x03\x6f\xa8\x72\x52\x32\xa9\x95\xd0\x06\x02\x30\xe5\x56\x21\xd3\x10" +
	"\x95\xdd\xe0\xd0\x58\xd2\x7e\x23\x33\x1e\x4a\x33\x7a\x44\xc9\x83\xcc\xb8\x81\x23\x4c\x4b\x01\xa7\xec\x0a\x3a\xed" +
	"\xf7\xbc\xa5\xa4\xf6\x77\x54\x63\xbd\x80\x71\xf5\xe8\x49\x51\xc2\xc6\xbd\x64\xcb\x91\x93\xcd\x75\xbb\xe1\x6e\xd3" +
	"\x3b\xcd\x35\x49\x1a\x75\xfb\x55\x57\x43\x7d\x9a\x04\xf0\x9a\xb0\x1a\x5f\xc0\x53\x52\x38\xc9\xe5\x85\xd1\x4c\x4f" +
	"\xdc\xaa\x00\xb8\x42\x4f\xfc\xd2\x93\x13\x30\x3e\x3b\x3b\x6b\x4a\x89\xd1\x8c\x52\x93\x7b\x73\x1c\xbc\xec\xf8\xae" +
	"\x55\x35\x64\x8e\xf7\xad\x82\x18\x0f\xbf\x0e\x50\x59\xa9\xa9\xb3\x26\x2a\x94\x8a\x8c\x92\x49\x29\x20\xcc\x66\x86" +
	"\x23\x47\xbe\xfe\xb2\x9a\x65\xa4\xb7\xad\x16\x1b\xcb\x70\x76\x79\xbd\xfc\x39\x3d\x5f\xcd\x83\xe8\x76\x1e\x87\xb3" +
	"\x6f\xab\x69\xb8\x98\x9c\x5f\x07\xd3\xb7\xc5\x00\x5b\x54\x05\x09\x38\xa9\xf6\xe9\xe4\x08\xe5\x2a\x8e\xa3\xfa\x67" +
	"\xb1\x0a\x66\xff\x83\x72\x11\xcc\xe3\xf0\x32\xbc\x98\xc4\xc1\x3e\xd2\x88\x38\x19\xb1\xf2\x23\xeb\xe4\x16\x99\xaa" +
	"\xff\xc3\xc4\xf1\x27\xe9\xd1\x3c\xbc\x9b\xc4\xc1\xea\x7b\xf0\xeb\xd3\xf4\x07\x2a\x3f\xa4\x4f\x96\xf1\xd5\xbf\xbc" +
	"\x80\xc9\xf4\x26\x9c\xad\x96\x8b\x60\xbe\x4f\x8d\x69\x2e\xf5\xc7\xf2\x68\xb2\x58\xfc\xb8\x9d\xef\x0d\x50\x23\x2c" +
	"\x7a\x7f\x0c\x73\xc8\xbf\xf0\xe4\x3e\xd2\x1d\x75\xaf\x00\x1d\xf3\xad\x51\x45\x4e\x37\xa6\xd0\xec\x77\x3e\xd3\xbc" +
	"\x9a\x8a\x90\x37\x02\xba\xdb\xd1\x46\xef\xbf\x32\x07\xac\x7c\x7b\x55\x75\xdd\xdc\x6a\x55\x0a\xc8\x50\x79\x3a\xe4" +
	"\xb3\x45\x37\x52\x72\x3d\x7a\x7f\x1e\xa1\x73\x52\x07\xbe\xba\x80\xef\x77\xa2\xf8\x62\xfd\xcc\xe9\xca\x9f\x7b\x3c" +
	"\x7c\xec\xdf\xc3\x28\xb7\x5c\x4e\xa5\x13\xf0\xfb\x4f\x57\x75\xbc\x57\x4f\x89\x23\x16\x3b\xb9\xea\xa9\xd9\x41\xf1" +
	"\xdf\x00\x00\x00\xff\xff\xcf\x8f\x9f\xf5\xaa\x06\x00\x00")

func bindataDeploymentalamedainfluxdbDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentalamedainfluxdbDMyaml,
		"Deployment/alameda-influxdbDM.yaml",
	)
}



func bindataDeploymentalamedainfluxdbDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentalamedainfluxdbDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-influxdbDM.yaml",
		size: 1706,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555492503, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentalamedaoperatorDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x6f\xe3\x38\x0c\xbd\x07\xc8\x7f\x20\x72\xe9\xc9\x4e\xda\xdd" +
	"\xee\x41\x37\x2f\x5c\x60\x0a\xf4\x23\x48\x3b\x73\x2d\x58\x99\x8e\x85\x91\x44\x55\x92\x1d\x18\x83\xf9\xef\x03\xdb" +
	"\x75\x6b\xa7\xe9\xcc\xf8\x66\x92\xef\xf1\xf1\x89\x44\xa7\xbe\x91\x0f\x8a\xad\x00\x74\x2e\xac\x9b\xf3\xe5\xe2\xbb" +
	"\xb2\x85\x80\x9c\x9c\xe6\xd6\x90\x8d\xcb\x85\xa1\x88\x05\x46\x14\xcb\x05\x80\x45\x43\x02\x50\xa3\xa1\x02\x13\x76" +
	"\xe4\x31\xb2\x1f\x33\xc1\xa1\x24\x01\x25\x15\x43\x1c\x55\x97\xd1\xf8\x4c\x3a\xf4\x70\xe8\x1a\xbd\xe1\x87\x88\x64" +
	"\xe3\xd8\x92\x8d\xa7\x79\xd1\x5a\x8e\x18\x15\xdb\x91\xa2\xa0\x20\xbd\x72\xb1\x17\x9e\x53\xa9\x2c\x05\xa8\xf8\x00" +
	"\x91\xa1\xe8\x85\x43\xac\xa8\xeb\xa4\x95\xec\x91\x27\x89\x01\x22\x19\xa7\x31\x52\x8a\xda\x55\x98\xb2\x23\x1b\x2a" +
	"\x55\xc6\x54\xf1\xfa\x80\x2a\x26\x25\xfb\xc4\x13\x16\xad\x80\xb3\xe8\x6b\x3a\x5b\x2e\x82\x23\xd9\xeb\xf0\xd4\xd3" +
	"\x07\x01\xe7\xdd\x6f\x20\x4d\x32\xb2\x7f\xd5\x68\x30\xca\xea\x66\x3a\xf8\x7c\xf4\x99\x92\x51\xc7\x88\x9d\x1a\xde" +
	"\x7d\x9f\x9b\xde\x7d\x7a\xde\xe5\x37\x7d\x00\xde\xd4\x0f\xc6\xdb\x88\xca\x92\x7f\x07\x27\x7f\xe8\x05\xa0\x0c\xee" +
	"\x49\xc0\x4b\x8d\x6d\x67\x93\xf3\xec\x2a\x8a\x21\xb2\x5f\x1f\x83\x12\x5f\x91\x16\xcd\x26\xfd\x27\xfd\xef\x88\x60" +
	"\x5b\x6b\xbd\x65\xad\x64\x2b\xe0\xba\xbc\xe3\xb8\xf5\x14\xfa\x6d\x1b\xcb\x3c\x05\xae\xbd\xa4\xe9\x60\x00\x5a\x19" +
	"\x15\xe7\x21\x00\xe9\x6a\x01\x17\x1b\x33\x8f\x1a\x32\xec\x5b\x01\xff\x6e\x6e\xd5\x34\xe3\xe9\xa5\xa6\x70\x9a\xe4" +
	"\xfc\x33\x92\x8b\x19\x09\xd9\x66\x82\x1e\x3d\xcb\x6e\xb2\xdb\xab\x3c\x7b\xba\xdf\x5e\xed\xb2\xc7\xfb\xdd\x53\x9e" +
	"\x3d\x66\x5f\xbe\xfe\xff\x94\xe5\xf9\xee\xea\xe1\x61\xca\xdc\xa0\xae\x49\xc0\x6a\xb4\xac\x7b\xee\xaa\x7e\x4e\x27" +
	"\x97\x93\x86\x46\x8a\xcb\xcd\xe6\x72\xb3\x7a\x47\x36\xac\x6b\x43\xb7\x5c\xdb\xd9\x00\xa3\x04\xc7\x85\xb2\x25\x4f" +
	"\x3b\x99\xae\x76\x8b\xb1\x12\xb0\xa6\x28\xd7\x27\x4a\xba\x0d\xbf\xb7\xba\x15\x50\xa2\x0e\x34\xa5\x9d\xa2\x1b\xf4" +
	"\x6b\xcd\xfb\xf5\xec\x78\x87\x6f\xe8\xfe\x61\x6b\x12\xcd\xfb\xa4\x5b\x0d\xdc\xbf\xb1\x0e\x13\x7c\xdc\xb8\xbf\x02" +
	"\x03\x90\x71\xb1\xcd\x95\x17\xf0\xe3\xe7\x31\xc5\x87\xd1\x0a\x3e\xd8\x03\xfa\x22\xdb\x5e\xcf\x5e\x5b\x45\x32\xf3" +
	"\xf7\x4f\xc0\xf5\x43\xae\x86\x63\x5a\xcd\xb7\xa0\x54\xa4\x8b\x1d\x95\x47\x2b\xf3\x9a\x18\xec\x19\x8f\x36\x1d\x18" +
	"\xc6\xca\x40\xbe\x51\x92\x32\x29\x3b\x27\x3f\x3f\xac\x79\xdd\xdd\xc9\x23\xec\xea\x7e\x05\x00\x00\xff\xff\x67\x68" +
	"\xa2\xb4\xb4\x05\x00\x00")

func bindataDeploymentalamedaoperatorDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentalamedaoperatorDMyaml,
		"Deployment/alameda-operatorDM.yaml",
	)
}



func bindataDeploymentalamedaoperatorDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentalamedaoperatorDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-operatorDM.yaml",
		size: 1460,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceadmissioncontrollerSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x41\xaa\xc3\x30\x0c\x44\xf7\x06\xdf\x41\x17\x08\xe4\xf3\xb3\x28" +
	"\x3e\x45\xa1\xd0\xbd\x6a\x4f\x8b\xa9\x63\x1b\x49\xe4\xfc\xc5\xce\xbe\xdd\x0d\xf3\x90\xde\x70\xcf\x77\x88\xe6\x56" +
	"\x03\x1d\x7f\xde\xbd\x73\x4d\x81\x6e\x90\x23\x47\x78\xb7\xc3\x38\xb1\x71\xf0\x8e\xa8\xf0\x03\x45\x67\x24\xe2\xde" +
	"\x03\x71\xda\xb3\x8e\xe3\x25\xb6\x6a\xd2\x4a\x81\x0c\x5c\x79\xc7\x77\xaa\x9d\x23\x02\x3d\x91\x20\x6c\x4d\x38\x7b" +
	"\xa7\x1d\x71\x7e\xef\x4d\xec\xf4\x2c\x33\x07\xda\xb6\xff\x53\x6b\x2c\x2f\xd8\x75\x96\x97\x75\x5d\x47\xab\x28\x88" +
	"\xd6\xe4\xd7\xb2\x4f\x00\x00\x00\xff\xff\x3b\x08\x28\x3b\xec\x00\x00\x00")

func bindataServiceadmissioncontrollerSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceadmissioncontrollerSVyaml,
		"Service/admission-controllerSV.yaml",
	)
}



func bindataServiceadmissioncontrollerSVyaml() (*asset, error) {
	bytes, err := bindataServiceadmissioncontrollerSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/admission-controllerSV.yaml",
		size: 236,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555492503, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServicealamedadatahubSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\xae\xc3\x20\x10\x44\x7b\x24\xee\xb0\x17\xb0\xe4\x5f\xb8\xe1" +
	"\x1a\x5f\xfa\xfd\x18\xe6\x27\x28\xd8\xac\x16\xe2\xf3\x47\xd8\x69\x93\x6e\xb5\x6f\xf4\x66\xa0\xf9\x8f\xd6\x72\xdd" +
	"\x83\x1c\x3f\xde\x3d\xf2\x9e\x82\xfc\xd2\x8e\x1c\xe9\xdd\xc6\x8e\x84\x8e\xe0\x9d\x48\xc1\xca\xd2\xce\x53\x04\xaa" +
	"\x41\x50\xb0\x31\x61\x1a\x91\xfb\x73\x1d\x64\xc7\xc6\x8f\xa0\x29\x22\x83\xfc\x33\xd1\xd0\xab\x21\x7b\xd7\x94\xf1" +
	"\x74\x6a\xb5\x7e\xd9\xa7\xb7\xe5\x66\x1a\xaf\xb6\xc1\x82\x2c\xf3\xbc\xcc\xe3\xd1\x58\x18\x7b\xb5\x2f\x5b\x5e\x01" +
	"\x00\x00\xff\xff\x70\x2e\x3b\x66\xd9\x00\x00\x00")

func bindataServicealamedadatahubSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServicealamedadatahubSVyaml,
		"Service/alameda-datahubSV.yaml",
	)
}



func bindataServicealamedadatahubSVyaml() (*asset, error) {
	bytes, err := bindataServicealamedadatahubSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/alameda-datahubSV.yaml",
		size: 217,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1554355143, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServicealamedagrafanaSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x41\x0a\xc2\x30\x10\x45\xf7\x81\xdc\x61\x2e\x50\xa8\xb8\xcb\x29" +
	"\x04\xc1\xfd\x37\xf9\x2d\xc1\x34\x09\x93\xa1\xe7\x17\xdb\x95\x0b\xdd\x3d\xe6\xc1\x9b\x8f\x9e\x1f\xd4\x91\x5b\x0d" +
	"\xb2\x5f\xbc\x7b\xe5\x9a\x82\xdc\xa9\x7b\x8e\xf4\x6e\xa3\x21\xc1\x10\xbc\x13\x29\x78\xb2\x8c\x03\x45\xd0\x7b\x10" +
	"\x14\x6c\x4c\x98\x56\xc5\x82\x8a\x8f\xa9\xd8\xf8\x53\x8c\x8e\xc8\x20\x0b\x13\x15\xd6\x14\xd9\xbb\xd1\x19\x8f\x66" +
	"\x6f\x6a\x67\x7d\x3a\x38\xc8\x75\x9e\xe7\xf3\x9b\x41\x57\xda\xed\xeb\x3a\x58\x18\xad\xe9\x9f\x41\xf2\x0e\x00\x00" +
	"\xff\xff\x45\x9d\xf7\x51\xdf\x00\x00\x00")

func bindataServicealamedagrafanaSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServicealamedagrafanaSVyaml,
		"Service/alameda-grafanaSV.yaml",
	)
}



func bindataServicealamedagrafanaSVyaml() (*asset, error) {
	bytes, err := bindataServicealamedagrafanaSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/alameda-grafanaSV.yaml",
		size: 223,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServicealamedainfluxdbSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x8a\xc3\x30\x10\x45\x7b\x81\xee\x30\x17\x30\xec\x36\x8b\xd1" +
	"\x29\x16\x16\xb6\xff\x96\xbe\x83\x88\x2c\x89\xd1\xc4\xe4\xf8\x21\x76\x95\x22\xe9\x1e\xf3\xe0\xcd\x47\xcf\xff\xd4" +
	"\x91\x5b\x0d\xb2\x7f\x7b\x77\xcd\x35\x05\xf9\xa3\xee\x39\xd2\xbb\x8d\x86\x04\x43\xf0\x4e\xa4\x60\x61\x19\x07\x8a" +
	"\xa0\xf7\x20\x28\xd8\x98\x30\xe5\xba\x96\xdb\x3d\x2d\x4f\x55\xb1\xf1\xbd\x19\x1d\x91\x41\x56\x26\x2a\xac\x29\xb2" +
	"\x77\xa3\x33\x1e\xd5\xde\xd4\xce\xfe\x74\x70\x90\xf9\x6b\xfe\x39\xff\x19\xf4\x42\xfb\x7d\xb9\x0e\x16\x46\x6b\xfa" +
	"\x69\xd2\x23\x00\x00\xff\xff\x95\xb1\x8d\xfd\xe1\x00\x00\x00")

func bindataServicealamedainfluxdbSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServicealamedainfluxdbSVyaml,
		"Service/alameda-influxdbSV.yaml",
	)
}



func bindataServicealamedainfluxdbSVyaml() (*asset, error) {
	bytes, err := bindataServicealamedainfluxdbSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/alameda-influxdbSV.yaml",
		size: 225,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555492503, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimadmissioncontrollerlogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\xbd\x4a\x84\x41\x0c\x45\xfb\x81\x79\x87\xbc\xc0\x0a\x5a\x4e\x6b" +
	"\x61\x25\x8a\xc5\x5a\x87\xcc\x55\x82\xf3\x67\x92\x6f\x9f\x5f\x66\xe1\xb3\xbc\x87\x73\x0f\x2f\xbd\xc2\x5c\xe7\x28" +
	"\x74\x7b\xcc\xe9\x47\x47\x2d\xf4\xbe\x91\x07\x46\x5c\x67\x3b\x3a\x9e\x1b\x6b\xcf\xa9\x23\xb8\x72\x70\xc9\x89\x68" +
	"\x70\x47\x21\xae\x5d\x7d\xdf\x2f\x32\x47\xd8\x6c\x0d\xf6\xb0\x6e\x72\x1a\xbe\x58\x50\xe8\x0b\x15\xc6\x31\x8d\x35" +
	"\x27\x5f\x90\x7b\x82\x45\xe0\xfe\x3a\x2b\xfc\xbe\x89\x2e\xf4\x01\xae\x9f\xa6\x81\xb7\x21\xd8\xd0\xe0\xf3\x30\xf9" +
	"\x57\x0c\xbf\x07\x3c\xce\x49\xe4\x3b\xfb\x8d\x42\x4f\x2f\x4a\x7f\x01\x00\x00\xff\xff\x8c\x5f\x09\x5c\xd0\x00\x00" +
	"\x00")

func bindataPersistentVolumeClaimadmissioncontrollerlogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimadmissioncontrollerlogyaml,
		"PersistentVolumeClaim/admission-controller-log.yaml",
	)
}



func bindataPersistentVolumeClaimadmissioncontrollerlogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimadmissioncontrollerlogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/admission-controller-log.yaml",
		size: 208,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimalamedaailogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x3b\x6e\xc3\x30\x10\x84\xe1\x9e\x00\xef\xb0\x17\x50\x80\xa4\x64" +
	"\x9b\x22\x55\x90\xc0\x85\x5c\x0f\xc8\xb1\xb1\xb0\xf8\x30\x97\xd2\xf9\x0d\x09\x90\xcb\xff\xc3\xee\xa0\xe9\xcc\x6e" +
	"\x5a\x4b\x90\xed\xd3\xbb\x87\x96\x14\xe4\x7f\x27\x1b\x2c\x63\xae\xcb\x9a\xf9\xbd\x40\xb3\x77\x99\x03\x09\x03\xc1" +
	"\x3b\x91\x82\xcc\x20\x58\x90\x99\x30\x41\x3f\xda\x16\x4f\xb7\x86\xc8\x20\x37\x26\x76\x8c\xda\xa1\xde\x59\x63\x3c" +
	"\x1e\x11\x23\xcd\x7e\x6b\xa2\x1d\x2d\x32\xc9\x85\x48\xd7\xae\x83\x7f\x25\x72\xc7\x4e\xab\x6b\x8f\xef\x93\xce\xe7" +
	"\x4a\x1b\x67\x8a\xd8\x3e\x7b\x67\x90\xaf\x1f\x95\x57\x00\x00\x00\xff\xff\x2b\xa4\x66\x20\xc6\x00\x00\x00")

func bindataPersistentVolumeClaimalamedaailogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimalamedaailogyaml,
		"PersistentVolumeClaim/alameda-ai-log.yaml",
	)
}



func bindataPersistentVolumeClaimalamedaailogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimalamedaailogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-ai-log.yaml",
		size: 198,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimalamedadatahublogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\xbb\x8e\xc2\x30\x10\x45\x7b\x4b\xfe\x87\xf9\x81\xac\xb4\x5b\xba" +
	"\xdd\x82\x0a\x81\x28\x42\x3d\xd8\x17\xb0\x88\x1f\x78\xc6\xf9\x7e\xe4\x48\xa1\x3c\xe7\x3e\xb8\xc6\x19\x4d\x62\xc9" +
	"\x8e\xd6\x5f\x6b\x5e\x31\x07\x47\xe7\xa1\x44\x91\x75\x2e\x4b\x4f\xf8\x5f\x38\x26\x6b\x12\x94\x03\x2b\x3b\x6b\x88" +
	"\x32\x27\x38\xe2\x85\x13\x02\x4f\x43\x3f\xfb\xed\xa7\xae\x7e\x0f\xa5\xb2\x87\xa3\x3b\x02\x1a\x6b\x69\x1c\xad\x91" +
	"\x0a\xbf\xad\xd9\x7b\x88\x1c\x4b\x80\x6c\x4c\x34\xd1\x05\x1c\xae\x2d\x2a\x4e\xd9\x63\xc8\x06\x29\xbd\xf9\x6f\xa5" +
	"\xe1\xdd\x21\xba\x23\x91\x8c\xdb\x07\x1c\xfd\x1d\x22\x7d\x02\x00\x00\xff\xff\xa5\xb7\x0d\x46\xcb\x00\x00\x00")

func bindataPersistentVolumeClaimalamedadatahublogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimalamedadatahublogyaml,
		"PersistentVolumeClaim/alameda-datahub-log.yaml",
	)
}



func bindataPersistentVolumeClaimalamedadatahublogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimalamedadatahublogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-datahub-log.yaml",
		size: 203,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimalamedaevictionerlogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\xbb\x4a\xc0\x40\x10\x45\xfb\x85\xfd\x87\xf9\x81\x08\x5a\x6e\x6b" +
	"\x61\x25\x8a\x45\xac\x87\xd9\xab\x0c\x66\x1f\xce\x4c\xf2\xfd\x92\x40\x2c\xcf\xb9\x97\xc3\x53\x57\x98\xeb\xe8\x85" +
	"\x8e\xc7\x9c\x7e\xb4\xd7\x42\xef\xa7\xf2\x40\x8f\x75\x6c\x7b\xc3\xf3\xc6\xda\x72\x6a\x08\xae\x1c\x5c\x72\x22\xea" +
	"\xdc\x50\x88\x37\x6e\xa8\xbc\xe0\x50\x09\x1d\x1d\xf6\x30\x0f\xb9\x77\x9f\x2c\x28\xf4\x85\x0a\xe3\x18\xc6\x9a\x93" +
	"\x4f\xc8\x15\x60\x11\xb8\xbf\x8e\x0a\xbf\x98\x68\xa1\x0f\x70\xfd\x34\x0d\xbc\x75\xc1\x29\x0d\x3e\x76\x93\xff\x8b" +
	"\xe1\x77\x87\xc7\x8d\x44\x7e\x66\xbf\x51\xe8\xe9\x45\xe9\x2f\x00\x00\xff\xff\xb6\xcc\x2f\xd3\xce\x00\x00\x00")

func bindataPersistentVolumeClaimalamedaevictionerlogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimalamedaevictionerlogyaml,
		"PersistentVolumeClaim/alameda-evictioner-log.yaml",
	)
}



func bindataPersistentVolumeClaimalamedaevictionerlogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimalamedaevictionerlogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-evictioner-log.yaml",
		size: 206,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimalamedaoperatorlogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\x3d\xce\xc2\x30\x10\x44\x7b\x4b\xbe\xc3\x5e\x20\x9f\xf4\x51\xba" +
	"\xa5\xa0\x42\x20\x8a\x50\x8f\xec\x01\x59\xc4\x3f\x78\x9d\x9c\x1f\x25\x28\x94\xef\xbd\xdd\x41\x8d\x23\x9b\xc6\x92" +
	"\x9d\x2c\xff\xd6\xbc\x62\x0e\x4e\xae\xab\xd2\xce\xdc\xc7\x32\xcd\x89\xc7\x09\x31\x59\x93\xd8\x11\xd0\xe1\xac\x11" +
	"\xc9\x48\x74\x82\x09\x89\x01\x43\xa9\x6c\xe8\xa5\xfd\xd5\xc5\xef\x55\x2b\x3c\x9d\x3c\x18\xbe\x0d\xd1\x1a\xad\xf4" +
	"\xdb\x3b\xbc\xa7\xea\xb9\x04\xea\xc6\x22\x83\xdc\x88\x70\x6f\xb1\xf3\x92\x3d\x57\xd9\xa8\x65\x6e\xfe\x77\xd2\xf8" +
	"\x9e\xa9\x7d\x47\x11\x5d\x67\x9f\x74\x72\x38\x45\xf9\x04\x00\x00\xff\xff\x75\x2c\x65\xe2\xcc\x00\x00\x00")

func bindataPersistentVolumeClaimalamedaoperatorlogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimalamedaoperatorlogyaml,
		"PersistentVolumeClaim/alameda-operator-log.yaml",
	)
}



func bindataPersistentVolumeClaimalamedaoperatorlogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimalamedaoperatorlogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-operator-log.yaml",
		size: 204,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555645347, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimmyalamedagrafanaPVCyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\xbd\x4a\xc6\x40\x14\x44\xfb\x85\x7d\x87\xfb\x02\x5f\x40\xcb\x6d" +
	"\x2d\xac\x44\xb1\x88\xf5\xb0\x3b\x09\x8b\xd9\x1f\xef\xdd\x04\x7c\x7b\x49\x20\x96\xe7\xcc\x70\xd0\xf3\x4c\xb5\xdc" +
	"\x6a\x90\xe3\xc9\xbb\xef\x5c\x53\x90\x8f\x53\xd9\x60\x1d\x73\xdb\xf6\xc2\x97\x0d\xb9\x78\x57\x38\x90\x30\x10\xbc" +
	"\x13\xa9\x28\x0c\x52\x7e\x1f\xd8\x50\x98\x30\xad\x8a\x05\x15\x53\x3f\xe2\xbd\x5b\x47\x64\x90\x85\x89\x8a\xd1\x14" +
	"\xd9\x3b\xeb\x8c\x57\x00\x31\xd2\xec\xad\x25\xda\xc5\x22\x0f\xf9\x24\xd2\x97\xe6\xc1\xf7\x1a\x79\x4a\xa5\xb5\x5d" +
	"\xe3\xff\x45\xf9\xb3\xd3\xc6\x8d\x22\x76\x66\x57\x06\x79\x7e\xcd\xf2\x17\x00\x00\xff\xff\x51\x19\x4f\x94\xce\x00" +
	"\x00\x00")

func bindataPersistentVolumeClaimmyalamedagrafanaPVCyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimmyalamedagrafanaPVCyaml,
		"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml",
	)
}



func bindataPersistentVolumeClaimmyalamedagrafanaPVCyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimmyalamedagrafanaPVCyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/my-alamedagrafanaPVC.yaml",
		size: 206,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimmyalamedainfluxdbPVCyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\x3f\x4b\xc0\x30\x10\x47\xf7\x40\xbe\xc3\x6d\x9d\x5a\xec\x9a\xd5" +
	"\xc1\x49\x14\x87\x3a\x9f\xc9\xaf\x72\x98\x7f\xe6\x92\xa2\xdf\x5e\x5a\xa8\xe3\x7b\x3c\x1e\x57\xd9\xd0\x54\x4a\x76" +
	"\x74\xac\xd6\x7c\x49\x0e\x8e\x5e\x4f\xa5\x1d\xb9\x6f\x25\x8e\x84\xc7\xc8\x92\xac\x49\xe8\x1c\xb8\xb3\xb3\x86\x28" +
	"\x73\x82\xa3\xf4\x3b\x73\xe4\x84\xc0\x8b\xe4\x3d\x8e\x9f\xf0\xb1\xd4\xc3\xdf\x81\x56\xf6\x70\xb4\x23\xa0\x71\x2f" +
	"\x8d\xc5\x1a\xad\xf0\xd7\x81\xbd\x87\xea\x73\x09\xd0\x8b\x89\x66\x7a\x03\x87\xf7\x26\x1d\x2f\xd9\xe3\x94\x0d\x5a" +
	"\x46\xf3\xff\x49\xc3\xf7\x80\xf6\x1b\x89\xf4\xdc\x7e\xc2\xd1\xb4\x3e\x3c\xc9\xf4\x17\x00\x00\xff\xff\x64\x55\x34" +
	"\x22\xd1\x00\x00\x00")

func bindataPersistentVolumeClaimmyalamedainfluxdbPVCyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimmyalamedainfluxdbPVCyaml,
		"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml",
	)
}



func bindataPersistentVolumeClaimmyalamedainfluxdbPVCyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimmyalamedainfluxdbPVCyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml",
		size: 209,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1553562565, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSecretadmissioncontrollertlsyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\x3d\x0a\x82\x31\x10\x04\xd0\x3e\x90\x3b\xec\x05\xbe\xc2\x76\x2f" +
	"\x61\x21\xd8\x0f\xc9\x08\x8b\xf9\x73\xb3\x0a\xde\x5e\x04\xed\x1f\x2f\x27\x2c\xbb\xd2\xb7\xcd\xa1\xf2\x3a\xe5\x74" +
	"\xb7\x51\x55\x2e\x2c\xce\xc8\xa9\x33\x50\x11\xd0\x9c\x44\x06\x3a\x55\x50\xbb\xed\xaf\x3f\xca\x1c\xe1\xb3\x35\xfa" +
	"\x11\x6d\xff\xc5\x5e\x28\x54\xb9\xb1\xd2\x11\xd3\x61\x39\xfd\x8a\x78\x2f\xaa\x9c\x17\x1e\x4f\x7e\x02\x00\x00\xff" +
	"\xff\xef\xa0\x60\xb8\x7a\x00\x00\x00")

func bindataSecretadmissioncontrollertlsyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSecretadmissioncontrollertlsyaml,
		"Secret/admission-controller-tls.yaml",
	)
}



func bindataSecretadmissioncontrollertlsyaml() (*asset, error) {
	bytes, err := bindataSecretadmissioncontrollertlsyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Secret/admission-controller-tls.yaml",
		size: 122,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555492503, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSecretalamedainfluxdbyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcb\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\x52\xee\xe0\x0b\x74\x60\xf5\x25" +
	"\x18\x90\xd8\x3f\xf5\xaf\x64\x91\xa4\x21\x71\x11\xdc\x9e\x85\xce\x4f\x0f\xdd\xef\x1c\xd3\xf7\xa6\xf2\xbe\xe4\xf4" +
	"\xf4\x66\x2a\x37\xae\x83\x91\x53\x65\xc0\x10\xd0\x9c\x44\x1a\x2a\x55\x50\x50\x69\x58\xbc\x6d\xe5\xf8\xd8\x63\x89" +
	"\x32\x4f\x9d\x1d\x2b\x55\x36\x1a\x07\x62\x1f\xf0\x9c\xfe\x3d\xbe\x9d\x2a\xd7\x8e\xd7\xc1\x5f\x00\x00\x00\xff\xff" +
	"\x2b\xc1\x62\x17\x74\x00\x00\x00")

func bindataSecretalamedainfluxdbyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSecretalamedainfluxdbyaml,
		"Secret/alameda-influxdb.yaml",
	)
}



func bindataSecretalamedainfluxdbyaml() (*asset, error) {
	bytes, err := bindataSecretalamedainfluxdbyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Secret/alameda-influxdb.yaml",
		size: 116,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555492503, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"ClusterRoleBinding/admission-controllerCRB.yaml":         bindataClusterRoleBindingadmissioncontrollerCRByaml,
	"ClusterRoleBinding/alameda-datahubCRB.yaml":              bindataClusterRoleBindingalamedadatahubCRByaml,
	"ClusterRoleBinding/alameda-evictionerCRB.yaml":           bindataClusterRoleBindingalamedaevictionerCRByaml,
	"ClusterRoleBinding/alameda-operatorCRB.yaml":             bindataClusterRoleBindingalamedaoperatorCRByaml,
	"ClusterRole/admission-controllerCR.yaml":                 bindataClusterRoleadmissioncontrollerCRyaml,
	"ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml": bindataClusterRoleaggregatealamedaadmineditalamedaCRyaml,
	"ClusterRole/alameda-datahubCR.yaml":                      bindataClusterRolealamedadatahubCRyaml,
	"ClusterRole/alameda-evictionerCR.yaml":                   bindataClusterRolealamedaevictionerCRyaml,
	"ClusterRole/alameda-operatorCR.yaml":                     bindataClusterRolealamedaoperatorCRyaml,
	"ServiceAccount/admission-controllerSA.yaml":              bindataServiceAccountadmissioncontrollerSAyaml,
	"ServiceAccount/alameda-aiSA.yaml":                        bindataServiceAccountalamedaaiSAyaml,
	"ServiceAccount/alameda-datahubSA.yaml":                   bindataServiceAccountalamedadatahubSAyaml,
	"ServiceAccount/alameda-evictionerSA.yaml":                bindataServiceAccountalamedaevictionerSAyaml,
	"ServiceAccount/alameda-operatorSA.yaml":                  bindataServiceAccountalamedaoperatorSAyaml,
	"CustomResourceDefinition/alamedarecommendationsCRD.yaml": bindataCustomResourceDefinitionalamedarecommendationsCRDyaml,
	"CustomResourceDefinition/alamedascalersCRD.yaml":         bindataCustomResourceDefinitionalamedascalersCRDyaml,
	"ConfigMap/grafana-datasources.yaml":                      bindataConfigMapgrafanadatasourcesyaml,
	"Deployment/admission-controllerDM.yaml":                  bindataDeploymentadmissioncontrollerDMyaml,
	"Deployment/alameda-aiDM.yaml":                            bindataDeploymentalamedaaiDMyaml,
	"Deployment/alameda-datahubDM.yaml":                       bindataDeploymentalamedadatahubDMyaml,
	"Deployment/alameda-evictionerDM.yaml":                    bindataDeploymentalamedaevictionerDMyaml,
	"Deployment/alameda-grafanaDM.yaml":                       bindataDeploymentalamedagrafanaDMyaml,
	"Deployment/alameda-influxdbDM.yaml":                      bindataDeploymentalamedainfluxdbDMyaml,
	"Deployment/alameda-operatorDM.yaml":                      bindataDeploymentalamedaoperatorDMyaml,
	"Service/admission-controllerSV.yaml":                     bindataServiceadmissioncontrollerSVyaml,
	"Service/alameda-datahubSV.yaml":                          bindataServicealamedadatahubSVyaml,
	"Service/alameda-grafanaSV.yaml":                          bindataServicealamedagrafanaSVyaml,
	"Service/alameda-influxdbSV.yaml":                         bindataServicealamedainfluxdbSVyaml,
	"PersistentVolumeClaim/admission-controller-log.yaml":     bindataPersistentVolumeClaimadmissioncontrollerlogyaml,
	"PersistentVolumeClaim/alameda-ai-log.yaml":               bindataPersistentVolumeClaimalamedaailogyaml,
	"PersistentVolumeClaim/alameda-datahub-log.yaml":          bindataPersistentVolumeClaimalamedadatahublogyaml,
	"PersistentVolumeClaim/alameda-evictioner-log.yaml":       bindataPersistentVolumeClaimalamedaevictionerlogyaml,
	"PersistentVolumeClaim/alameda-operator-log.yaml":         bindataPersistentVolumeClaimalamedaoperatorlogyaml,
	"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml":         bindataPersistentVolumeClaimmyalamedagrafanaPVCyaml,
	"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml":        bindataPersistentVolumeClaimmyalamedainfluxdbPVCyaml,
	"Secret/admission-controller-tls.yaml":                    bindataSecretadmissioncontrollertlsyaml,
	"Secret/alameda-influxdb.yaml":                            bindataSecretalamedainfluxdbyaml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"ClusterRole": {Func: nil, Children: map[string]*bintree{
		"admission-controllerCR.yaml": {Func: bindataClusterRoleadmissioncontrollerCRyaml, Children: map[string]*bintree{}},
		"aggregate-alameda-admin-edit-alamedaCR.yaml": {Func: bindataClusterRoleaggregatealamedaadmineditalamedaCRyaml, Children: map[string]*bintree{}},
		"alameda-datahubCR.yaml": {Func: bindataClusterRolealamedadatahubCRyaml, Children: map[string]*bintree{}},
		"alameda-evictionerCR.yaml": {Func: bindataClusterRolealamedaevictionerCRyaml, Children: map[string]*bintree{}},
		"alameda-operatorCR.yaml": {Func: bindataClusterRolealamedaoperatorCRyaml, Children: map[string]*bintree{}},
	}},
	"ClusterRoleBinding": {Func: nil, Children: map[string]*bintree{
		"admission-controllerCRB.yaml": {Func: bindataClusterRoleBindingadmissioncontrollerCRByaml, Children: map[string]*bintree{}},
		"alameda-datahubCRB.yaml": {Func: bindataClusterRoleBindingalamedadatahubCRByaml, Children: map[string]*bintree{}},
		"alameda-evictionerCRB.yaml": {Func: bindataClusterRoleBindingalamedaevictionerCRByaml, Children: map[string]*bintree{}},
		"alameda-operatorCRB.yaml": {Func: bindataClusterRoleBindingalamedaoperatorCRByaml, Children: map[string]*bintree{}},
	}},
	"ConfigMap": {Func: nil, Children: map[string]*bintree{
		"grafana-datasources.yaml": {Func: bindataConfigMapgrafanadatasourcesyaml, Children: map[string]*bintree{}},
	}},
	"CustomResourceDefinition": {Func: nil, Children: map[string]*bintree{
		"alamedarecommendationsCRD.yaml": {Func: bindataCustomResourceDefinitionalamedarecommendationsCRDyaml, Children: map[string]*bintree{}},
		"alamedascalersCRD.yaml": {Func: bindataCustomResourceDefinitionalamedascalersCRDyaml, Children: map[string]*bintree{}},
	}},
	"Deployment": {Func: nil, Children: map[string]*bintree{
		"admission-controllerDM.yaml": {Func: bindataDeploymentadmissioncontrollerDMyaml, Children: map[string]*bintree{}},
		"alameda-aiDM.yaml": {Func: bindataDeploymentalamedaaiDMyaml, Children: map[string]*bintree{}},
		"alameda-datahubDM.yaml": {Func: bindataDeploymentalamedadatahubDMyaml, Children: map[string]*bintree{}},
		"alameda-evictionerDM.yaml": {Func: bindataDeploymentalamedaevictionerDMyaml, Children: map[string]*bintree{}},
		"alameda-grafanaDM.yaml": {Func: bindataDeploymentalamedagrafanaDMyaml, Children: map[string]*bintree{}},
		"alameda-influxdbDM.yaml": {Func: bindataDeploymentalamedainfluxdbDMyaml, Children: map[string]*bintree{}},
		"alameda-operatorDM.yaml": {Func: bindataDeploymentalamedaoperatorDMyaml, Children: map[string]*bintree{}},
	}},
	"PersistentVolumeClaim": {Func: nil, Children: map[string]*bintree{
		"admission-controller-log.yaml": {Func: bindataPersistentVolumeClaimadmissioncontrollerlogyaml, Children: map[string]*bintree{}},
		"alameda-ai-log.yaml": {Func: bindataPersistentVolumeClaimalamedaailogyaml, Children: map[string]*bintree{}},
		"alameda-datahub-log.yaml": {Func: bindataPersistentVolumeClaimalamedadatahublogyaml, Children: map[string]*bintree{}},
		"alameda-evictioner-log.yaml": {Func: bindataPersistentVolumeClaimalamedaevictionerlogyaml, Children: map[string]*bintree{}},
		"alameda-operator-log.yaml": {Func: bindataPersistentVolumeClaimalamedaoperatorlogyaml, Children: map[string]*bintree{}},
		"my-alamedagrafanaPVC.yaml": {Func: bindataPersistentVolumeClaimmyalamedagrafanaPVCyaml, Children: map[string]*bintree{}},
		"my-alamedainfluxdbPVC.yaml": {Func: bindataPersistentVolumeClaimmyalamedainfluxdbPVCyaml, Children: map[string]*bintree{}},
	}},
	"Secret": {Func: nil, Children: map[string]*bintree{
		"admission-controller-tls.yaml": {Func: bindataSecretadmissioncontrollertlsyaml, Children: map[string]*bintree{}},
		"alameda-influxdb.yaml": {Func: bindataSecretalamedainfluxdbyaml, Children: map[string]*bintree{}},
	}},
	"Service": {Func: nil, Children: map[string]*bintree{
		"admission-controllerSV.yaml": {Func: bindataServiceadmissioncontrollerSVyaml, Children: map[string]*bintree{}},
		"alameda-datahubSV.yaml": {Func: bindataServicealamedadatahubSVyaml, Children: map[string]*bintree{}},
		"alameda-grafanaSV.yaml": {Func: bindataServicealamedagrafanaSVyaml, Children: map[string]*bintree{}},
		"alameda-influxdbSV.yaml": {Func: bindataServicealamedainfluxdbSVyaml, Children: map[string]*bintree{}},
	}},
	"ServiceAccount": {Func: nil, Children: map[string]*bintree{
		"admission-controllerSA.yaml": {Func: bindataServiceAccountadmissioncontrollerSAyaml, Children: map[string]*bintree{}},
		"alameda-aiSA.yaml": {Func: bindataServiceAccountalamedaaiSAyaml, Children: map[string]*bintree{}},
		"alameda-datahubSA.yaml": {Func: bindataServiceAccountalamedadatahubSAyaml, Children: map[string]*bintree{}},
		"alameda-evictionerSA.yaml": {Func: bindataServiceAccountalamedaevictionerSAyaml, Children: map[string]*bintree{}},
		"alameda-operatorSA.yaml": {Func: bindataServiceAccountalamedaoperatorSAyaml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
