// Code generated by go-bindata.
// sources:
// CustomResourceDefinition/alamedarecommendationsCRD.yaml
// CustomResourceDefinition/alamedascalersCRD.yaml
// ConfigMap/grafana-datasources.yaml
// Deployment/admission-controllerDM.yaml
// Deployment/alameda-aiDM.yaml
// Deployment/alameda-datahubDM.yaml
// Deployment/alameda-evictionerDM.yaml
// Deployment/alameda-grafanaDM.yaml
// Deployment/alameda-influxdbDM.yaml
// Deployment/alameda-operatorDM.yaml
// PersistentVolumeClaim/my-alamedagrafanaPVC.yaml
// PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml
// Service/admission-controllerSV.yaml
// Service/alameda-datahubSV.yaml
// Service/alameda-grafanaSV.yaml
// Service/alameda-influxdbSV.yaml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _customresourcedefinitionAlamedarecommendationscrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x3d\x8f\xdb\x30\x0c\xdd\xf5\x2b\x88\xec\x71\x6b\x74\x29\xbc\x1d\xda\xa5\xcb\xa1\xb8\x02\xb7\x14\x1d\x18\x89\xcd\xb1\x27\x8b\x2a\x45\x07\xbd\x7f\x5f\xd8\x8a\xf3\x71\x89\x13\x4e\xf6\x13\xf5\xde\xe3\x87\x30\xf3\x33\x69\x61\x49\x1d\x60\x66\xfa\x67\x94\xc6\xbf\xd2\xbc\x7e\x2e\x0d\xcb\x87\x5d\xbb\x21\xc3\xd6\xbd\x72\x0a\x1d\x7c\x19\x8a\x49\xff\x44\x45\x06\xf5\xf4\x95\x7e\x73\x62\x63\x49\xae\x27\xc3\x80\x86\x9d\x03\x88\xb8\xa1\x58\xc6\x2f\x00\x2f\xc9\x54\x62\x24\x5d\x9b\x48\x9c\x69\x3b\x58\xb5\xcd\xc7\x95\x03\x48\xd8\x53\x07\x18\xb1\xa7\x80\x4a\x5e\xfa\x9e\x52\x40\x9b\x3c\xe0\x60\x52\x3c\x46\x4e\xdb\x66\x64\x42\x4e\xa4\xa5\x41\x76\x25\x93\x1f\x15\xb6\x2a\x43\xee\x60\x39\xb1\x2a\xec\xdd\xd4\x22\x1e\xaa\xd8\xd3\x99\xd8\x74\x9e\xe3\xa0\x18\x97\xec\x38\x80\xe2\x25\x53\x07\x8f\x23\x65\x46\x4f\xc1\x01\xec\x30\x72\xcd\xa8\x22\x92\x29\x3d\x7c\xff\xf6\xfc\xe9\x87\x7f\xa1\x1e\x2b\x08\x90\x55\x32\xa9\xf1\xec\x65\x8c\x93\xee\x1f\x30\x00\x7b\x1b\x35\x8a\x29\xa7\xed\x01\x9e\xac\xdf\x4b\x3a\x9d\xc2\x79\xa2\x6c\xfe\x90\xb7\x03\x3c\xb7\x6f\x8e\x6b\xe6\xe6\xf1\xd5\x5e\x9e\xe3\x00\x6c\xd4\x5f\x80\xcb\x44\x35\xa6\x61\x5f\xc1\x17\xca\x39\x86\xee\x37\xee\x2a\xeb\x42\x8d\xc7\xbb\x7f\x07\x56\x0a\x97\x57\xd7\x93\xa1\x0b\xf8\x06\x5b\x3d\x42\x55\x7c\x73\xb7\x15\xd6\x27\xbd\xbb\x3b\x0d\x43\x1b\xca\x8d\xa1\xed\xe6\x27\xba\x6b\x31\xe6\x17\x6c\xdd\xf1\x0a\x7a\x4f\xd9\x28\x3c\xbe\x5f\xf3\xd5\xea\x6c\xa7\xa7\x5f\x2f\x29\x4c\x0f\xb6\x74\xf0\xf3\xd7\xb8\xd0\x26\x4a\x61\xbf\x84\x13\xf8\x3f\x00\x00\xff\xff\xc3\x68\x72\x63\x12\x04\x00\x00")

func customresourcedefinitionAlamedarecommendationscrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_customresourcedefinitionAlamedarecommendationscrdYaml,
		"CustomResourceDefinition/alamedarecommendationsCRD.yaml",
	)
}

func customresourcedefinitionAlamedarecommendationscrdYaml() (*asset, error) {
	bytes, err := customresourcedefinitionAlamedarecommendationscrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "CustomResourceDefinition/alamedarecommendationsCRD.yaml", size: 1042, mode: os.FileMode(420), modTime: time.Unix(1552890155, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _customresourcedefinitionAlamedascalerscrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x41\x8f\x2b\x35\x0c\xbe\xcf\xaf\xb0\xca\x61\x2f\x74\x4a\xc5\x05\xcd\x01\xe9\xa9\x70\x58\x21\x9e\xd0\x2e\x7a\x17\xc4\xc1\x93\x78\xda\xb0\x89\x1d\x12\x4f\x45\xf9\xf5\x28\x99\xb6\xdb\x99\xd7\xe5\x2d\x12\x39\x4d\xbe\x71\x3e\x3b\x9f\xed\x18\xa3\xfb\x44\x29\x3b\xe1\x0e\x30\x3a\xfa\x4b\x89\xcb\x2e\xb7\x2f\xdf\xe5\xd6\xc9\xe6\xb8\xed\x49\x71\xdb\xbc\x38\xb6\x1d\xec\xc6\xac\x12\x9e\x28\xcb\x98\x0c\xfd\x40\x83\x63\xa7\x4e\xb8\x09\xa4\x68\x51\xb1\x03\x00\x68\x00\x3c\xf6\xe4\x73\xd7\x94\xad\x11\xd6\x24\xde\x53\x5a\xab\x88\xbf\x50\x77\xb0\xda\xb6\xdf\xac\x1a\x00\xc6\x40\x1d\xa0\xc7\x40\x16\xb3\x41\x4f\x29\xb7\x38\xaa\x94\x6f\xc7\xfb\xb6\x30\xa0\xe3\x0a\xbb\x26\x47\x32\x85\x79\x9f\x64\x8c\x1d\xbc\x6d\x38\x31\x9f\xa3\x98\x2e\xf0\x61\x72\xf2\x5c\x9d\x54\x3c\xfa\x31\xa1\x5f\xba\x6f\x00\xb2\x91\x48\x1d\x7c\x2c\x14\x11\x0d\xd9\x06\xe0\x88\xde\x59\x2c\x37\x9e\x48\x25\x12\x7f\xf8\xe5\xf1\xd3\xb7\xcf\xe6\x40\x01\x27\x10\x20\x26\x89\x94\xd4\x5d\x7c\x97\x75\xa3\xf4\x15\x03\xb0\x94\x4d\x72\xb1\x32\xc2\xf7\xeb\x9b\x3f\x00\x0f\x85\x79\x3a\x02\xb6\x48\x4d\x19\xf4\x40\x70\x9c\x30\xb2\x90\xab\x57\x90\x01\xf4\xe0\x32\x24\x8a\x89\x32\xb1\xd6\x08\x67\x5c\x32\x00\x32\x48\xff\x07\x19\x6d\xe1\x99\x52\x21\x81\x7c\x90\xd1\xdb\x92\xa0\x23\x25\x85\x44\x46\xf6\xec\xfe\xbe\x32\x67\x50\xa9\x2e\x3d\x2a\x65\x9d\x31\x3a\x56\x4a\x8c\xbe\x68\x32\xd2\xd7\x80\x6c\x21\xe0\x09\x12\x15\x1f\x30\xf2\x0d\x5b\x35\xc9\x2d\xfc\x2c\x89\xc0\xf1\x20\x1d\x1c\x54\x63\xee\x36\x9b\xbd\xd3\x4b\xa9\x19\x09\x61\x64\xa7\xa7\x4d\xad\x18\xd7\x8f\x2a\x29\x6f\x2c\x1d\xc9\x6f\x30\xba\x75\x8d\x93\xb5\x96\x67\xb0\x5f\xa5\x73\x19\xe6\x87\x9b\xc0\xf4\x54\x92\x96\x35\x39\xde\x5f\xe1\x9a\xfb\xf7\xaa\xfe\x93\x63\x0b\x2e\x03\x9e\x59\xa6\xe8\x5f\xc5\x2d\x50\xd1\xe4\xe9\xc7\xe7\x5f\xe1\x12\x43\x4d\xc0\x5c\xf1\xaa\xf5\xeb\xb1\xfc\x2a\x7b\x91\xc9\xf1\x40\x69\x4a\xdb\x90\x24\x54\x46\x62\x1b\xc5\xb1\xd6\x8d\xf1\x8e\x78\x2e\x79\x1e\xfb\xe0\xb4\xe4\xf9\xcf\x91\xb2\x96\xec\xb4\xb0\x43\x66\x51\xe8\x09\xc6\x68\x51\xc9\xb6\xf0\xc8\xb0\xc3\x40\x7e\x87\x99\xfe\x6f\xd1\x8b\xbe\x79\x5d\x04\xfd\xb2\xec\xd7\x47\xe1\x33\xc3\x49\x9c\x2b\x7c\xe9\xe8\xcb\xba\xd7\x3f\x65\x99\xd9\xf3\x73\xa7\x9d\xde\x0c\xa5\x2c\x62\xec\x3d\xdd\x37\xef\x45\x3c\xe1\xbc\x67\xa2\x78\x67\x4e\x4b\x7b\xe2\x31\x2c\xb1\x35\x64\x2d\xdc\x9f\xc1\x46\x42\x44\xa3\xef\x8d\x30\x93\x27\xa3\x92\x96\xfc\xb3\x7a\x7d\x78\x0c\x51\x92\x22\x6b\x07\x4f\x23\xc3\x2a\xe0\x0b\xad\x4a\xa7\x26\xda\x13\x53\x42\x25\x30\x62\x09\x70\x50\x4a\x10\xc4\xba\xe1\x34\x55\x6d\xa9\x36\xe7\xe9\xe1\x6e\x40\x8b\xa4\x40\xad\x33\x97\x68\xd6\x3a\xeb\x6b\x90\x33\x70\xd2\xf6\x8b\x79\x56\xd4\x31\xbf\x27\xd3\xe7\xd7\x78\x77\x1d\x1d\x4b\x49\xde\x3a\x38\xc9\x15\xbd\x9c\x02\xb1\x1a\xe1\xc1\xed\xef\x98\xbc\x79\xe7\x25\xc3\x7f\x3d\x7b\x4f\xb3\x49\xa2\x1b\xce\x7f\xf9\x77\x8e\xf8\x7d\x09\x5a\xc0\xc7\xcb\x24\x3f\x6e\xd1\xc7\x03\x6e\x9b\x57\xc1\xd1\x18\x8a\x4a\xf6\xe3\x72\x22\xae\x56\xb3\x31\x58\xb7\x46\xd8\xd6\xb9\x9e\x3b\xf8\xed\xf7\x32\x0b\x55\x12\xd9\x73\xc3\x55\xf0\x9f\x00\x00\x00\xff\xff\x75\xf1\x8d\xab\x39\x08\x00\x00")

func customresourcedefinitionAlamedascalerscrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_customresourcedefinitionAlamedascalerscrdYaml,
		"CustomResourceDefinition/alamedascalersCRD.yaml",
	)
}

func customresourcedefinitionAlamedascalerscrdYaml() (*asset, error) {
	bytes, err := customresourcedefinitionAlamedascalerscrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "CustomResourceDefinition/alamedascalersCRD.yaml", size: 2105, mode: os.FileMode(420), modTime: time.Unix(1552890155, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configmapGrafanaDatasourcesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x8f\xda\x30\x10\xc5\xef\xf9\x14\x23\x9f\xf9\x53\x2e\x15\xf2\xad\x2d\x17\x0e\x55\x0f\x95\xb8\x54\x55\x35\xc4\x13\x70\x71\x6c\x6b\xc6\x61\x89\x76\xf9\xee\x2b\x67\x21\xc0\xe2\x1c\xa2\xd8\xef\xf7\x9e\x9f\x27\x18\xed\x86\x58\x6c\xf0\x1a\x8e\x8b\xea\x60\xbd\xd1\xf0\x23\xf8\xc6\xee\x7e\x62\xac\x5a\x4a\x68\x30\xa1\xae\x00\x3c\xb6\xa4\x61\xc7\xd8\xa0\xc7\x69\xde\x95\xd0\x71\x4d\x72\xd1\x24\x62\x4d\x1a\x1a\x32\xc4\x98\x02\xa3\xad\xae\xd6\xc8\xa1\xa5\xb4\xa7\x4e\x66\x3d\xb6\x4e\xc3\xdb\xb4\x02\x00\x78\x1d\xde\xf9\x51\xb7\x22\x4a\xc3\x62\x72\x13\xee\x0e\x52\x1a\xfe\x8c\xc2\xa3\x7f\xc4\x03\xef\xd6\xe6\x31\x62\xd4\x72\x4b\xa5\x41\xad\x7d\xe3\xba\xd3\xea\xbb\x9a\x7c\x46\x00\x9e\x5d\xa9\x8f\x83\xcb\x0e\x2e\xb3\x55\x85\x64\xac\x6b\x92\xdc\x4f\x45\x0e\xa7\xbe\x84\x74\xec\xb2\xbe\x4f\x29\x8a\x9e\xcf\xd1\x61\x4b\x06\xa7\xd7\xd4\xd9\xdd\xdc\x66\x72\xac\xf5\xf2\xcb\xf2\x6b\x29\x27\xa2\xc8\x4b\xe0\x7c\x47\x85\xa6\xb5\x3e\x6f\x14\x0f\x14\xe2\x11\x2a\x01\x79\xb2\x5b\x94\xe1\x72\xff\xac\x4f\xc4\x1e\x5d\x09\xdc\xa2\xd8\xfa\x5b\x97\xf6\x4a\x43\x83\x4e\xa8\xc0\x58\x59\x51\x83\x9d\x4b\x4a\x43\xe2\xae\x84\xfc\x97\xe0\x57\x98\x50\xe9\xc2\x8f\xcb\x83\x76\xf2\xfb\x60\xe3\x86\xd8\x36\xfd\x25\xe6\x89\x3b\x17\x82\x99\xd0\xfc\xf2\xae\xbf\xd6\x7b\x20\xce\xe3\xea\xef\xf0\x75\xfe\x58\xbc\x07\x00\x00\xff\xff\xc1\x67\x54\x9d\xf9\x02\x00\x00")

func configmapGrafanaDatasourcesYamlBytes() ([]byte, error) {
	return bindataRead(
		_configmapGrafanaDatasourcesYaml,
		"ConfigMap/grafana-datasources.yaml",
	)
}

func configmapGrafanaDatasourcesYaml() (*asset, error) {
	bytes, err := configmapGrafanaDatasourcesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ConfigMap/grafana-datasources.yaml", size: 761, mode: os.FileMode(420), modTime: time.Unix(1553564177, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAdmissionControllerdmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x8f\xdb\x46\x0c\xbd\xfb\x57\x10\xb9\xe4\x24\xc9\x41\xeb\x14\x9d\x9b\x62\x29\xe8\xa2\xb6\x63\xd8\x6e\x80\x9c\x0c\xee\x88\xaa\x06\x3b\x1f\xca\x0c\xa5\xc0\xff\xbe\xd0\xca\x72\xa4\xae\x3f\xa2\x93\xcd\x99\xf7\xf8\x1e\x87\x24\xd6\xea\x2b\xf9\xa0\x9c\x15\x80\x75\x1d\x92\xf6\xc3\xec\x45\xd9\x42\x40\x46\xb5\x76\x27\x43\x96\x67\x86\x18\x0b\x64\x14\x33\x00\x8b\x86\x04\x60\x61\x54\xe8\x50\x91\x74\x96\xbd\xd3\x9a\xfc\xf9\x30\xd4\x28\x49\x40\x49\x05\x79\x64\xe7\x51\xcd\x00\x34\x3e\x93\x0e\x1d\x1e\xba\x34\x02\x50\xa3\xa1\x02\x5f\x03\xd2\x99\xda\x59\xb2\x7c\x93\x17\xad\x75\x8c\xac\x9c\x3d\x73\x14\x14\xa4\x57\x35\xbf\xea\xce\xa8\x54\x96\x02\x54\xee\x07\xb0\x83\xe2\x55\x38\x70\x45\xb7\xe8\x00\x98\x4c\xad\x91\x29\x46\x5d\x57\x18\xbb\x9a\x6c\xa8\x54\xc9\xb1\x72\xc9\x0f\x54\x1c\x95\xce\x47\x9e\xb0\x38\x09\x78\xcf\xbe\xa1\xf7\xb3\x50\x93\xec\x92\x7b\xaa\xb5\x92\x18\x04\x7c\x98\x01\x04\xd2\x24\xd9\xf9\x5e\x96\x41\x96\xd5\x6a\xe4\x75\x70\x7b\x5d\xc7\xa0\xe2\x0c\x1e\x55\xb9\xfb\xee\x56\xba\xfb\xf4\x24\xd1\xfd\x54\x00\x83\xfe\xbe\xe2\x96\x51\x59\xf2\x17\x74\xf4\x38\x1d\x80\x32\xf8\x2f\x09\xf8\xde\xe0\xa9\x2b\x54\xed\x5d\x5d\x11\x07\x76\x3e\x39\xbf\x67\xf4\x13\xef\x2b\xd2\xa2\x9d\xc7\xbf\xc5\x1f\xa7\x04\xdb\x46\xeb\xad\xd3\x4a\x9e\x04\x3c\x95\x1b\xc7\x5b\x4f\xa1\x6b\xb3\xe1\x96\xa7\xe0\x1a\x2f\x69\x64\x0d\x40\x2b\xa3\x78\x12\x01\x90\x75\x23\xe0\xe3\xdc\x4c\x82\x86\x8c\xf3\x27\x01\x7f\xce\xd7\x6a\x74\xe0\xe9\x7b\x43\xe1\x2a\xc3\xef\x8b\xeb\x0c\x7f\x2c\x46\x0c\x64\xdb\x9f\xd0\xa1\x5a\xe9\x2a\x5d\xe7\x59\x7a\x4c\xb3\xf5\xf2\xb0\x3a\x66\xf9\x76\xf5\xe5\x5b\x9e\x1d\x37\xe9\x3a\xdf\x6f\xd3\x65\x3e\xe2\x6d\x51\x37\xf4\xd9\x3b\x33\x55\x50\x2a\xd2\xc5\x8e\xca\x69\xf4\x1c\xdf\x22\x57\xe2\xd2\x18\xf1\x65\xbc\x1e\x0a\x49\x0f\xe9\x5f\xff\x7c\x3a\xa6\x59\xb6\xcb\xf7\xfb\xff\xab\x10\xf0\x6e\x78\xaf\x8e\xb7\x6a\x9e\xe3\xd1\xb8\xc6\xa1\x95\x62\x31\x9f\x2f\xe6\xef\x1e\xe5\xc9\x37\xe9\xa7\xd5\x1b\x93\x97\x91\x79\x80\x3e\xac\xf6\xc7\x65\xbe\x3b\x1c\x3f\x3f\x5d\x23\x49\x88\x65\xc2\x3a\x44\x92\x3c\x87\xee\x57\x2c\x3d\xff\x0a\xe9\x76\xf7\xf4\x35\x3d\xe4\xc7\xbf\xf3\x6f\xbf\xce\xfd\x42\xa7\x47\xdc\xcb\xf4\xae\xde\x16\x7d\xe2\x1b\x9b\x04\x92\x9e\x38\x24\x2f\xcd\x33\x79\x4b\x4c\xa1\x9b\x96\x40\xbe\x55\x92\x50\x4a\xd7\x58\x1e\xfe\x46\x12\x27\xae\x5a\xa7\x1b\x43\xeb\xee\x4a\x18\xf7\x9b\xe9\x22\x7d\x3b\x4c\xb5\x8f\x74\xf4\x9a\xaf\x9d\x74\x9b\xec\x8b\xd5\x27\x01\x25\xea\x30\xb4\x4f\x9f\xeb\xcd\x0a\x78\x4b\xd0\x1b\x1a\x77\x68\x1f\xd9\xdc\x5c\x19\x11\xeb\x01\x7e\x36\x9a\xf6\xbe\xef\x6e\x98\xe9\xd5\xdb\xec\xff\x05\x00\x00\xff\xff\xea\xba\x6f\x30\xb5\x06\x00\x00")

func deploymentAdmissionControllerdmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAdmissionControllerdmYaml,
		"Deployment/admission-controllerDM.yaml",
	)
}

func deploymentAdmissionControllerdmYaml() (*asset, error) {
	bytes, err := deploymentAdmissionControllerdmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/admission-controllerDM.yaml", size: 1717, mode: os.FileMode(420), modTime: time.Unix(1553869619, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaAidmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xc1\x6e\xdb\x3c\x10\x84\xef\x7e\x8a\x45\xee\xb6\x95\xfc\xc9\x7f\xe0\xcd\xad\x02\xb4\x40\x93\x08\x49\xda\x6b\xb1\xa1\x36\x16\x51\x92\xcb\x90\x2b\x15\x46\xd1\x77\x2f\x28\x39\x8a\x64\xbb\x48\x79\x1c\x72\xbe\x1d\x8f\x57\x18\xcc\x37\x8a\xc9\xb0\x57\x80\x21\xa4\x75\x77\xbe\xf8\x61\x7c\xad\xa0\xa4\x60\x79\xe7\xc8\xcb\xc2\x91\x60\x8d\x82\x6a\x01\xe0\xd1\x91\x02\xb4\xe8\xa8\xc6\x25\x9a\xbd\x94\x02\x6a\x52\xf0\x4c\x35\x45\x14\x8e\xfd\x85\xc5\x27\xb2\x29\xbb\x20\xc3\x47\x5b\x2f\x68\x76\x81\x3d\x79\x39\xa0\xa1\xf7\x2c\x28\x86\xfd\xde\x59\x53\xd2\xd1\x04\xe9\x33\x96\xf4\x6c\x3c\x25\x68\xf8\x27\x08\x43\xdd\x87\x04\x69\x28\x0f\xb0\x46\xf7\xc6\x11\xc8\x61\x48\xb3\x48\x81\x74\xa6\x45\xea\x1f\x25\x05\xe7\x0b\x80\x44\x96\xb4\x70\x1c\xe6\x38\x14\xdd\x7c\x99\x44\x9e\x87\x1e\xd2\x09\xb9\x60\x51\x68\x6f\x99\x14\x93\xcf\x89\x72\xf2\xb1\x33\xe8\x29\x2c\xc0\x6b\xc2\xa1\x1a\x2f\x68\x3c\xc5\xd1\xb3\x3c\x42\x2f\xc9\x6f\x8d\xa7\x91\x69\x1c\x6e\x49\xc1\x4b\x8b\xbb\x95\xe1\x75\x88\x1c\x1a\x92\x24\x1c\xd7\x6f\x26\xd5\x15\xab\xff\x56\xff\xcf\x4d\x55\x6b\x6d\xc5\xd6\xe8\x9d\x82\xcf\xcf\xb7\x2c\x55\xa4\x94\xff\xf6\xd7\x57\x81\xa3\x4c\xd2\x2f\xdf\xf2\x55\x1c\x45\xc1\x55\x51\x5c\x9d\x8f\xd7\x00\x21\xb2\xb0\x66\xab\xe0\xf1\x63\x35\xea\x91\x12\xb7\x51\xd3\x84\x04\x60\x8d\x33\x32\x53\x00\x74\x68\x15\x5c\x16\x45\xe1\x66\xb2\x23\xc7\x71\xa7\xe0\xf2\xaa\xb8\x31\x93\x9b\x48\x2f\x2d\xa5\x93\x90\x8b\xbf\x42\x2e\x66\x10\xf2\xdd\xf4\xe7\x0d\x55\xdf\x55\xd7\xf7\x9b\xc7\xbb\xfb\xef\x9b\xb2\xbc\xbf\x7e\x78\x98\x70\x3a\xb4\x2d\x29\x38\x3b\x5c\xb3\xd5\x64\xfd\x57\xa9\xd3\x2a\x37\x53\x9c\x1d\xa1\xcb\xcd\xe3\xe6\xd3\xd7\x0f\xff\x40\xce\xcb\xd5\xb4\x4f\xef\x81\x3b\xb6\xad\xa3\x1b\x6e\xfd\xbc\x87\x25\xb8\xac\x55\x28\x8d\x82\x75\x87\x71\x6d\x79\x3b\x2b\xe4\x68\xad\x2c\x6f\x97\x79\x6b\x70\x4b\xb3\x87\xa9\x7d\x1a\x30\x47\xdb\x3d\x0c\x4f\xc7\x0d\xbe\x4b\x25\x17\x64\x57\x9a\xa8\xe0\xd7\xef\xbd\x9c\x28\x76\x46\xd3\x46\xeb\x1c\xfc\xc4\xb4\xf9\x83\xdb\xc3\x0f\xee\x4f\x00\x00\x00\xff\xff\x6a\x5f\x50\x4e\xd0\x04\x00\x00")

func deploymentAlamedaAidmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaAidmYaml,
		"Deployment/alameda-aiDM.yaml",
	)
}

func deploymentAlamedaAidmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaAidmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-aiDM.yaml", size: 1232, mode: os.FileMode(420), modTime: time.Unix(1553831887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaDatahubdmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x4f\x6f\xe2\x30\x10\xc5\xef\x7c\x8a\xb9\xf5\x94\x10\xb4\x6a\xd5\xfa\x96\x2a\xac\x5a\x09\x28\x82\xb2\xbb\x37\x34\x75\x86\xc6\xaa\xff\xd5\x9e\xa4\xcb\xb7\x5f\x25\x05\x1a\xb6\xb0\x5b\x1f\x27\x7e\xbf\xf7\xfc\x64\x07\xbd\xfa\x41\x21\x2a\x67\x05\xa0\xf7\x71\xd8\x8c\x06\x2f\xca\x96\x02\x0a\xf2\xda\x6d\x0d\x59\x1e\x18\x62\x2c\x91\x51\x0c\x00\x2c\x1a\x12\x80\x1a\x0d\x95\x98\xb4\xd3\xaa\x7e\xda\xcd\xa3\x47\x49\x02\x36\x54\x52\x40\x76\x01\xd5\x00\x40\xe3\x13\xe9\xd8\x4a\xa1\x75\x38\x68\xbb\x81\x74\xc6\x3b\x4b\x96\x4f\x21\xd1\x5a\xc7\xc8\xca\xd9\x9d\xbc\xa4\x28\x83\xf2\xdc\xa5\x2d\x68\xa3\x2c\x45\xa8\xdc\x1b\xb0\x83\xb2\x8b\x0b\x5c\x51\xeb\xa2\x95\xec\x84\x27\xa8\x00\x4c\xc6\x6b\x64\x4a\x51\xfb\x0a\x53\xe7\xc9\xc6\x4a\x6d\x38\x55\x6e\xf8\x86\x8a\x93\x8d\x0b\x49\x20\x2c\xb7\x02\x2e\x38\xd4\x74\x31\x88\x9e\x64\x9b\x21\x50\x87\x8e\x02\x46\x03\x80\x48\x9a\x24\xbb\xf0\x9e\xce\x20\xcb\x6a\xd2\x3b\xed\xf1\x79\x7b\x11\xf6\x01\x76\xba\x5e\xbb\xed\x3a\xd7\x70\xbb\xf4\x11\xfe\xac\x01\xc0\x3e\xf0\x7b\xc9\x96\x51\x59\x0a\x07\x61\xf2\x4f\x13\x00\x65\xf0\x99\x04\xbc\xd6\xb8\x6d\x4b\xf1\xc1\xf9\x8a\x38\xb2\x0b\xc3\xbf\x24\x49\xa8\x48\x8b\x26\x4b\xbf\xa5\x57\xc7\xf2\x79\xad\xf5\xdc\x69\x25\xb7\x02\xee\x37\x33\xc7\xf3\x40\xb1\xbd\x4d\xfb\x5d\x81\xa2\xab\x83\xa4\xde\x71\x00\xb4\x32\x8a\x8f\x26\x00\xd2\xd7\x02\x46\x59\x66\x8e\xa6\x86\x8c\x0b\x5b\x01\xa3\xcb\x6c\xaa\x7a\x5f\x02\xbd\xd6\x14\x4f\x32\x2e\xcf\x21\xb2\x3e\x82\x6c\xf3\xa1\xdd\x37\x95\x4f\xf2\xe9\xb8\xc8\xd7\x45\xfe\x98\xdf\xad\x6e\xd7\xf7\xb3\xef\x93\xd5\xaf\xe2\x76\x9d\x17\xc5\x62\xbc\x5c\xf6\xb8\x0d\xea\x9a\x04\x54\xcc\x3e\x8a\xe1\xa1\x30\x65\x37\xba\xfe\x5d\x3e\xa5\xbd\xe7\x91\xc6\x46\x8a\xeb\xec\xfa\xea\xeb\x7e\xab\xe5\x78\x31\xcb\xa7\xe3\xcf\x86\x58\x1a\x65\xbf\x0e\x9a\xe7\xcb\xe5\xcf\x87\x45\x71\x06\xe4\x31\xc6\xff\xc2\xe6\x8b\x87\xe9\xf8\xf1\x6e\xbc\x5a\xae\x57\x8b\xc9\xf9\x0e\x7c\x70\x86\xb8\xa2\x3a\x26\x2f\xd7\xf1\xe3\xc5\x25\xc6\x59\xc5\x2e\x28\xfb\xdc\x55\x71\x93\xdd\x8c\x76\x94\x48\xa1\x51\x92\x72\x29\x5d\x7d\xfa\xf7\xf0\x79\xd7\xec\xd4\xa5\xfe\x13\x00\x00\xff\xff\xe5\x13\x9a\xb6\xe2\x04\x00\x00")

func deploymentAlamedaDatahubdmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaDatahubdmYaml,
		"Deployment/alameda-datahubDM.yaml",
	)
}

func deploymentAlamedaDatahubdmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaDatahubdmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-datahubDM.yaml", size: 1250, mode: os.FileMode(420), modTime: time.Unix(1553831887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaEvictionerdmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xcd\x6e\xdb\x30\x0c\xbe\xfb\x29\x88\x5e\x7a\x8a\xe3\x62\x4b\x87\xe9\xe6\xce\x06\x16\x20\xcd\x82\xb6\xeb\x35\x60\x65\x66\x16\xa6\xbf\x4a\xb4\x8b\xbc\xfd\xa0\x34\xee\x6c\x34\xe9\xa6\x93\x4d\xe9\xfb\xe1\x27\x0a\xbd\x7a\xa4\x10\x95\xb3\x02\xd0\xfb\x38\xef\xaf\xb2\xdf\xca\x36\x02\x2a\xf2\xda\xed\x0d\x59\xce\x0c\x31\x36\xc8\x28\x32\x00\x8b\x86\x04\xa0\x46\x43\x0d\xce\xa8\x57\x92\x95\xb3\x14\x8e\x5b\xd1\xa3\x24\x01\x3b\x6a\x28\x20\xbb\x80\x2a\x03\xd0\xf8\x44\x3a\x26\x34\x24\x91\x37\xf8\xa1\x20\x9d\xf1\xce\x92\xe5\x33\xac\x68\xad\x63\x4c\xbf\x47\x86\x86\xa2\x0c\xca\xf3\xc1\x73\x45\x3b\x65\x29\x42\xeb\x5e\x80\x1d\x34\x07\xd3\xc0\x2d\x9d\x26\x03\x60\x32\x5e\x23\x53\x8e\xda\xb7\x98\x3b\x4f\x36\xb6\x6a\xc7\xb9\x72\xf3\x17\x54\x3c\xdb\xb9\x30\x0b\x84\xcd\x5e\xc0\x25\x87\x8e\x2e\xb3\xe8\x49\x26\xe9\x40\x5e\x2b\x89\x51\xc0\x55\x06\x10\x49\x93\x64\x17\x5e\x4d\x19\x64\xd9\xae\x46\x7d\x4e\x3b\x9d\xba\x18\x3c\x1c\xa1\xa3\x74\xd3\xfa\x20\xe1\xb4\xf4\x44\xe4\x23\x19\x80\xc1\xf9\x6b\xce\x96\x51\x59\x0a\x6f\xd8\xd9\xbf\xa4\x00\x94\xc1\x5f\x24\xe0\xb9\xc3\x7d\x0a\xc8\x07\xe7\x5b\xe2\xc8\x2e\xcc\xdf\xa3\x66\xa1\x25\x2d\xfa\x22\xff\x94\x5f\x4f\x19\x36\x9d\xd6\x1b\xa7\x95\xdc\x0b\x58\xee\xd6\x8e\x37\x81\x62\x9a\xac\xe1\x54\xa0\xe8\xba\x20\x69\xd4\x17\x80\x56\x46\xf1\xa4\x02\x20\x7d\x27\xe0\xba\x30\x93\xa2\x21\xe3\xc2\x5e\xc0\xd7\xe2\x56\x8d\x36\x02\x3d\x77\x14\x4f\x32\x7c\x5e\x9c\x66\xf8\xb2\x18\x31\x90\xed\xff\x42\x87\xb0\xca\x55\x79\x5b\x57\xe5\xb6\x7e\x5c\x7e\x7b\x58\xfe\x58\xd7\x77\xdb\xaa\x7c\x28\xbf\xff\xbc\xd9\x96\x55\x75\x57\xdf\xdf\x8f\x88\x7b\xd4\x1d\x09\xb8\x18\xb2\x4a\xd7\xdc\x76\x4f\xf9\xe8\x79\xe4\xb1\x97\x62\x51\x14\x8b\xe2\xe2\x7f\xb4\x86\xcf\x6d\xbd\x2e\x6f\x56\xf5\x09\xad\x34\xb3\x03\x55\xa4\xd0\x2b\x49\xa5\x94\xae\x3b\xfb\xc0\xde\x1f\x5c\x9f\x19\x8b\x3f\x01\x00\x00\xff\xff\x78\x24\x46\x61\x2d\x04\x00\x00")

func deploymentAlamedaEvictionerdmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaEvictionerdmYaml,
		"Deployment/alameda-evictionerDM.yaml",
	)
}

func deploymentAlamedaEvictionerdmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaEvictionerdmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-evictionerDM.yaml", size: 1069, mode: os.FileMode(420), modTime: time.Unix(1553869603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaGrafanadmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbd\x8e\xdb\x30\x0c\xde\xfd\x14\xdc\x6e\x72\x9c\xdc\x5d\x17\xad\xbd\xa5\x40\x53\x78\x28\xba\xf3\x64\x3a\x16\x2a\x89\x2a\x45\xe7\x10\x14\x7d\xf7\x42\x8e\x93\xb3\xef\xaf\xd5\x22\x80\xe4\xf7\x43\x8a\xc2\xe4\x7e\x90\x64\xc7\xd1\x00\xa6\x94\x9b\xe3\xae\xfa\xe9\x62\x67\xe0\x81\x92\xe7\x53\xa0\xa8\x55\x20\xc5\x0e\x15\x4d\x05\x10\x31\x90\x01\xf4\x18\xa8\xc3\xfa\x20\xd8\x63\xc4\x39\x9e\x13\x5a\x32\xd0\x53\x47\x82\xca\x82\xae\x02\xf0\xf8\x48\x3e\x17\x28\x14\x85\x2b\x76\x0a\x58\x0e\x89\x23\x45\x7d\x8b\x12\x63\x64\x45\x75\x1c\x67\x78\x47\xd9\x8a\x4b\x3a\xb9\x7d\xa0\xde\x45\xca\x30\xf0\x13\x28\x43\x37\xd9\x05\x1d\xa8\xa8\x78\x67\x27\x20\x3c\xb3\x01\x28\x85\xe4\x51\x69\x83\x3e\x0d\xb8\xe1\x44\x31\x0f\xae\xd7\x8d\xe3\xe6\x09\x9d\xd6\x3d\x4b\x2d\x84\xdd\xc9\xc0\x8d\xca\x48\x37\x55\x4e\x64\x8b\xb6\xd0\x44\x99\x0d\xec\x2a\x80\x4c\x9e\xac\xb2\x9c\x5d\x05\x54\x3b\x7c\x5d\x74\xf9\xb2\xd3\x45\x4b\x17\x0b\x33\x72\x31\xd7\x72\xfc\xff\x91\x00\x5c\x6c\x9d\x47\x18\x15\x5d\x24\xb9\x02\xeb\xf9\x91\x96\x88\x72\x5c\xc0\xc3\x73\xb8\x99\x6f\xf3\x69\x73\xbf\xb9\x5b\x17\xb5\xa3\xf7\x2d\x7b\x67\x4f\x06\xbe\xf4\xdf\x58\x5b\xa1\x5c\x36\xe1\x52\x95\x58\x74\x61\xb4\x68\x5e\x7d\xb4\x2c\x6a\xe0\x6e\xbb\xdd\x2e\xf2\x97\xc5\x19\x54\xd3\x2a\x9c\x84\x95\x2d\x7b\x03\xdf\x3f\xb7\xd7\x8c\x50\xe6\x51\x2c\xad\x34\xbc\x0b\x6e\xad\x0a\x60\xd3\x68\xe0\x76\xbb\x0d\xab\x68\xa0\xc0\x72\x9a\x12\x7b\xb7\xc8\x08\xfd\x1a\x29\xbf\xc9\xb1\x7b\x8f\x63\xb7\xe2\x38\xb2\x1f\x03\xed\x79\x8c\x2f\xfb\x0f\x25\xd6\xa2\x0e\x06\x9a\x23\x4a\xe3\xdd\x63\xf3\xf2\x05\x9e\xe7\x30\x67\xea\x5c\xbe\xc9\x81\x56\x15\x79\x7c\x3c\xf3\xbc\x86\xaf\x65\x48\xed\x45\xa2\x49\xc2\x47\x57\xfe\xb1\x8b\x87\xa6\x2c\xd5\x3c\xc0\x0f\xb4\x5f\x57\x9d\xbb\x5b\x34\x56\xff\xd3\x2e\x85\xa4\xa7\x07\x27\x06\x7e\xff\x59\xc0\x2c\xc7\xde\x1d\xf6\x98\xd6\xa3\xee\xa8\xc7\xd1\xeb\x9e\x3b\x32\x70\x7f\xfb\xd6\x86\xbc\xef\xee\xc3\x1a\xf8\x1b\x00\x00\xff\xff\xdf\xb0\xd2\x49\xca\x04\x00\x00")

func deploymentAlamedaGrafanadmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaGrafanadmYaml,
		"Deployment/alameda-grafanaDM.yaml",
	)
}

func deploymentAlamedaGrafanadmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaGrafanadmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-grafanaDM.yaml", size: 1226, mode: os.FileMode(420), modTime: time.Unix(1553831887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaInfluxdbdmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x51\x4f\xdb\x30\x10\xc7\xdf\xfb\x29\x4e\xec\x81\xa7\xb6\xf4\x69\x92\xdf\x0a\x0d\x23\x1a\x94\xa8\x4d\xd9\xf6\x54\x5d\x93\x0b\xb1\x70\x6c\xcb\xbe\x14\xa2\x69\xdf\x7d\x72\x68\x21\x2d\x2d\xa0\xcd\x0f\x55\x75\xbe\xff\xef\x7f\x17\xfb\x8c\x56\xde\x91\xf3\xd2\x68\x01\x68\xad\x1f\xae\x47\xbd\x07\xa9\x73\x01\x13\xb2\xca\x34\x15\x69\xee\x55\xc4\x98\x23\xa3\xe8\x01\x68\xac\x48\x00\x2a\xac\x28\xc7\xbe\xd4\x85\xaa\x9f\xf2\xd5\x66\xc3\x5b\xcc\x48\x40\x41\x39\x39\x64\xe3\x50\xf6\x00\x14\xae\x48\xf9\xa0\x85\x60\xf1\x22\x6e\x03\x99\xa9\xac\xd1\xa4\xf9\x20\x13\xb5\x36\x8c\x2c\x8d\xde\xe8\x73\xf2\x99\x93\x96\xdb\x7a\x27\x54\x48\x4d\x1e\x4a\xf3\x08\x6c\x20\x6f\x0b\x06\x2e\x29\xd8\x28\x99\xb5\x42\xe8\xe0\x00\x98\x2a\xab\x90\x69\x80\xca\x96\x38\x30\x96\xb4\x2f\x65\xc1\x03\x69\x86\x8f\x28\xb9\x5f\x18\xd7\x77\x84\x79\x23\xe0\x94\x5d\x4d\xa7\x3d\x6f\x29\x0b\xe6\x8e\x5a\xa6\x17\x30\xea\x01\x78\x52\x94\xb1\x71\xcf\x65\x55\xc8\x59\x79\xdd\xe9\x73\xbf\xd7\x6e\x53\xdb\x1a\x36\xd2\xce\xb7\x0d\x4b\x7d\x92\x02\xb0\x2d\x2c\xac\x2f\xe0\x29\xab\x9d\xe4\xe6\xc2\x68\xa6\x27\x7e\xdd\x00\x70\xb5\x1e\xfb\x85\x27\x27\x60\x74\x76\x76\xb6\xd9\xc9\x8c\x66\x94\x9a\xdc\x8b\x59\x7f\x73\xb8\x3b\x2e\x61\xc9\x0a\xef\x3b\x71\x31\x1a\x7c\xed\xa3\xb2\x52\xd3\x6e\x4a\x52\x2b\x95\x18\x25\xb3\x46\x40\x5c\x4c\x0d\x27\x8e\x7c\xb8\x40\xdb\x2c\xd2\xeb\xd7\xce\xb6\x76\xf1\xf4\xf2\x7a\xf1\x73\x72\xbe\x9c\x45\xc9\xed\x2c\x8d\xa7\xdf\x96\x93\x78\x3e\x3e\xbf\x8e\x26\x2f\xb9\x00\x6b\x54\x35\x09\x38\x09\x87\x72\x72\x9c\x71\x95\xa6\x49\xfb\x33\x5f\x46\xd3\xff\x67\x5c\x44\xb3\x34\xbe\x8c\x2f\xc6\x69\x74\x80\x33\x24\xce\x86\xac\xfc\xd0\x3a\xb9\x46\xa6\xf0\x7f\x90\x39\xfe\x1c\x3b\x99\xc5\x77\xe3\x34\x5a\x7e\x8f\x7e\x7d\x96\xfd\x40\xcd\x47\xec\xf1\x22\xbd\xfa\xf7\xd6\xc7\x93\x9b\x78\xba\x5c\xcc\xa3\xd9\x01\x2d\xe6\x95\xd4\x1f\x8a\x93\xf1\x7c\xfe\xe3\x76\x76\xc8\xbc\x05\x58\xf4\xfe\x1d\xc8\x11\xef\xda\x93\xfb\x40\xf5\x9e\x73\x90\xef\x1a\xaf\x8d\xaa\x2b\xba\x31\xb5\x66\xdf\xbd\x93\x55\x88\x24\xc8\xa5\x80\xfd\x23\xe8\x70\x77\x5f\xc1\x30\xbf\x65\xbd\xea\xb3\xf2\x9d\x9c\xf0\x8c\xdc\x6a\xd5\x08\x28\x50\x79\x3a\xe2\xb1\x46\x37\x54\x72\x35\x7c\x33\x74\xb0\x37\x8d\x7d\x1f\x1e\xd4\xfb\x6e\x15\xbe\x5e\x3d\x53\xf6\xc4\xcf\xbd\x1d\x9d\xeb\x37\x24\xaa\x2c\x37\x13\xe9\x04\xfc\xfe\xb3\xa7\x79\xaf\x45\x4f\x99\x23\x16\xdd\x82\xda\xc8\xf4\x98\xf2\x6f\x00\x00\x00\xff\xff\x77\xa4\x6d\x7b\x6d\x06\x00\x00")

func deploymentAlamedaInfluxdbdmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaInfluxdbdmYaml,
		"Deployment/alameda-influxdbDM.yaml",
	)
}

func deploymentAlamedaInfluxdbdmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaInfluxdbdmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-influxdbDM.yaml", size: 1645, mode: os.FileMode(420), modTime: time.Unix(1553831887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaOperatordmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x4f\x6f\xdb\x30\x0c\xc5\xef\xfe\x14\x44\x2f\x3d\xc5\x71\xba\x75\x07\xdd\x3c\x38\xc0\x06\xf4\x4f\x90\x76\xbb\x06\xac\xcc\xcc\xc2\x24\x51\x95\x68\x17\xf9\xf6\x83\xf2\xa7\xb3\xb7\xa4\x3e\x52\xfc\x3d\x3e\x3e\x59\x18\xcc\x4f\x8a\xc9\xb0\x57\x80\x21\xa4\xf9\xb0\x28\x7e\x1b\xdf\x2a\x68\x28\x58\xde\x39\xf2\x52\x38\x12\x6c\x51\x50\x15\x00\x1e\x1d\x29\x40\x8b\x8e\x5a\x9c\x71\xa0\x88\xc2\xf1\x78\x90\x02\x6a\x52\xb0\xa5\xf6\x50\x46\x53\x00\x58\x7c\x21\x9b\x32\x0b\x79\xc4\x3b\xbc\x2f\x68\x76\x81\x3d\x79\x39\xab\x89\xde\xb3\xa0\x18\xf6\x47\xbe\xa5\xa4\xa3\x09\xb2\xf7\xdb\xd0\xd6\x78\x4a\xd0\xf1\x1b\x08\x43\xbb\x37\x0c\xd2\x51\x1e\x63\x8d\xde\x83\xe7\x64\x01\x84\x5c\xb0\x28\x54\xa2\x0d\x1d\x96\x1c\xc8\xa7\xce\x6c\xa5\x34\x3c\x7f\x43\x23\xb3\x2d\xc7\x59\x24\x6c\x77\x0a\xae\x25\xf6\x74\x5d\xa4\x40\x3a\x9b\x88\xb4\xd7\x4e\x0a\x16\x05\x40\x22\x4b\x5a\x38\x1e\xec\x39\x14\xdd\xdd\x8d\xf6\x9d\x6e\x3c\xf6\x70\x72\x70\x04\x47\x09\xe7\xef\x62\xca\xf9\xb3\x93\x01\x97\x47\x00\x9c\x3c\x1f\x92\xf6\x82\xc6\x53\x7c\x27\x67\x1f\x8f\x01\x30\x0e\x7f\x91\x82\xd7\x1e\x77\x39\x98\x10\x39\x74\x24\x49\x38\xce\xff\x65\x66\xb1\x23\xab\x86\xaa\xfc\x54\x7e\x99\xf2\xab\xde\xda\x15\x5b\xa3\x77\x0a\xbe\x6f\x1f\x58\x56\x91\x52\xfe\xab\x4e\x5d\x91\x12\xf7\x51\xd3\x68\x23\x00\x6b\x9c\x91\x49\x05\x40\x87\x5e\xc1\x4d\xe5\x26\x45\x47\x8e\xe3\x4e\xc1\xe7\xea\xde\x8c\x0e\x22\xbd\xf6\x94\xce\x2a\x2c\x2e\x28\xdc\x8c\x15\xc8\x0f\x7f\xd1\x53\x50\xf5\x5d\x7d\xbf\x6c\xea\xcd\xe3\x6a\xb9\xae\x9f\x1f\xd7\x9b\xa6\x7e\xae\xbf\xfd\xf8\xba\xa9\x9b\x66\xbd\x7c\x7a\x1a\xc9\x0e\x68\x7b\x52\x70\x75\xca\x29\x5f\x6e\xd7\xbf\x94\xa3\xa7\x51\xa6\x41\xab\xdb\xaa\xba\xad\xae\x8e\x60\xa2\x38\x18\x4d\xb5\xd6\xdc\x5f\x78\x11\xff\xb7\x3d\x9c\xbd\xc3\xdc\xf7\x27\x00\x00\xff\xff\x7f\xcb\xd1\xe5\xdc\x03\x00\x00")

func deploymentAlamedaOperatordmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaOperatordmYaml,
		"Deployment/alameda-operatorDM.yaml",
	)
}

func deploymentAlamedaOperatordmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaOperatordmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-operatorDM.yaml", size: 988, mode: os.FileMode(420), modTime: time.Unix(1553831887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _persistentvolumeclaimMyAlamedagrafanapvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x3b\x6a\xc4\x30\x14\x45\x7b\xad\xe2\x6d\xc0\x86\xa4\x54\x9b\x22\x55\x48\x48\xe1\xa9\x2f\xd2\xb5\x11\x63\x7d\xe6\x3d\xd9\x30\xbb\x1f\x04\x9e\xf2\xdc\xcf\x41\x4b\x0b\xd5\x52\x2d\x5e\xce\x0f\x77\x4f\x25\x7a\xf9\x1b\x89\x75\x96\xbe\xd4\xfd\xc8\xfc\xda\x91\xb2\xcb\xec\x88\xe8\xf0\x4e\xa4\x20\xd3\x4b\x7e\x4e\xd8\x91\x19\x31\x6f\x8a\x15\x05\x73\x3b\xc3\x55\x5b\x43\xa0\x97\x95\x91\x8a\x5e\x15\xc9\x59\x63\x18\x6f\x84\x40\xb3\x9f\x1a\x69\x03\x45\x26\xf9\x27\xe2\x4d\x53\xe7\x6f\x09\x74\x22\x4a\xab\x87\x86\xf7\x40\xf9\x38\x68\xfd\x22\x11\x1b\xc2\x8d\x5e\x3e\xbf\x93\xbc\x02\x00\x00\xff\xff\x05\x22\x1e\x79\xc4\x00\x00\x00")

func persistentvolumeclaimMyAlamedagrafanapvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_persistentvolumeclaimMyAlamedagrafanapvcYaml,
		"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml",
	)
}

func persistentvolumeclaimMyAlamedagrafanapvcYaml() (*asset, error) {
	bytes, err := persistentvolumeclaimMyAlamedagrafanapvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "PersistentVolumeClaim/my-alamedagrafanaPVC.yaml", size: 196, mode: os.FileMode(420), modTime: time.Unix(1553564177, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _persistentvolumeclaimMyAlamedainfluxdbpvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\xbb\x6e\xc3\x30\x0c\x45\x77\x7d\x05\x37\x4f\x36\xea\x55\x6b\x87\x4e\x45\x8b\x0e\xee\xcc\x48\xd7\x01\x11\xbd\x22\x4a\x46\xf2\xf7\x81\x00\x67\x3c\xf7\x71\xb8\xc8\x86\xaa\x92\x93\xa5\x63\x35\x37\x49\xde\xd2\xef\x48\xb4\x21\xb5\x2d\x87\x1e\xf1\x19\x58\xa2\x89\x68\xec\xb9\xb1\x35\x44\x89\x23\x2c\xc5\xe7\xcc\x81\x23\x3c\x2f\x92\xf6\xd0\x1f\xfe\xb2\x94\xc3\x9d\xbd\x16\x76\xb0\xb4\xc3\xa3\x72\xcb\x95\xc5\x68\x81\x1b\x77\x76\x0e\xaa\xdf\xd9\x43\x07\x12\xcd\xf4\x07\xf6\xff\x55\x1a\x7e\x92\x83\x21\xaa\xd0\xdc\xab\x7b\x0f\x2a\xee\x1d\xda\x4e\x22\xd2\x21\xbc\xc2\xd2\xb4\x7e\x7c\xc9\xf4\x0a\x00\x00\xff\xff\x1f\xa2\x03\x61\xc7\x00\x00\x00")

func persistentvolumeclaimMyAlamedainfluxdbpvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_persistentvolumeclaimMyAlamedainfluxdbpvcYaml,
		"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml",
	)
}

func persistentvolumeclaimMyAlamedainfluxdbpvcYaml() (*asset, error) {
	bytes, err := persistentvolumeclaimMyAlamedainfluxdbpvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml", size: 199, mode: os.FileMode(420), modTime: time.Unix(1553564177, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceAdmissionControllersvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x4e\xc4\x30\x0c\x45\xf7\x39\x85\x2f\x90\x52\xc4\x2c\x50\x4e\x81\x84\xc4\xde\xa4\x7f\x66\x22\x52\x3b\xb2\xad\x39\x3f\x6a\xe8\x12\xc4\x2e\xf1\xff\x7a\xcf\xe6\xd1\x3e\x60\xde\x54\x0a\x3d\x9e\xd3\x57\x93\xad\xd0\x3b\xec\xd1\x2a\xd2\x8e\xe0\x8d\x83\x4b\x22\x62\x11\x0d\x8e\xa6\xe2\xc7\x97\xc8\x7f\x4a\x0b\xf7\x71\xe7\x45\x07\xc4\xef\xed\x1a\x4b\xd3\xa7\x19\xc9\x2d\x57\x58\x64\x47\x35\x44\x16\xde\x51\x88\xb7\xbd\xf9\x61\xcb\x55\x25\x4c\x7b\x87\xe5\xe8\x9e\x88\x3a\x7f\xa2\x9f\x6c\x1e\xe3\xf7\x6e\x22\xfa\x1b\x74\x86\x3e\xb8\xa2\xd0\x15\x1b\x8c\x43\x8d\x5b\xf2\x81\x7a\x90\x87\x5a\x4c\x45\x9e\xcf\x42\x97\xcb\xcb\x14\x06\xdb\x0d\xf1\x36\x67\xaf\xeb\xba\xa6\xe3\xbe\x8e\x1a\x6a\xff\x6c\xf4\x1d\x00\x00\xff\xff\xd7\x20\x8b\xad\x41\x01\x00\x00")

func serviceAdmissionControllersvYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceAdmissionControllersvYaml,
		"Service/admission-controllerSV.yaml",
	)
}

func serviceAdmissionControllersvYaml() (*asset, error) {
	bytes, err := serviceAdmissionControllersvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Service/admission-controllerSV.yaml", size: 321, mode: os.FileMode(420), modTime: time.Unix(1553564177, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceAlamedaDatahubsvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\x0e\xc3\x20\x14\x43\x77\x4e\xe1\x0b\x44\x4a\x87\x2c\x5c\xa3\x52\x77\x07\xdc\x16\x95\x04\xf4\xa1\x39\x7f\x45\xd4\x35\x9b\x65\x5b\xcf\x66\x4d\x0f\x59\x4b\x65\xf7\x38\x6e\xee\x93\xf6\xe8\x71\x97\x1d\x29\xc8\x6d\xea\x8c\xec\xf4\x0e\xc8\x5c\x95\xdb\x50\x00\x6b\xf5\x60\xe6\xa6\xc8\x69\x14\xde\xdf\xd5\x01\x3b\x37\x5d\xf9\xad\x32\xc8\xe3\xa9\x28\x63\x2f\xc6\xe4\x5a\x55\x18\xbc\x5a\xac\x9f\xe0\xe9\x4f\x78\x59\x0d\xe7\xce\x48\x3c\x96\x79\x5e\x66\x07\x34\x65\x85\x5e\xec\xfa\xc3\x2f\x00\x00\xff\xff\x17\x03\xde\x3c\xcd\x00\x00\x00")

func serviceAlamedaDatahubsvYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceAlamedaDatahubsvYaml,
		"Service/alameda-datahubSV.yaml",
	)
}

func serviceAlamedaDatahubsvYaml() (*asset, error) {
	bytes, err := serviceAlamedaDatahubsvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Service/alameda-datahubSV.yaml", size: 205, mode: os.FileMode(420), modTime: time.Unix(1553564177, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceAlamedaGrafanasvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\xaa\xc3\x30\x10\x44\x7b\x9d\x62\x2f\x60\xf0\xe7\x77\x3a\x45\x20\x90\x7e\x22\x8d\x8d\x88\x2c\x2d\xab\xc5\xe7\x0f\x56\x95\xc6\xdd\xe3\x15\x6f\x06\x5a\x5e\xb4\x51\x7a\x8b\x72\xfe\x85\x4f\x69\x39\xca\x93\x76\x96\xc4\x70\xd0\x91\xe1\x88\x41\xa4\xe2\xcd\x3a\x2e\x12\x81\x6a\x14\x54\x1c\xcc\x58\x76\xc3\x86\x86\x20\xd2\x70\xf0\xce\x0f\x45\x62\x94\x8d\x99\x06\xef\x86\x12\x86\x32\x5d\x3d\xed\xe6\x33\xbc\x4c\x8c\xf2\xbf\xae\xeb\xdc\x71\xd8\x4e\x7f\xfc\xca\xc1\xca\xe4\xdd\xee\x8f\xc8\x37\x00\x00\xff\xff\x1d\x9d\x3e\xc2\xd3\x00\x00\x00")

func serviceAlamedaGrafanasvYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceAlamedaGrafanasvYaml,
		"Service/alameda-grafanaSV.yaml",
	)
}

func serviceAlamedaGrafanasvYaml() (*asset, error) {
	bytes, err := serviceAlamedaGrafanasvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Service/alameda-grafanaSV.yaml", size: 211, mode: os.FileMode(420), modTime: time.Unix(1553564177, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceAlamedaInfluxdbsvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x4d\x4e\xc4\x30\x0c\x85\xf7\x39\x85\x2f\x90\x02\x1b\x34\xca\x29\x90\x90\xd8\xbf\x26\xaf\xd3\x88\x34\x89\x62\x4f\xc5\xf1\x51\x0b\x12\x3f\x8b\xd9\xd9\x7e\x9f\x3f\x1b\x3d\xbf\x71\x68\x6e\x35\xc8\xfe\xe4\xde\x73\x4d\x41\x5e\x39\xf6\x1c\xe9\x36\x1a\x12\x0c\xc1\x89\xa0\xd6\x66\xb0\xdc\xaa\x1e\xad\x88\x7e\x41\x13\x4a\x5f\x31\xb5\xce\xaa\x6b\x5e\x6c\xca\xed\xe1\x8c\xea\xd5\x47\x0e\xf3\xca\x38\x68\xbe\x62\x63\x10\x14\x6c\x4c\xf0\x87\x75\xbd\xcd\xde\x8a\x3a\x91\x82\x99\xe5\x5b\x8b\xde\x7f\xb0\x5c\x97\x72\xfb\x48\xb3\x13\xf9\xbb\xff\x2f\xd0\x8e\xc8\x20\x0b\x13\x07\xac\x0d\x64\xa7\x9d\xf1\x30\xf6\x36\xec\x54\xfb\xb3\x0c\x72\x79\xbc\x3c\x9f\x97\x0c\xe3\x4a\x7b\xf9\x3d\x54\x16\x46\x6b\xe3\xce\x2b\x9f\x01\x00\x00\xff\xff\x72\x16\x4d\x33\x31\x01\x00\x00")

func serviceAlamedaInfluxdbsvYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceAlamedaInfluxdbsvYaml,
		"Service/alameda-influxdbSV.yaml",
	)
}

func serviceAlamedaInfluxdbsvYaml() (*asset, error) {
	bytes, err := serviceAlamedaInfluxdbsvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Service/alameda-influxdbSV.yaml", size: 305, mode: os.FileMode(420), modTime: time.Unix(1553564177, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"CustomResourceDefinition/alamedarecommendationsCRD.yaml": customresourcedefinitionAlamedarecommendationscrdYaml,
	"CustomResourceDefinition/alamedascalersCRD.yaml": customresourcedefinitionAlamedascalerscrdYaml,
	"ConfigMap/grafana-datasources.yaml": configmapGrafanaDatasourcesYaml,
	"Deployment/admission-controllerDM.yaml": deploymentAdmissionControllerdmYaml,
	"Deployment/alameda-aiDM.yaml": deploymentAlamedaAidmYaml,
	"Deployment/alameda-datahubDM.yaml": deploymentAlamedaDatahubdmYaml,
	"Deployment/alameda-evictionerDM.yaml": deploymentAlamedaEvictionerdmYaml,
	"Deployment/alameda-grafanaDM.yaml": deploymentAlamedaGrafanadmYaml,
	"Deployment/alameda-influxdbDM.yaml": deploymentAlamedaInfluxdbdmYaml,
	"Deployment/alameda-operatorDM.yaml": deploymentAlamedaOperatordmYaml,
	"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml": persistentvolumeclaimMyAlamedagrafanapvcYaml,
	"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml": persistentvolumeclaimMyAlamedainfluxdbpvcYaml,
	"Service/admission-controllerSV.yaml": serviceAdmissionControllersvYaml,
	"Service/alameda-datahubSV.yaml": serviceAlamedaDatahubsvYaml,
	"Service/alameda-grafanaSV.yaml": serviceAlamedaGrafanasvYaml,
	"Service/alameda-influxdbSV.yaml": serviceAlamedaInfluxdbsvYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ConfigMap": &bintree{nil, map[string]*bintree{
		"grafana-datasources.yaml": &bintree{configmapGrafanaDatasourcesYaml, map[string]*bintree{}},
	}},
	"CustomResourceDefinition": &bintree{nil, map[string]*bintree{
		"alamedarecommendationsCRD.yaml": &bintree{customresourcedefinitionAlamedarecommendationscrdYaml, map[string]*bintree{}},
		"alamedascalersCRD.yaml": &bintree{customresourcedefinitionAlamedascalerscrdYaml, map[string]*bintree{}},
	}},
	"Deployment": &bintree{nil, map[string]*bintree{
		"admission-controllerDM.yaml": &bintree{deploymentAdmissionControllerdmYaml, map[string]*bintree{}},
		"alameda-aiDM.yaml": &bintree{deploymentAlamedaAidmYaml, map[string]*bintree{}},
		"alameda-datahubDM.yaml": &bintree{deploymentAlamedaDatahubdmYaml, map[string]*bintree{}},
		"alameda-evictionerDM.yaml": &bintree{deploymentAlamedaEvictionerdmYaml, map[string]*bintree{}},
		"alameda-grafanaDM.yaml": &bintree{deploymentAlamedaGrafanadmYaml, map[string]*bintree{}},
		"alameda-influxdbDM.yaml": &bintree{deploymentAlamedaInfluxdbdmYaml, map[string]*bintree{}},
		"alameda-operatorDM.yaml": &bintree{deploymentAlamedaOperatordmYaml, map[string]*bintree{}},
	}},
	"PersistentVolumeClaim": &bintree{nil, map[string]*bintree{
		"my-alamedagrafanaPVC.yaml": &bintree{persistentvolumeclaimMyAlamedagrafanapvcYaml, map[string]*bintree{}},
		"my-alamedainfluxdbPVC.yaml": &bintree{persistentvolumeclaimMyAlamedainfluxdbpvcYaml, map[string]*bintree{}},
	}},
	"Service": &bintree{nil, map[string]*bintree{
		"admission-controllerSV.yaml": &bintree{serviceAdmissionControllersvYaml, map[string]*bintree{}},
		"alameda-datahubSV.yaml": &bintree{serviceAlamedaDatahubsvYaml, map[string]*bintree{}},
		"alameda-grafanaSV.yaml": &bintree{serviceAlamedaGrafanasvYaml, map[string]*bintree{}},
		"alameda-influxdbSV.yaml": &bintree{serviceAlamedaInfluxdbsvYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

