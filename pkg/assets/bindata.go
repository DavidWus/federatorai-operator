// Code generated by go-bindata.
// sources:
// ConfigMap/grafana-datasources.yaml
// CustomResourceDefinition/alamedarecommendationsCRD.yaml
// CustomResourceDefinition/alamedascalersCRD.yaml
// Deployment/admission-controllerDM.yaml
// Deployment/alameda-aiDM.yaml
// Deployment/alameda-datahubDM.yaml
// Deployment/alameda-evictionerDM.yaml
// Deployment/alameda-grafanaDM.yaml
// Deployment/alameda-influxdbDM.yaml
// Deployment/alameda-operatorDM.yaml
// PersistentVolumeClaim/my-alamedagrafanaPVC.yaml
// PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml
// Service/admission-controllerSV.yaml
// Service/alameda-datahubSV.yaml
// Service/alameda-grafanaSV.yaml
// Service/alameda-influxdbSV.yaml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configmapGrafanaDatasourcesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x8f\xda\x30\x10\xc5\xef\x91\xf2\x1d\x46\x3e\xf3\xa7\x5c\x2a\xe4\x5b\x5b\x2e\x1c\xaa\x1e\x2a\x71\xa9\xaa\x6a\x88\x27\xe0\xe2\xd8\xd6\x8c\x43\x89\xba\x7c\xf7\x95\x61\x09\x2c\xeb\x5c\x12\xcf\xfc\xde\xf3\x9b\x09\x46\xbb\x21\x16\x1b\xbc\x86\xe3\xa2\xae\x0e\xd6\x1b\x0d\xdf\x82\x6f\xed\xee\x3b\xc6\xba\xea\x28\xa1\xc1\x84\xba\xae\x00\x3c\x76\xa4\x61\xc7\xd8\xa2\xc7\x69\x2e\x4b\xe8\xb9\x21\xb9\x35\x25\x62\x43\x1a\x5a\x32\xc4\x98\x02\xa3\xad\xab\x51\x1d\x39\x74\x94\xf6\xd4\xcb\x6c\xc0\xce\x69\x78\x99\xe6\x32\xc0\xff\xeb\x2b\x3f\xea\x1e\x48\x69\x58\x4c\x1e\x3a\x0f\xd7\x29\x0d\xbf\xee\x9d\x27\x8b\x51\x10\x78\xb7\x36\x4f\x2e\x63\x33\xa7\x55\x1a\xd4\xda\xb7\xae\x3f\xad\xbe\xaa\xc9\x33\x02\x50\x90\xa5\x21\x5e\x64\xf6\x22\x33\x5b\x55\xf2\xc6\xa6\x21\xc9\x21\x55\xe4\x70\x1a\x8a\x4c\xcf\x2e\x03\xfb\x94\xa2\xe8\xf9\x1c\x1d\x76\x64\x70\x7a\xf3\x9d\x3d\xac\x70\x26\xc7\x46\x2f\x3f\x2d\x3f\x17\x8d\x22\x8a\xfc\x0b\x9c\x07\x55\x68\x3a\xeb\x73\xa1\x7c\xa5\x10\x8f\x54\x91\xc8\x2b\xde\xa2\x5c\x26\xfc\x63\x7d\x22\xf6\xe8\x8a\xe4\x16\xc5\x36\x5f\xfa\xb4\x57\x1a\x5a\x74\x42\x25\xc8\xca\x8a\x5a\xec\x5d\x52\x1a\x12\xf7\x45\xe6\xaf\x04\xbf\xc2\x84\x4a\x97\xfe\x61\xde\xb8\x93\x9f\x07\x1b\x37\xc4\xb6\x1d\xde\x8c\x3e\x82\xe7\x92\x37\x13\x9a\x1f\xde\x0d\xb7\x8c\xef\x91\xf3\xfd\xf8\xfb\xfa\x79\xbe\x9e\x5e\x03\x00\x00\xff\xff\x85\x43\xb9\xc1\x14\x03\x00\x00")

func configmapGrafanaDatasourcesYamlBytes() ([]byte, error) {
	return bindataRead(
		_configmapGrafanaDatasourcesYaml,
		"ConfigMap/grafana-datasources.yaml",
	)
}

func configmapGrafanaDatasourcesYaml() (*asset, error) {
	bytes, err := configmapGrafanaDatasourcesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ConfigMap/grafana-datasources.yaml", size: 788, mode: os.FileMode(438), modTime: time.Unix(1553562565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _customresourcedefinitionAlamedarecommendationscrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x8f\x13\x31\x0c\xbd\x57\xea\x7f\xb0\x7a\xef\x40\xc5\x05\xcd\x6d\x05\x17\x2e\x2b\xb4\x48\x7b\x41\x1c\xdc\xc4\x74\xc3\x26\x71\x70\x3c\x15\xfb\xef\x51\x92\xce\x4e\x4b\xa7\xc3\xfa\x34\xf3\xfc\xe2\xe7\x4f\x4c\xee\x91\x24\x3b\x8e\x3d\x60\x72\xf4\x47\x29\x96\xbf\xdc\x3d\x7f\xcc\x9d\xe3\x77\xc7\xdd\x9e\x14\x77\xeb\xd5\xb3\x8b\xb6\x87\x4f\x43\x56\x0e\x0f\x94\x79\x10\x43\x9f\xe9\xa7\x8b\x4e\x1d\xc7\xf5\x2a\x90\xa2\x45\xc5\x7e\xbd\x02\xf0\xb8\x27\x9f\xeb\x27\x80\xe1\xa8\xc2\xde\x93\x6c\x95\xd9\x8f\xa1\x7b\xd8\xec\xba\xf7\x9b\xc2\x89\x18\xa8\x07\xf4\x18\xc8\xa2\x90\xe1\x10\x28\x5a\xd4\x9a\x08\x0e\xca\xd9\xa0\x77\xf1\xd0\x95\x50\xe8\x22\x49\xee\xd0\xad\x57\x39\x91\xa9\x22\x07\xe1\x21\xf5\xb0\x40\x6d\x22\x63\x4a\xad\x98\xbb\x26\xf8\x70\x21\xd8\x08\xc9\x0f\x82\xfe\x56\x4e\x85\x93\x0d\x27\xea\xe1\xbe\x44\x4d\x68\xc8\x16\xf0\x88\xde\x35\xce\x49\x88\x13\xc5\xbb\xaf\x5f\x1e\x3f\x7c\x33\x4f\x14\xf0\x84\x02\x24\xe1\x44\xa2\xee\x35\xa3\x62\x67\xc3\x98\x40\x00\x7d\x29\x42\x59\xc5\xc5\xc3\x84\xd7\x12\xfe\x4f\xbb\x18\xcb\x25\x95\xf7\xbf\xc8\xe8\x84\xbf\x76\x73\xb4\xd9\x24\xc7\x89\xb6\xde\xfe\xe3\x00\x70\x4a\xe1\x1a\x5d\x88\xd5\xac\x6e\xc0\x9c\xe3\x56\x5d\x93\xc9\x69\x19\xe7\x03\xdf\x2a\x76\x7a\xfd\x7b\x70\x42\x76\xe6\xf1\xb6\x66\x75\x8d\x2f\x05\x6c\x3e\x14\xc1\x97\x73\xd7\xac\xca\xf6\xac\x8f\x6f\x98\x8e\xa2\x0e\x79\x71\x8c\xc7\xf1\x92\x8f\x3b\xf4\xe9\xa9\x5c\xed\xd9\x2b\x34\x86\x92\x92\xbd\xbf\xba\x83\xcd\xe6\x72\xe9\xdb\xbf\xe1\x68\xeb\x6d\xe7\x1e\xbe\xff\xa8\x2b\xaf\x2c\x64\x4f\x2b\x5a\xd1\xbf\x01\x00\x00\xff\xff\xa6\x65\x21\x8a\x3f\x04\x00\x00")

func customresourcedefinitionAlamedarecommendationscrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_customresourcedefinitionAlamedarecommendationscrdYaml,
		"CustomResourceDefinition/alamedarecommendationsCRD.yaml",
	)
}

func customresourcedefinitionAlamedarecommendationscrdYaml() (*asset, error) {
	bytes, err := customresourcedefinitionAlamedarecommendationscrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "CustomResourceDefinition/alamedarecommendationsCRD.yaml", size: 1087, mode: os.FileMode(438), modTime: time.Unix(1553562565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _customresourcedefinitionAlamedascalerscrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xbd\x8e\x2b\x37\x0f\xed\x17\xd8\x77\x20\xfc\x15\xdb\x7c\xb6\xb3\x48\x13\x4c\x11\xe0\xc2\x49\xb1\x08\x72\x11\xec\x06\xb7\x09\x52\xd0\x12\xc7\x66\x56\x22\x15\x89\x63\xc4\x79\xfa\x40\x1a\xff\xdb\x7b\xe1\x00\x51\x35\x3a\x12\x0f\xa9\x43\x52\x1a\x4c\xfc\x85\x72\x61\x95\x0e\x30\x31\xfd\x65\x24\x75\x56\x66\xef\xdf\x95\x19\xeb\x7c\xf3\xbc\x24\xc3\xe7\xc7\x87\x77\x16\xdf\xc1\x62\x28\xa6\xf1\x95\x8a\x0e\xd9\xd1\x0f\xd4\xb3\xb0\xb1\xca\xe3\x43\x24\x43\x8f\x86\x1d\x00\xc0\xe3\x03\x40\xc0\x25\x85\xd2\xd5\x4f\x00\xa7\x62\x59\x43\xa0\x3c\x35\xd5\xb0\xa7\xef\x60\xf2\x3c\xfb\x66\x52\xf7\x08\x46\xea\x00\x03\x46\xf2\x58\x1c\x06\xca\x65\x86\x83\x69\xfd\x66\x59\xcd\x2a\x05\xb2\x34\x98\x1f\x1f\x4a\x22\xd7\xc8\x57\x59\x87\xd4\xc1\x57\xb6\x8e\xe4\xfb\x50\xc6\x83\x7c\x1a\x1d\xbd\x35\x47\xe3\x42\x0a\x43\xc6\x70\x19\x43\x5d\x2b\x4e\x13\x75\xf0\xb9\xb2\x24\x74\xe4\x2b\xb8\xc1\xc0\x1e\xeb\xe1\x77\xc4\x9a\x48\x3e\xfd\xf2\xf2\xe5\xdb\x37\xb7\xa6\x88\x3b\x14\x20\x65\x4d\x94\x8d\x0f\x11\xd4\x71\x22\xfc\x11\x04\xf0\x54\x5c\xe6\xd4\x58\xe1\xfb\xe9\xe9\x12\xc0\x53\x65\x1f\x8d\xc0\x57\xe9\xa9\x80\xad\x09\x36\x23\x46\x1e\x4a\xf3\x0c\xda\x83\xad\xb9\x40\xa6\x94\xa9\x90\x18\x8e\x39\x3a\x25\xd3\x1e\x50\x40\x97\x7f\x90\xb3\x19\xbc\x51\xae\x2c\x50\xd6\x3a\x04\x5f\xd3\xb5\xa1\x6c\x90\xc9\xe9\x4a\xf8\xef\x03\x75\x01\xd3\xe6\x33\xa0\x51\xb1\x73\x4a\x16\xa3\x2c\x18\xaa\x34\x03\xfd\x1f\x50\x3c\x44\xdc\x42\xa6\xea\x04\x06\x39\xa1\x6b\x5b\xca\x0c\x7e\xd6\x4c\xc0\xd2\x6b\x07\x6b\xb3\x54\xba\xf9\x7c\xc5\xb6\xaf\x3e\xa7\x31\x0e\xc2\xb6\x9d\xb7\x02\xe2\xe5\x60\x9a\xcb\xdc\xd3\x86\xc2\x1c\x13\x4f\x5b\xa0\x62\xad\x62\xa3\xff\x5f\xde\x15\x66\x79\x3a\x8d\xcc\xb6\x35\x7b\xc5\x32\xcb\xea\x88\xb7\x3a\xb8\x5f\xfb\x9f\x58\x3c\x70\x01\xdc\x11\x8d\x27\x38\x4a\x5c\xa1\x2a\xcc\xeb\x8f\x6f\xbf\xc2\x3e\x8e\x96\x86\x0b\xdd\x9b\xe2\x47\xbb\x72\x14\xbf\x6a\xc5\xd2\x53\x1e\xb3\xd7\x67\x8d\x8d\x92\xc4\x27\x65\xb1\x36\x71\x81\x49\x2e\x84\x2f\xc3\x32\xb2\xd5\x7c\xff\x39\x50\xb1\x9a\xa4\x19\x2c\x50\x44\x0d\x96\x04\x43\xf2\x68\xe4\x67\xf0\x22\xb0\xc0\x48\x61\x81\x85\xfe\x6b\xe9\xab\xc8\x65\x5a\x45\xbd\x47\xfc\xc3\x6d\x71\xbd\x75\x14\xe8\x88\x1f\x1a\x7d\x3f\x6e\xf6\x53\x1d\xee\xec\x72\xba\xd5\x5e\x1f\x07\x54\x07\x09\x2e\x03\x7d\x60\xb0\x54\x0d\x84\x17\x4d\x94\x34\xb0\xdb\x5e\x59\x90\x0c\xf1\x0a\x9c\x42\xb1\xca\x7f\x8d\x3b\x8d\x09\x9d\xdd\x1f\x68\xa1\x40\xce\x34\x5f\xf9\x38\x2b\xe1\xa7\x97\x98\x34\x1b\x8a\x75\xf0\x3a\x08\x4c\x22\xbe\xd3\xa4\x36\x70\xa6\x15\x09\x65\x34\x02\xa7\x9e\x00\x7b\xa3\x0c\x51\x3d\xf7\xdb\xb1\x8e\x6b\xf9\x71\xa0\xa7\xdb\x31\x5d\xa6\x08\x5a\xe5\x71\xa6\xf3\x86\x9a\x1e\x02\x3d\x47\x47\x9d\xef\xc8\xbc\xa1\x0d\xe5\xbe\xdc\xef\x2e\xed\xc5\xe1\x9d\xb9\xd2\xe6\x43\xd3\x51\xb8\x14\x74\x1b\x49\xcc\xa9\xf4\xbc\xba\xb5\xe7\xe3\xd3\x5f\x72\xfc\x7b\xeb\x9b\xfa\x8d\x6a\x9d\xd0\x7e\x6d\x71\x17\xf7\xbd\x09\xbb\xc4\x37\xfb\xbf\x80\xcd\x33\x86\xb4\xae\x2f\xfe\x89\xfc\xe8\x1c\x25\x23\xff\xf9\xea\x1d\x9d\x4c\xce\x1f\xcf\x71\xee\x54\x7c\xfb\x2f\x28\x1d\xfc\xf6\x7b\x7b\x42\x4d\x33\xf9\x5d\x4f\x36\xf4\x9f\x00\x00\x00\xff\xff\xae\x07\x76\xea\x7b\x08\x00\x00")

func customresourcedefinitionAlamedascalerscrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_customresourcedefinitionAlamedascalerscrdYaml,
		"CustomResourceDefinition/alamedascalersCRD.yaml",
	)
}

func customresourcedefinitionAlamedascalerscrdYaml() (*asset, error) {
	bytes, err := customresourcedefinitionAlamedascalerscrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "CustomResourceDefinition/alamedascalersCRD.yaml", size: 2171, mode: os.FileMode(438), modTime: time.Unix(1553562565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAdmissionControllerdmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x4f\x6f\xf2\x38\x10\xc6\xef\x48\x7c\x07\xeb\xbd\xf4\x94\x84\x57\xbb\xbc\xab\xf5\x2d\x25\xa9\xb6\x5a\xa0\x08\xd8\x4a\x3d\xa1\xa9\x33\xd9\x58\xf5\x9f\xd4\x9e\xa4\xe2\xdb\xaf\x42\x08\x4d\x5a\x28\x5d\x4e\x64\xc6\xfe\xcd\xf3\x8c\xc7\x86\x52\x3e\xa2\xf3\xd2\x1a\xce\xa0\x2c\x7d\x54\xff\x1c\x8f\x5e\xa4\xc9\x38\x4b\xb0\x54\x76\xaf\xd1\xd0\x78\xa4\x91\x20\x03\x02\x3e\x1e\x31\x66\x40\x23\x67\x90\x69\xe9\x9b\x8d\x81\xb0\x86\x9c\x55\x0a\x5d\x97\xf5\x25\x08\xe4\x2c\xc7\x0c\x1d\x90\x75\x20\x9b\x8c\x82\x67\x54\xfe\x80\x60\x4d\x31\xce\x40\x81\xc6\x0c\xda\x88\xb0\xba\xb4\x06\x0d\x5d\x66\x83\x31\x96\x80\xa4\x35\x1d\x26\x43\x2f\x9c\x2c\xe9\x60\x20\xc1\x5c\x1a\xf4\xac\xb0\x6f\x8c\x2c\xcb\x0e\x06\x18\x15\x78\x11\xc8\x18\xa1\x2e\x15\x10\x86\xa0\xca\x02\x42\x5b\xa2\xf1\x85\xcc\x29\x94\x36\x7a\x03\x49\x41\x6e\x5d\xe0\x10\xb2\x3d\x67\x37\xe4\x2a\xbc\x19\x8f\x7c\x89\xe2\x50\xdf\x61\xa9\xa4\x00\xcf\xd9\xcf\xe6\xd3\xa3\x42\x41\xd6\x1d\xb5\x69\x20\x51\xcc\xfb\xa6\x3b\xdb\x17\xd4\x74\x5a\xba\xfd\xfd\xa6\x37\xbf\xaf\x1b\xdf\xfc\xd4\xb0\xda\x95\x7a\x8c\x9d\x9c\xb4\x07\x60\x08\xa4\x41\xf7\x0e\x08\xbe\x51\x93\x31\xa9\xe1\x5f\xe4\xec\xb5\x82\x7d\xd3\xb6\xd2\xd9\xb2\x40\xf2\x64\x5d\x74\x3c\xe1\xe0\x1d\xe0\x0a\x54\xbc\x9e\x84\xbf\x85\xbf\x3e\x10\x56\x95\x52\x2b\xab\xa4\xd8\x73\x76\x9f\x2f\x2d\xad\x1c\xfa\xc3\xf8\x75\xcb\x1c\x7a\x5b\x39\x81\x7d\x87\x8c\x29\xa9\x25\x0d\x43\x8c\x89\xb2\xe2\xec\xd7\x44\x0f\xa3\x1a\xb5\x75\x7b\xce\xfe\x9c\x2c\x64\x3f\xe3\xf0\xb5\x42\x7f\x1e\xf2\xfb\xf4\x02\xe4\x8f\x69\x1f\x82\xa6\xee\xed\xee\x1a\x17\xcf\xe3\x45\x9a\xc4\xbb\x38\x59\xcc\xb6\xf3\x5d\x92\xae\xe6\x0f\x4f\x69\xb2\x5b\xc6\x8b\x74\xb3\x8a\x67\x69\x1f\x5d\x83\xaa\xf0\xce\x59\xfd\x41\x46\x2e\x51\x65\x6b\xcc\x3f\x84\x8f\x89\x15\x50\xc1\x4f\xc3\x12\x9e\xee\xdf\x75\x31\xf1\x36\xfe\xeb\x9f\xdb\x5d\x9c\x24\xeb\x74\xb3\xf9\xa4\x84\xb3\x1f\xdd\xf1\x35\xe4\xa2\x7a\x0e\x7b\x37\x3a\xf4\xb5\xe0\xd3\xc9\x64\x3a\xf9\x71\xb5\x52\xba\x8c\x6f\xe7\x9f\xad\x72\x76\x93\x83\xf2\xcd\x95\xba\x02\xd8\xce\x37\xbb\x59\xba\xde\xee\xee\xee\xcf\x72\x22\x24\x11\x91\xf2\x81\x40\x47\xbe\xf9\x17\x0a\x47\xdf\xc2\xae\xd6\xf7\x8f\xf1\x36\xdd\xfd\x9d\x3e\xfd\x0f\xfa\x0b\xee\xaf\xd2\x67\xf1\xd7\x9a\x6b\x70\x91\xab\x4c\xe4\x51\x38\x24\x1f\xbd\x54\xcf\xe8\x0c\x12\xfa\xe6\x16\x79\x74\xb5\x14\x08\x42\xd8\xca\x50\xf7\x19\x08\x18\x3a\xab\xad\xaa\x34\x2e\x9a\x35\x7e\x30\x7f\xba\x09\xb5\xb3\x31\xd4\xdf\x97\xd2\xea\x3e\x9b\x6a\xde\xbc\x07\xa3\xf6\x9c\x1d\xce\xa8\x4b\xb5\xf5\x3e\xbf\x10\x67\x18\xad\xaf\xc1\xd0\xb6\xa1\xe5\xc5\x37\x25\x20\x75\x02\x1c\x1d\xc7\x6d\x03\xbe\x7e\x83\x86\x6b\x2f\xf3\xff\x0b\x00\x00\xff\xff\x4e\xea\xac\x6a\xef\x06\x00\x00")

func deploymentAdmissionControllerdmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAdmissionControllerdmYaml,
		"Deployment/admission-controllerDM.yaml",
	)
}

func deploymentAdmissionControllerdmYaml() (*asset, error) {
	bytes, err := deploymentAdmissionControllerdmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/admission-controllerDM.yaml", size: 1775, mode: os.FileMode(438), modTime: time.Unix(1553821934, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaAidmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x41\x6f\xdb\x3e\x0c\xc5\xef\x01\xf2\x1d\x88\xde\x9d\xb8\xfd\xb7\xff\x83\x6e\xd9\x5c\x60\x03\xd6\xd6\x68\xbb\x5d\x07\x56\x66\x63\x61\x92\xa8\x4a\xb4\x87\x60\xd8\x77\x1f\x6c\x37\xb5\x9d\x64\xe8\x7c\x33\xc9\xf7\xe3\xf3\x03\x8d\xc1\x7c\xa3\x98\x0c\x7b\x05\x18\x42\x5a\xb7\xe7\xcb\xc5\x0f\xe3\x2b\x05\x05\x05\xcb\x3b\x47\x5e\x96\x0b\x47\x82\x15\x0a\xaa\xe5\x02\xc0\xa3\x23\x05\x68\xd1\x51\x85\x19\x9a\x7d\x2d\x05\xd4\xa4\xe0\x99\x2a\x8a\x28\x1c\x87\x8e\xc5\x27\xb2\xa9\x17\x42\xb7\xe2\x4d\x39\x54\x34\xbb\xc0\x9e\xbc\x1c\x12\xd1\x7b\x16\x14\xc3\x7e\x2f\xae\x28\xe9\x68\x82\xf4\x66\x0b\x7a\x36\x9e\x12\xd4\xfc\x13\x84\xa1\xea\xcd\x82\xd4\xd4\xed\xb0\x46\xf7\xca\x37\x24\x87\xc1\xd2\x72\x91\x02\xe9\x9e\x17\xa9\x1f\x4b\x0a\xce\xbb\xd7\x44\x96\xb4\x70\x7c\xdd\xe5\x50\x74\xfd\x65\x6a\x7d\x6e\xfe\xd5\xa4\x90\x0b\x16\x85\xf6\xaa\x69\x4c\xdd\x73\x2a\xaa\xee\xb1\x73\xf2\x49\x36\xc0\x9b\xd7\x21\x28\x2f\x68\x3c\xc5\x51\x96\x1d\xf1\x33\xf2\x5b\xe3\x69\xe4\x1a\x87\x5b\x52\xf0\xd2\xe0\x6e\x65\x78\x1d\x22\x87\x9a\x24\x09\xc7\xf5\xa8\x52\x6d\xbe\xfa\x6f\xf5\xff\x81\xaa\x6c\xac\x2d\xd9\x1a\xbd\x53\xf0\xf9\xf9\x96\xa5\x8c\x94\xfa\x6b\xd8\x8f\x05\x8e\x32\xfd\x88\x6c\x34\x59\x72\x14\x05\x57\x79\x7e\x75\x3e\xf6\x01\x42\x64\x61\xcd\x56\xc1\xe3\xc7\x72\x6c\x44\x4a\xdc\x44\x4d\x53\x18\x80\x35\xce\xc8\xbc\x04\xa0\x43\xa3\xe0\x32\xcf\x73\x37\xaf\x3b\x72\x1c\x77\x0a\x2e\xaf\xf2\x1b\x33\x6d\x45\x7a\x69\x28\x9d\xe6\x5c\xfc\x9d\x73\x31\xe7\x90\x6f\x67\x1f\x3a\x04\x7f\x57\x5e\xdf\x6f\x1e\xef\xee\xbf\x6f\x8a\xe2\xfe\xfa\xe1\x61\x8a\x6a\xd1\x36\xa4\xe0\xec\xf0\x04\x57\x93\xff\x63\x95\x5a\xad\xba\x90\xf2\xb3\x63\x78\xb1\x79\xdc\x7c\xfa\xfa\xe1\x5f\xd8\xdd\xcd\xd5\xcd\xd3\xbb\xe8\x96\x6d\xe3\xe8\x86\x1b\x7f\x90\x47\x06\xae\x2b\x96\x28\xb5\x82\x75\x8b\x71\x6d\x79\x3b\x0f\xe6\xe8\xd4\x2c\x6f\xb3\xee\x90\x70\x4b\xf3\xc9\xd4\x3c\x0d\xa0\xe3\xbb\x1f\x0c\xa4\x13\x51\xbe\x0f\x26\x17\x64\x57\x98\xa8\xe0\xd7\xef\x7d\x3d\x51\x6c\x8d\xa6\x8d\xd6\x9d\xfd\x53\x1b\xe7\x13\xb7\x47\xff\xe3\x9f\x00\x00\x00\xff\xff\x3c\xc7\xa0\xf9\x01\x05\x00\x00")

func deploymentAlamedaAidmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaAidmYaml,
		"Deployment/alameda-aiDM.yaml",
	)
}

func deploymentAlamedaAidmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaAidmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-aiDM.yaml", size: 1281, mode: os.FileMode(438), modTime: time.Unix(1553821937, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaDatahubdmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x4f\x4f\xe3\x30\x10\xc5\xef\x95\xfa\x1d\xe6\xc6\x29\x69\xaa\x15\x08\x7c\x0b\x4a\x57\x20\xb5\xa5\x6a\xe9\xee\xde\xaa\xc1\x99\x12\x0b\xff\xc3\x9e\x94\xed\xb7\x5f\x25\x6c\x20\x65\x5b\x56\xe4\xd6\xb1\xdf\xef\x3d\x3f\xd9\x45\xaf\x7e\x50\x88\xca\x59\x01\xe8\x7d\x1c\xed\xc6\xc3\xc1\x93\xb2\xa5\x80\x82\xbc\x76\x7b\x43\x96\x87\x03\x43\x8c\x25\x32\x8a\xe1\x00\xc0\xa2\x21\x01\xa8\xd1\x50\x89\x49\x33\xae\xea\x87\x6e\x21\x7a\x94\x24\x60\x4b\x25\x05\x64\x17\x50\x35\x2b\x1a\x1f\x48\xc7\x56\x0d\x8d\xcf\x9b\xfc\x75\x22\x9d\xf1\xce\x92\xe5\xa3\x58\xb4\xd6\x31\xb2\x72\xb6\x23\x94\x14\x65\x50\x9e\xdb\xd8\x05\x6d\x95\xa5\x08\x95\x7b\x01\x76\x50\xb6\xb1\x81\x2b\x6a\x8c\xb4\x92\xad\xf2\x18\x17\x80\xc9\x78\x8d\x4c\x29\x6a\x5f\x61\xea\x3c\xd9\x58\xa9\x2d\xa7\xca\x8d\x5e\x50\x71\xb2\x75\x21\x09\x84\xe5\x5e\xc0\x19\x87\x9a\xce\x86\x83\xe8\x49\xb6\x31\x02\xb5\xf4\x28\x60\xdc\xfc\x8c\xa4\x49\xb2\x0b\x7f\x23\x1a\x64\x59\x4d\xfb\xc7\x3e\x3c\x78\x3f\x48\x17\xa3\x93\xf6\xcb\x6e\xbe\x93\x85\x37\x9f\x3e\xf4\x38\xed\x02\xf0\x16\xfd\xb5\x73\xcb\xa8\x2c\x85\x77\x6d\xf2\xb9\x13\x80\x32\xf8\x48\x02\x9e\x6b\xdc\x37\x15\xf9\xe0\x7c\x45\x1c\xd9\x85\xd1\x07\x4d\x12\x2a\xd2\x62\x97\xa5\xdf\xd2\x8b\x0f\xfa\x45\xad\xf5\xc2\x69\x25\xf7\x02\x6e\xb7\x73\xc7\x8b\x40\xb1\xbd\x65\xdd\xb6\x40\xd1\xd5\x41\x52\xff\x54\x00\x5a\x19\xc5\x87\x23\x00\xe9\x6b\x01\xe3\x2c\x33\x87\x63\x43\xc6\x85\xbd\x80\xf1\x79\x36\x53\xfd\xa5\x40\xcf\x35\xc5\xe3\x98\xf3\x93\x94\xec\x80\x42\x76\xd7\x93\x77\xa5\xe5\xd3\x7c\x36\x29\xf2\x4d\x91\xdf\xe7\x37\xeb\xeb\xcd\xed\xfc\xfb\x74\xfd\xab\xb8\xde\xe4\x45\xb1\x9c\xac\x56\x7d\xf4\x0e\x75\x4d\x02\x2a\x66\x1f\xc5\xe8\xad\x3b\x65\xb7\xba\xfe\x5d\x3e\xa4\xbd\xd7\x93\xc6\x9d\x14\x97\xd9\xe5\xc5\x17\x1c\xd7\xab\xc9\x72\x9e\xcf\x26\x47\x2c\xb1\x34\xca\x7e\x01\xb5\xc8\x57\xab\x9f\x77\xcb\xe2\x14\xca\x63\x8c\xff\xc7\x2d\x96\x77\xb3\xc9\xfd\xcd\x64\xbd\xda\xac\x97\xd3\x4f\x9a\xf0\xc1\x19\xe2\x8a\xea\x98\x3c\x5d\xc6\xf7\x07\x99\x18\x67\x15\xbb\xa0\xec\x63\x5b\xc8\x55\x76\x35\xee\x30\x91\xc2\x4e\x49\xca\xa5\x74\xf5\x89\x7f\x90\x7f\xb7\xcd\x8f\x5d\xf4\x3f\x01\x00\x00\xff\xff\x54\x23\x39\xa6\x0d\x05\x00\x00")

func deploymentAlamedaDatahubdmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaDatahubdmYaml,
		"Deployment/alameda-datahubDM.yaml",
	)
}

func deploymentAlamedaDatahubdmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaDatahubdmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-datahubDM.yaml", size: 1293, mode: os.FileMode(438), modTime: time.Unix(1553821942, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaEvictionerdmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcf\x6e\xdb\x30\x0c\xc6\xef\x01\xf2\x0e\x44\x2f\x3d\xc5\x71\xb1\xa5\xc3\x74\x73\x67\x03\x0b\x90\x66\x41\xdb\xf5\x1a\xb0\x32\x3d\x0b\xd3\xbf\x4a\xb4\x8b\xbc\xfd\x60\x77\xce\x9c\xb6\xee\xaa\x93\x45\x8a\xbf\x8f\xfc\x2c\xa1\x57\xf7\x14\xa2\x72\x56\x00\x7a\x1f\x97\xed\xc5\x7c\xf6\x5b\xd9\x52\x40\x4e\x5e\xbb\x83\x21\xcb\xf3\x99\x21\xc6\x12\x19\xc5\x7c\x06\x60\xd1\x90\x00\xd4\x68\xa8\xc4\x05\xb5\x4a\xb2\x72\x96\xc2\x90\x8b\x1e\x25\x09\xa8\xa8\xa4\x80\xec\x02\xaa\x2e\xa3\xf1\x81\x74\xec\x01\xd0\x49\x1d\x09\xcf\x11\xe9\x8c\x77\x96\x2c\x4f\x91\xd1\x5a\xc7\xd8\xed\x07\x48\x49\x51\x06\xe5\xb9\x6f\x3e\xa7\x4a\x59\x8a\x50\xbb\x27\x60\x07\x65\xdf\x3c\x70\x4d\x13\x38\x00\x26\xe3\x35\x32\x25\xa8\x7d\x8d\x89\xf3\x64\x63\xad\x2a\x4e\x94\x5b\x3e\xa1\xe2\x45\xe5\xc2\x22\x10\x96\x07\x01\xe7\x1c\x1a\x3a\x9f\xcf\xa2\x27\xd9\xab\x07\xf2\x5a\x49\x8c\x02\x2e\xba\x6d\x24\x4d\x92\x5d\xf8\xdb\x99\x41\x96\xf5\x66\x3c\xf0\xe9\xc8\x2f\x7a\x19\x3a\x19\xaa\xc7\x66\x77\xeb\x3d\xc3\xbb\xa5\x4f\x95\xde\xd5\x02\x38\xce\xf0\x6c\xbb\x65\x54\x96\xc2\xbf\xf2\xc5\x7f\xf5\x00\x94\xc1\x5f\x24\xe0\xb1\xc1\x43\x67\x97\x0f\xce\xd7\xc4\x91\x5d\x58\xbe\x2e\x5b\x84\x9a\xb4\x68\xd3\xe4\x53\x72\xf9\x02\xb1\x6b\xb4\xde\x39\xad\xe4\x41\xc0\xba\xda\x3a\xde\x05\x8a\xfd\x8d\x1b\x8e\x05\x8a\xae\x09\x92\xc6\xe3\x01\x68\x65\x14\x9f\x86\x00\xa4\x6f\x04\x5c\xa6\xe6\x34\x6a\xc8\xb8\x70\x10\xf0\x35\xbd\x56\xe3\x4c\xa0\xc7\x86\xe2\xdb\x90\xcf\xab\x09\xc8\x97\xd5\x18\x42\xb6\x1d\x55\x0f\xbe\x65\x9b\xec\xba\xc8\xb3\x7d\x71\xbf\xfe\x76\xb7\xfe\xb1\x2d\x6e\xf6\x79\x76\x97\x7d\xff\x79\xb5\xcf\xf2\xfc\xa6\xb8\xbd\x1d\xb3\x5b\xd4\x0d\x09\x38\x1b\x6c\xeb\x7e\x7c\xdd\x3c\x24\xa3\xd7\x93\xc4\x56\x8a\x55\x9a\xae\xd2\xb3\x0f\xa9\x0d\x9f\xfb\x62\x9b\x5d\x6d\x8a\xb7\xd4\x2a\xd4\x91\x8e\xb4\x48\xa1\x55\x92\x32\x29\x5d\x33\xfd\x00\x5f\x9f\xdc\x4e\xdc\x93\x3f\x01\x00\x00\xff\xff\x97\x3a\xb2\xb4\x55\x04\x00\x00")

func deploymentAlamedaEvictionerdmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaEvictionerdmYaml,
		"Deployment/alameda-evictionerDM.yaml",
	)
}

func deploymentAlamedaEvictionerdmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaEvictionerdmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-evictionerDM.yaml", size: 1109, mode: os.FileMode(438), modTime: time.Unix(1553821946, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaGrafanadmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbf\x8e\xdb\x3c\x0c\xdf\x03\xe4\x1d\xb8\xdd\xe4\x38\xb9\xbb\x6f\xd1\xfa\xdd\x52\xa0\x29\x3c\x14\xdd\x19\x99\x8e\x85\x4a\xa2\x4a\xd1\x39\x04\x45\xdf\xbd\xb0\x13\x27\x76\x2e\x4d\xab\xc5\x30\xc9\xdf\x1f\x52\x14\x26\xf7\x8d\x24\x3b\x8e\x06\x30\xa5\x5c\x1e\x36\xcb\xc5\x77\x17\x6b\x03\x6f\x94\x3c\x1f\x03\x45\x5d\x2e\x02\x29\xd6\xa8\x68\x96\x0b\x80\x88\x81\x0c\xa0\xc7\x40\x35\x16\x7b\xc1\x06\x23\x8e\x89\x9c\xd0\x92\x81\x86\x6a\x12\x54\x16\x74\x7d\xc6\xe3\x8e\x7c\x1e\xd0\xd0\xeb\x5c\xe0\xa7\x88\xe5\x90\x38\x52\xd4\xbb\xb4\x18\x23\x2b\xaa\xe3\x38\x32\xd4\x94\xad\xb8\xa4\x83\xed\x37\x6a\x5c\xa4\x0c\x2d\xbf\x83\x32\xd4\x83\x6d\xd0\x96\x7a\x21\xef\xec\x80\x84\x09\x1f\x80\x52\x48\x1e\x95\x56\xe8\x53\x8b\x2b\x4e\x14\x73\xeb\x1a\x5d\x39\x2e\xdf\xd1\x69\xd1\xb0\x14\x42\x58\x1f\x0d\x3c\xa9\x74\xf4\xb4\x5c\xe4\x44\x76\x90\x17\x1a\x58\xb3\x81\x4d\xff\x9b\xc9\x93\x55\x96\xb3\xb5\x80\x6a\xdb\xcf\xd3\x76\x6f\x5b\x9e\xb6\x36\x1a\x19\xc1\xd3\x31\xf7\xc7\xff\x2b\x11\xc0\xc5\xdf\x69\xa0\x51\xd1\x45\x92\x2b\xb6\x38\xdf\xdb\x0c\xd4\x1f\x17\x70\x7f\x8d\x97\xe7\xaf\xf9\x6f\xf5\xba\x7a\xb9\xa9\xaa\x3a\xef\x2b\xf6\xce\x1e\x0d\x7c\x6a\xbe\xb0\x56\x42\x79\x58\x90\xb1\x2c\xb1\xe8\xd4\x6f\xaf\x7b\x31\x53\xb1\xa8\x81\x97\xf5\x7a\x3d\x2d\x18\x17\xaa\x55\x4d\xf3\x78\x12\x56\xb6\xec\x0d\x7c\xfd\xbf\xba\xa6\x84\x32\x77\x62\x69\xae\xe3\x5d\x70\x37\xd2\x00\x36\x75\x06\x9e\xd7\xeb\x30\x0f\x07\x0a\x2c\xc7\x21\xb3\x75\xd3\x94\xd0\x8f\x8e\xf2\x7d\x9a\xcd\x1f\x69\x36\x73\x9a\x03\xfb\x2e\xd0\x96\xbb\xf8\x61\x14\xa1\x0f\x56\xa8\xad\x81\xf2\x80\x52\x7a\xb7\x2b\x3f\x5c\xc8\x75\x24\xe7\x54\x91\xfb\x87\xb4\xa7\x79\x49\xee\x76\x27\xa6\x3b\x04\x73\x25\x52\x3b\xaa\x94\x49\xf8\xe0\xfa\xf7\xee\xe2\xbe\xec\x77\xed\x3c\xcb\x47\xf2\x77\xca\x4e\x3d\x4e\xdb\x2b\xfe\xee\x99\x42\xd2\xe3\x9b\x13\x03\x3f\x7f\x4d\x81\x96\x63\xe3\xf6\x5b\x4c\x37\x63\xaf\xa9\xc1\xce\xeb\x96\x6b\x32\xf0\xfa\x7c\x77\x6b\x1e\x78\x7c\x58\x04\xbf\x03\x00\x00\xff\xff\xf8\x8e\xb4\x15\xfa\x04\x00\x00")

func deploymentAlamedaGrafanadmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaGrafanadmYaml,
		"Deployment/alameda-grafanaDM.yaml",
	)
}

func deploymentAlamedaGrafanadmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaGrafanadmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-grafanaDM.yaml", size: 1274, mode: os.FileMode(438), modTime: time.Unix(1553821951, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaInfluxdbdmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4f\x4f\xe3\x30\x10\xc5\xef\x95\xfa\x1d\x46\xec\x81\x53\x5b\x7a\x5a\xc9\xb7\x42\xc3\x12\x2d\x94\xa8\x7f\xd8\xdd\x53\x35\x4d\xa6\xd4\xc2\xb1\x2d\x7b\x52\x88\x56\xfb\xdd\x57\x0e\x04\xd2\xd0\x16\xa4\x5d\x1f\xaa\xc6\xe3\xf7\x7b\x6f\xe2\xd8\x68\xe5\x1d\x39\x2f\x8d\x16\x80\xd6\xfa\xc1\x76\xd8\xed\x3c\x48\x9d\x09\x18\x93\x55\xa6\xcc\x49\x73\xb7\x93\x13\x63\x86\x8c\xa2\xdb\x01\xd0\x98\x93\x00\x54\x98\x53\x86\x3d\xa9\xd7\xaa\x78\xca\x56\x75\xc5\x5b\x4c\x49\xc0\x9a\x32\x72\xc8\xc6\xa1\x0c\x15\x85\x2b\x52\xbe\x92\x43\x30\x7a\xd5\x3f\xcf\xa4\x26\xb7\x46\x93\xe6\xfd\x5c\xd4\xda\x30\xb2\x34\xba\x46\x64\xe4\x53\x27\x2d\x57\xc1\xc7\xb4\x96\x9a\x3c\x6c\xcc\x23\xb0\x81\xac\x0a\x0e\xbc\xa1\xe0\xa4\x64\x5a\x29\xa1\x09\x04\x60\xca\xad\x42\xa6\x3e\x2a\xbb\xc1\xbe\xb1\xa4\xfd\x46\xae\xb9\x2f\xcd\xe0\x11\x25\xf7\xd6\xc6\xf5\x1c\x61\x56\x0a\x38\x65\x57\xd0\x69\xb7\xe3\x2d\xa5\x95\xbf\xa3\x0a\xeb\x05\x0c\xc3\xa3\x27\x45\x29\x1b\xf7\x92\x2d\x47\x4e\x37\xd7\xcd\x86\xdb\x4d\xef\x34\x57\x27\xa9\xd5\xcd\x57\x1d\x86\xfa\x34\x09\xe0\x35\x61\x18\x5f\xc0\x53\x5a\x38\xc9\xe5\x85\xd1\x4c\x4f\xdc\xa8\x00\xb8\x42\x8f\xfc\xc2\x93\x13\x30\x3c\x3b\x3b\xab\x4b\xa9\xd1\x8c\x52\x93\x7b\x73\xec\xbd\xec\xf8\xae\x55\x18\x32\xc7\xfb\x46\x41\x0c\xfb\x5f\x7b\xa8\xac\xd4\xd4\x5a\x93\x14\x4a\x25\x46\xc9\xb4\x14\x10\xaf\x27\x86\x13\x47\xbe\xfa\xb2\xea\x65\xa4\xb7\x8d\x16\x6b\xcb\x78\x72\x79\xbd\xf8\x39\x3e\x5f\x4e\xa3\xe4\x76\x3a\x8f\x27\xdf\x96\xe3\x78\x36\x3a\xbf\x8e\xc6\x6f\x8b\x01\xb6\xa8\x0a\x12\x70\x12\xf6\xe9\xe4\x08\xe5\x6a\x3e\x4f\xaa\x9f\xd9\x32\x9a\xfc\x0f\xca\x45\x34\x9d\xc7\x97\xf1\xc5\x68\x1e\xed\x23\x0d\x88\xd3\x01\x2b\x3f\xb0\x4e\x6e\x91\x29\xfc\xef\xa7\x8e\x3f\x49\x4f\xa6\xf1\xdd\x68\x1e\x2d\xbf\x47\xbf\x3e\x4d\x7f\xa0\xf2\x43\xfa\x68\x31\xbf\xfa\x97\x17\x30\x1a\xdf\xc4\x93\xe5\x62\x16\x4d\xf7\xa9\x31\xcb\xa5\xfe\x58\x9e\x8c\x66\xb3\x1f\xb7\xd3\xbd\x01\x2a\x84\x45\xef\x8f\x61\x0e\xf9\x17\x9e\xdc\x47\xba\xa3\xee\x01\xd0\x32\xdf\x1a\x55\xe4\x74\x63\x0a\xcd\x7e\xe7\x33\xcd\xc3\x54\x82\xbc\x11\xd0\xde\x8e\x26\x7a\xf7\xca\x0c\xc7\x7b\x53\xac\x7a\xac\x7c\x73\x51\xb8\x6d\x6e\xb5\x2a\x05\xac\x51\x79\x3a\x64\xb3\x45\x37\x50\x72\x35\x78\x7f\x1c\xa1\x75\x50\x7b\x3e\xdc\xbf\xf7\x3b\x49\x7c\xb1\x7a\xe6\xb4\xe5\xcf\x2d\x1e\x3e\xf5\xef\x61\x94\x5b\x2e\xc7\xd2\x09\xf8\xfd\xa7\xad\x3a\xda\xaa\xa7\xd4\x11\x8b\x9d\x58\xd5\xd4\xe4\x90\xf6\x6f\x00\x00\x00\xff\xff\x43\xbe\x6f\xd9\xa7\x06\x00\x00")

func deploymentAlamedaInfluxdbdmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaInfluxdbdmYaml,
		"Deployment/alameda-influxdbDM.yaml",
	)
}

func deploymentAlamedaInfluxdbdmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaInfluxdbdmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-influxdbDM.yaml", size: 1703, mode: os.FileMode(438), modTime: time.Unix(1553821955, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaOperatordmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\xcd\x6e\xdb\x30\x0c\xbe\x07\xc8\x3b\x10\xbd\xf4\x14\xd7\xe9\xd6\x1d\x74\xf3\xe0\x00\x1b\xd0\x9f\x20\xed\x76\x0d\x58\x99\x99\x85\x49\xa2\x2a\xd1\x2e\xfc\xf6\x83\x9d\xb9\xb3\xbb\x64\xd3\xcd\x24\xbf\x1f\x7e\xb2\x30\x98\xef\x14\x93\x61\xaf\x00\x43\x48\x57\xed\x7a\xb9\xf8\x69\x7c\xa5\xa0\xa4\x60\xb9\x73\xe4\x65\xb9\x70\x24\x58\xa1\xa0\x5a\x2e\x00\x3c\x3a\x52\x80\x16\x1d\x55\xb8\xe2\x40\x11\x85\xe3\xd8\x49\x01\x35\x29\x38\x50\x75\xac\xa3\xe9\x3b\x16\x9f\xc9\xa6\x01\x0e\xbd\xd0\x1b\xfe\x58\xd1\xec\x02\x7b\xf2\x72\x9a\x17\xbd\x67\x41\x31\xec\x47\x8a\x8a\x92\x8e\x26\xc8\x60\xbc\xa4\x83\xf1\x94\xa0\xe6\x57\x10\x86\x6a\x30\x0e\x52\x53\xaf\x64\x8d\x1e\x90\x27\x89\x01\x84\x5c\xb0\x28\x94\xa1\x0d\x35\x66\x1c\xc8\xa7\xda\x1c\x24\x33\x7c\xf5\x8a\x46\x56\x07\x8e\xab\x48\x58\x75\x0a\x2e\x25\x36\x74\xb9\x5c\xa4\x40\x7a\xf0\x11\x69\xa0\x4f\x0a\xd6\xfd\x67\x22\x4b\x5a\x38\xfe\xf6\xe8\x50\x74\x7d\x3b\x5d\x7c\xbe\xfa\xcc\xc9\xe8\x63\xc4\x4e\x03\xef\xcf\xf9\xd0\xfb\x63\xe7\x2a\xff\xd0\x01\x78\x73\x7f\x0c\xde\x0b\x1a\x4f\xf1\x0f\x78\xf5\x1f\x2d\x00\xe3\xf0\x07\x29\x78\x69\xb0\xeb\x63\x0a\x91\x43\x4d\x92\x84\xe3\xd5\x7b\xd0\x2a\xd6\x64\x55\x9b\x67\x1f\xb2\x4f\xef\x08\xb6\x8d\xb5\x5b\xb6\x46\x77\x0a\xbe\x1e\xee\x59\xb6\x91\xd2\xf0\xb7\x8d\x63\x91\x12\x37\x51\xd3\x74\x31\x00\x6b\x9c\x91\x79\x09\x40\x87\x46\xc1\x75\xee\xe6\x55\x47\x8e\x63\xa7\xe0\x63\x7e\x67\xa6\x9d\x48\x2f\x0d\xa5\xd3\x24\xeb\x73\x24\xd7\x33\x12\xf2\xed\x04\x3d\x66\x56\xdc\x16\x77\x9b\xb2\xd8\x3f\x6c\x37\xbb\xe2\xe9\x61\xb7\x2f\x8b\xa7\xe2\xcb\xb7\xcf\xfb\xa2\x2c\x77\x9b\xc7\xc7\x29\x73\x8b\xb6\x21\x05\x17\x63\x64\xfd\x75\xd7\xcd\x73\x36\x79\x39\x59\x6a\xb5\xba\xc9\xf3\x9b\xfc\x62\x44\x26\x8a\xad\xd1\x54\x68\xcd\xcd\xb9\xe7\xf2\xf7\xdc\xfd\xc9\x1b\xed\xe7\x7e\x05\x00\x00\xff\xff\x67\xdd\xc4\x69\x01\x04\x00\x00")

func deploymentAlamedaOperatordmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaOperatordmYaml,
		"Deployment/alameda-operatorDM.yaml",
	)
}

func deploymentAlamedaOperatordmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaOperatordmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-operatorDM.yaml", size: 1025, mode: os.FileMode(438), modTime: time.Unix(1553821959, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _persistentvolumeclaimMyAlamedagrafanapvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\xbd\x4a\xc6\x40\x14\x44\xfb\x85\x7d\x87\xfb\x02\x5f\x40\xcb\x6d\x2d\xac\x44\xb1\x88\xf5\xb0\x3b\x09\x8b\xd9\x1f\xef\xdd\x04\x7c\x7b\x49\x20\x96\xe7\xcc\x70\xd0\xf3\x4c\xb5\xdc\x6a\x90\xe3\xc9\xbb\xef\x5c\x53\x90\x8f\x53\xd9\x60\x1d\x73\xdb\xf6\xc2\x97\x0d\xb9\x78\x57\x38\x90\x30\x10\xbc\x13\xa9\x28\x0c\x52\x7e\x1f\xd8\x50\x98\x30\xad\x8a\x05\x15\x53\x3f\xe2\xbd\x5b\x47\x64\x90\x85\x89\x8a\xd1\x14\xd9\x3b\xeb\x8c\x57\x00\x31\xd2\xec\xad\x25\xda\xc5\x22\x0f\xf9\x24\xd2\x97\xe6\xc1\xf7\x1a\x79\x4a\xa5\xb5\x5d\xe3\xff\x45\xf9\xb3\xd3\xc6\x8d\x22\x76\x66\x57\x06\x79\x7e\xcd\xf2\x17\x00\x00\xff\xff\x51\x19\x4f\x94\xce\x00\x00\x00")

func persistentvolumeclaimMyAlamedagrafanapvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_persistentvolumeclaimMyAlamedagrafanapvcYaml,
		"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml",
	)
}

func persistentvolumeclaimMyAlamedagrafanapvcYaml() (*asset, error) {
	bytes, err := persistentvolumeclaimMyAlamedagrafanapvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "PersistentVolumeClaim/my-alamedagrafanaPVC.yaml", size: 206, mode: os.FileMode(438), modTime: time.Unix(1553562565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _persistentvolumeclaimMyAlamedainfluxdbpvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\x3f\x4b\xc0\x30\x10\x47\xf7\x40\xbe\xc3\x6d\x9d\x5a\xec\x9a\xd5\xc1\x49\x14\x87\x3a\x9f\xc9\xaf\x72\x98\x7f\xe6\x92\xa2\xdf\x5e\x5a\xa8\xe3\x7b\x3c\x1e\x57\xd9\xd0\x54\x4a\x76\x74\xac\xd6\x7c\x49\x0e\x8e\x5e\x4f\xa5\x1d\xb9\x6f\x25\x8e\x84\xc7\xc8\x92\xac\x49\xe8\x1c\xb8\xb3\xb3\x86\x28\x73\x82\xa3\xf4\x3b\x73\xe4\x84\xc0\x8b\xe4\x3d\x8e\x9f\xf0\xb1\xd4\xc3\xdf\x81\x56\xf6\x70\xb4\x23\xa0\x71\x2f\x8d\xc5\x1a\xad\xf0\xd7\x81\xbd\x87\xea\x73\x09\xd0\x8b\x89\x66\x7a\x03\x87\xf7\x26\x1d\x2f\xd9\xe3\x94\x0d\x5a\x46\xf3\xff\x49\xc3\xf7\x80\xf6\x1b\x89\xf4\xdc\x7e\xc2\xd1\xb4\x3e\x3c\xc9\xf4\x17\x00\x00\xff\xff\x64\x55\x34\x22\xd1\x00\x00\x00")

func persistentvolumeclaimMyAlamedainfluxdbpvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_persistentvolumeclaimMyAlamedainfluxdbpvcYaml,
		"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml",
	)
}

func persistentvolumeclaimMyAlamedainfluxdbpvcYaml() (*asset, error) {
	bytes, err := persistentvolumeclaimMyAlamedainfluxdbpvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml", size: 209, mode: os.FileMode(438), modTime: time.Unix(1553562565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceAdmissionControllersvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x41\x6a\xf4\x30\x0c\x85\xf7\x81\xdc\xc1\x17\x70\xfe\xfc\x74\x16\xc5\xa7\x28\x14\xba\x57\x9d\x37\x33\xa2\x8e\x64\x24\x31\xe7\x2f\x71\x98\x5d\x4b\x77\xf6\x7b\x8f\xef\x13\x75\xfe\x80\x39\xab\x94\xf4\xf8\x3f\x4f\x5f\x2c\x5b\x49\xef\xb0\x07\x57\xcc\xd3\x8e\xa0\x8d\x82\xca\x3c\xa5\x44\x22\x1a\x14\xac\xe2\xe3\x9f\x92\x9f\xbb\x85\x5a\xbf\xd3\xa2\x1d\xe2\x77\xbe\xc6\xc2\xfa\x6f\x54\x72\xcb\x15\x16\xd9\x51\x0d\x91\x85\x76\x94\x44\xdb\xce\x7e\x18\x73\x55\x09\xd3\xd6\x60\x39\x9a\x1f\xc8\x46\x9f\x68\x4f\x3a\xf5\xfe\xf3\xfa\xa8\x7f\x67\x3d\x5b\xef\x54\x51\xd2\x15\x1b\x8c\x42\x8d\x78\x9e\xbc\xa3\x0e\x7a\x57\x8b\xd3\x93\xc7\xbb\xa4\xcb\xe5\xe5\xd4\x06\xd9\x0d\xf1\x36\xc2\xd7\x75\x5d\x8f\xd4\xd1\x50\x43\xed\xaf\xcb\xbe\x03\x00\x00\xff\xff\x01\x77\x18\xd4\x4f\x01\x00\x00")

func serviceAdmissionControllersvYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceAdmissionControllersvYaml,
		"Service/admission-controllerSV.yaml",
	)
}

func serviceAdmissionControllersvYaml() (*asset, error) {
	bytes, err := serviceAdmissionControllersvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Service/admission-controllerSV.yaml", size: 335, mode: os.FileMode(438), modTime: time.Unix(1553562565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceAlamedaDatahubsvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\xae\xc3\x20\x10\x44\x7b\x24\xee\xb0\x17\xb0\xe4\x5f\xb8\xe1\x1a\x5f\xfa\xfd\x18\xe6\x27\x28\xd8\xac\x16\xe2\xf3\x47\xd8\x69\x93\x6e\xb5\x6f\xf4\x66\xa0\xf9\x8f\xd6\x72\xdd\x83\x1c\x3f\xde\x3d\xf2\x9e\x82\xfc\xd2\x8e\x1c\xe9\xdd\xc6\x8e\x84\x8e\xe0\x9d\x48\xc1\xca\xd2\xce\x53\x04\xaa\x41\x50\xb0\x31\x61\x1a\x91\xfb\x73\x1d\x64\xc7\xc6\x8f\xa0\x29\x22\x83\xfc\x33\xd1\xd0\xab\x21\x7b\xd7\x94\xf1\x74\x6a\xb5\x7e\xd9\xa7\xb7\xe5\x66\x1a\xaf\xb6\xc1\x82\x2c\xf3\xbc\xcc\xe3\xd1\x58\x18\x7b\xb5\x2f\x5b\x5e\x01\x00\x00\xff\xff\x70\x2e\x3b\x66\xd9\x00\x00\x00")

func serviceAlamedaDatahubsvYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceAlamedaDatahubsvYaml,
		"Service/alameda-datahubSV.yaml",
	)
}

func serviceAlamedaDatahubsvYaml() (*asset, error) {
	bytes, err := serviceAlamedaDatahubsvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Service/alameda-datahubSV.yaml", size: 217, mode: os.FileMode(438), modTime: time.Unix(1553562565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceAlamedaGrafanasvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x41\x0a\xc2\x30\x10\x45\xf7\x81\xdc\x61\x2e\x50\xa8\xb8\xcb\x29\x04\xc1\xfd\x37\xf9\x2d\xc1\x34\x09\x93\xa1\xe7\x17\xdb\x95\x0b\xdd\x3d\xe6\xc1\x9b\x8f\x9e\x1f\xd4\x91\x5b\x0d\xb2\x5f\xbc\x7b\xe5\x9a\x82\xdc\xa9\x7b\x8e\xf4\x6e\xa3\x21\xc1\x10\xbc\x13\x29\x78\xb2\x8c\x03\x45\xd0\x7b\x10\x14\x6c\x4c\x98\x56\xc5\x82\x8a\x8f\xa9\xd8\xf8\x53\x8c\x8e\xc8\x20\x0b\x13\x15\xd6\x14\xd9\xbb\xd1\x19\x8f\x66\x6f\x6a\x67\x7d\x3a\x38\xc8\x75\x9e\xe7\xf3\x9b\x41\x57\xda\xed\xeb\x3a\x58\x18\xad\xe9\x9f\x41\xf2\x0e\x00\x00\xff\xff\x45\x9d\xf7\x51\xdf\x00\x00\x00")

func serviceAlamedaGrafanasvYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceAlamedaGrafanasvYaml,
		"Service/alameda-grafanaSV.yaml",
	)
}

func serviceAlamedaGrafanasvYaml() (*asset, error) {
	bytes, err := serviceAlamedaGrafanasvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Service/alameda-grafanaSV.yaml", size: 223, mode: os.FileMode(438), modTime: time.Unix(1553562565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceAlamedaInfluxdbsvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\x41\x6a\xc4\x30\x0c\x05\xd0\x7d\x20\x77\xf0\x05\x9c\xb6\x9b\x32\xf8\x14\x85\x42\xf7\x3f\xf6\xcf\xc4\xd4\xb1\x8d\xa4\x19\x7a\xfc\x92\x84\x52\xa6\x8b\xee\x6c\xfd\xcf\x93\xd0\xf3\x07\x45\x73\xab\xc1\xdd\x5f\xc6\xe1\x33\xd7\x14\xdc\x3b\xe5\x9e\x23\xc7\x61\xa3\x21\xc1\x10\xc6\xc1\x39\xd4\xda\x0c\x96\x5b\xd5\xe3\xef\x9c\x9e\xbd\x09\xa5\xaf\x98\x5a\x67\xd5\x35\x2f\x36\xe5\xf6\x74\x44\xf5\xea\x23\xc5\xbc\x32\x0a\xcd\x57\x6c\x0c\x0e\x05\x1b\x13\xfc\xee\xae\xb7\xd9\x5b\xd1\x5d\x2b\x98\x59\x7e\x60\xf4\xfe\x5b\xcc\x75\x29\xb7\xaf\x34\xef\xd1\x23\xf1\x37\xd1\x8e\xc8\xe0\x16\x26\x0a\xac\x09\xf2\x38\x68\x67\x3c\xd4\xde\xc4\x4e\xdf\x1f\xef\xe0\x2e\xcf\x97\xd7\x73\x9f\x41\xae\xb4\xb7\x87\xa9\xb2\x30\x5a\x93\xff\x4e\xfa\x0e\x00\x00\xff\xff\x0a\x5a\xba\x64\x3f\x01\x00\x00")

func serviceAlamedaInfluxdbsvYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceAlamedaInfluxdbsvYaml,
		"Service/alameda-influxdbSV.yaml",
	)
}

func serviceAlamedaInfluxdbsvYaml() (*asset, error) {
	bytes, err := serviceAlamedaInfluxdbsvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Service/alameda-influxdbSV.yaml", size: 319, mode: os.FileMode(438), modTime: time.Unix(1553562565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ConfigMap/grafana-datasources.yaml":                      configmapGrafanaDatasourcesYaml,
	"CustomResourceDefinition/alamedarecommendationsCRD.yaml": customresourcedefinitionAlamedarecommendationscrdYaml,
	"CustomResourceDefinition/alamedascalersCRD.yaml":         customresourcedefinitionAlamedascalerscrdYaml,
	"Deployment/admission-controllerDM.yaml":                  deploymentAdmissionControllerdmYaml,
	"Deployment/alameda-aiDM.yaml":                            deploymentAlamedaAidmYaml,
	"Deployment/alameda-datahubDM.yaml":                       deploymentAlamedaDatahubdmYaml,
	"Deployment/alameda-evictionerDM.yaml":                    deploymentAlamedaEvictionerdmYaml,
	"Deployment/alameda-grafanaDM.yaml":                       deploymentAlamedaGrafanadmYaml,
	"Deployment/alameda-influxdbDM.yaml":                      deploymentAlamedaInfluxdbdmYaml,
	"Deployment/alameda-operatorDM.yaml":                      deploymentAlamedaOperatordmYaml,
	"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml":         persistentvolumeclaimMyAlamedagrafanapvcYaml,
	"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml":        persistentvolumeclaimMyAlamedainfluxdbpvcYaml,
	"Service/admission-controllerSV.yaml":                     serviceAdmissionControllersvYaml,
	"Service/alameda-datahubSV.yaml":                          serviceAlamedaDatahubsvYaml,
	"Service/alameda-grafanaSV.yaml":                          serviceAlamedaGrafanasvYaml,
	"Service/alameda-influxdbSV.yaml":                         serviceAlamedaInfluxdbsvYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ConfigMap": &bintree{nil, map[string]*bintree{
		"grafana-datasources.yaml": &bintree{configmapGrafanaDatasourcesYaml, map[string]*bintree{}},
	}},
	"CustomResourceDefinition": &bintree{nil, map[string]*bintree{
		"alamedarecommendationsCRD.yaml": &bintree{customresourcedefinitionAlamedarecommendationscrdYaml, map[string]*bintree{}},
		"alamedascalersCRD.yaml":         &bintree{customresourcedefinitionAlamedascalerscrdYaml, map[string]*bintree{}},
	}},
	"Deployment": &bintree{nil, map[string]*bintree{
		"admission-controllerDM.yaml": &bintree{deploymentAdmissionControllerdmYaml, map[string]*bintree{}},
		"alameda-aiDM.yaml":           &bintree{deploymentAlamedaAidmYaml, map[string]*bintree{}},
		"alameda-datahubDM.yaml":      &bintree{deploymentAlamedaDatahubdmYaml, map[string]*bintree{}},
		"alameda-evictionerDM.yaml":   &bintree{deploymentAlamedaEvictionerdmYaml, map[string]*bintree{}},
		"alameda-grafanaDM.yaml":      &bintree{deploymentAlamedaGrafanadmYaml, map[string]*bintree{}},
		"alameda-influxdbDM.yaml":     &bintree{deploymentAlamedaInfluxdbdmYaml, map[string]*bintree{}},
		"alameda-operatorDM.yaml":     &bintree{deploymentAlamedaOperatordmYaml, map[string]*bintree{}},
	}},
	"PersistentVolumeClaim": &bintree{nil, map[string]*bintree{
		"my-alamedagrafanaPVC.yaml":  &bintree{persistentvolumeclaimMyAlamedagrafanapvcYaml, map[string]*bintree{}},
		"my-alamedainfluxdbPVC.yaml": &bintree{persistentvolumeclaimMyAlamedainfluxdbpvcYaml, map[string]*bintree{}},
	}},
	"Service": &bintree{nil, map[string]*bintree{
		"admission-controllerSV.yaml": &bintree{serviceAdmissionControllersvYaml, map[string]*bintree{}},
		"alameda-datahubSV.yaml":      &bintree{serviceAlamedaDatahubsvYaml, map[string]*bintree{}},
		"alameda-grafanaSV.yaml":      &bintree{serviceAlamedaGrafanasvYaml, map[string]*bintree{}},
		"alameda-influxdbSV.yaml":     &bintree{serviceAlamedaInfluxdbsvYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
