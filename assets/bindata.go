// Code generated by go-bindata. DO NOT EDIT.
// sources:
// CustomResourceDefinition/alamedarecommendationsCRD.yaml
// CustomResourceDefinition/alamedascalersCRD.yaml
// ClusterRole/admission-controllerCR.yaml
// ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml
// ClusterRole/alameda-datahubCR.yaml
// ClusterRole/alameda-evictionerCR.yaml
// ClusterRole/alameda-grafanaCR.yaml
// ClusterRole/alameda-operatorCR.yaml
// ServiceAccount/admission-controllerSA.yaml
// ServiceAccount/alameda-aiSA.yaml
// ServiceAccount/alameda-datahubSA.yaml
// ServiceAccount/alameda-evictionerSA.yaml
// ServiceAccount/alameda-grafanaSA.yaml
// ServiceAccount/alameda-operatorSA.yaml
// ClusterRoleBinding/admission-controllerCRB.yaml
// ClusterRoleBinding/alameda-datahubCRB.yaml
// ClusterRoleBinding/alameda-evictionerCRB.yaml
// ClusterRoleBinding/alameda-grafanaCRB.yaml
// ClusterRoleBinding/alameda-operatorCRB.yaml
// Secret/admission-controller-tls.yaml
// Secret/alameda-influxdb.yaml
// ConfigMap/grafana-datasources.yaml
// PersistentVolumeClaim/admission-controller-log.yaml
// PersistentVolumeClaim/alameda-ai-log.yaml
// PersistentVolumeClaim/alameda-datahub-log.yaml
// PersistentVolumeClaim/alameda-evictioner-log.yaml
// PersistentVolumeClaim/alameda-operator-log.yaml
// PersistentVolumeClaim/my-alamedagrafanaPVC.yaml
// PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml
// Service/admission-controllerSV.yaml
// Service/alameda-datahubSV.yaml
// Service/alameda-grafanaSV.yaml
// Service/alameda-influxdbSV.yaml
// Deployment/admission-controllerDM.yaml
// Deployment/alameda-aiDM.yaml
// Deployment/alameda-datahubDM.yaml
// Deployment/alameda-evictionerDM.yaml
// Deployment/alameda-grafanaDM.yaml
// Deployment/alameda-influxdbDM.yaml
// Deployment/alameda-operatorDM.yaml

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCustomResourceDefinitionAlamedarecommendationsCRDyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x3d\x8f\xdb\x30\x0c\xdd\xf5\x2b\x88\xec\x71\x6b\x74\x29\xbc\x1d" +
	"\xda\xa5\xcb\xa1\xb8\x02\xb7\x14\x1d\x18\x89\xcd\xb1\x27\x8b\x2a\x45\x07\xbd\x7f\x5f\xd8\x8a\xf3\x71\x89\x13\x4e" +
	"\xf6\x13\xf5\xde\xe3\x87\x30\xf3\x33\x69\x61\x49\x1d\x60\x66\xfa\x67\x94\xc6\xbf\xd2\xbc\x7e\x2e\x0d\xcb\x87\x5d" +
	"\xbb\x21\xc3\xd6\xbd\x72\x0a\x1d\x7c\x19\x8a\x49\xff\x44\x45\x06\xf5\xf4\x95\x7e\x73\x62\x63\x49\xae\x27\xc3\x80" +
	"\x86\x9d\x03\x88\xb8\xa1\x58\xc6\x2f\x00\x2f\xc9\x54\x62\x24\x5d\x9b\x48\x9c\x69\x3b\x58\xb5\xcd\xc7\x95\x03\x48" +
	"\xd8\x53\x07\x18\xb1\xa7\x80\x4a\x5e\xfa\x9e\x52\x40\x9b\x3c\xe0\x60\x52\x3c\x46\x4e\xdb\x66\x64\x42\x4e\xa4\xa5" +
	"\x41\x76\x25\x93\x1f\x15\xb6\x2a\x43\xee\x60\x39\xb1\x2a\xec\xdd\xd4\x22\x1e\xaa\xd8\xd3\x99\xd8\x74\x9e\xe3\xa0" +
	"\x18\x97\xec\x38\x80\xe2\x25\x53\x07\x8f\x23\x65\x46\x4f\xc1\x01\xec\x30\x72\xcd\xa8\x22\x92\x29\x3d\x7c\xff\xf6" +
	"\xfc\xe9\x87\x7f\xa1\x1e\x2b\x08\x90\x55\x32\xa9\xf1\xec\x65\x8c\x93\xee\x1f\x30\x00\x7b\x1b\x35\x8a\x29\xa7\xed" +
	"\x01\x9e\xac\xdf\x4b\x3a\x9d\xc2\x79\xa2\x6c\xfe\x90\xb7\x03\x3c\xb7\x6f\x8e\x6b\xe6\xe6\xf1\xd5\x5e\x9e\xe3\x00" +
	"\x6c\xd4\x5f\x80\xcb\x44\x35\xa6\x61\x5f\xc1\x17\xca\x39\x86\xee\x37\xee\x2a\xeb\x42\x8d\xc7\xbb\x7f\x07\x56\x0a" +
	"\x97\x57\xd7\x93\xa1\x0b\xf8\x06\x5b\x3d\x42\x55\x7c\x73\xb7\x15\xd6\x27\xbd\xbb\x3b\x0d\x43\x1b\xca\x8d\xa1\xed" +
	"\xe6\x27\xba\x6b\x31\xe6\x17\x6c\xdd\xf1\x0a\x7a\x4f\xd9\x28\x3c\xbe\x5f\xf3\xd5\xea\x6c\xa7\xa7\x5f\x2f\x29\x4c" +
	"\x0f\xb6\x74\xf0\xf3\xd7\xb8\xd0\x26\x4a\x61\xbf\x84\x13\xf8\x3f\x00\x00\xff\xff\xc3\x68\x72\x63\x12\x04\x00\x00" +
	"")

func bindataCustomResourceDefinitionAlamedarecommendationsCRDyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCustomResourceDefinitionAlamedarecommendationsCRDyaml,
		"CustomResourceDefinition/alamedarecommendationsCRD.yaml",
	)
}



func bindataCustomResourceDefinitionAlamedarecommendationsCRDyaml() (*asset, error) {
	bytes, err := bindataCustomResourceDefinitionAlamedarecommendationsCRDyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "CustomResourceDefinition/alamedarecommendationsCRD.yaml",
		size: 1042,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCustomResourceDefinitionAlamedascalersCRDyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x41\x8f\x2b\x35\x0c\xbe\xcf\xaf\xb0\xca\x61\x2f\x74\x4a\xc5\x05" +
	"\xcd\x01\xe9\xa9\x70\x58\x21\x9e\xd0\x2e\x7a\x17\xc4\xc1\x93\x78\xda\xb0\x89\x1d\x12\x4f\x45\xf9\xf5\x28\x99\xb6" +
	"\xdb\x99\xd7\xe5\x2d\x12\x39\x4d\xbe\x71\x3e\x3b\x9f\xed\x18\xa3\xfb\x44\x29\x3b\xe1\x0e\x30\x3a\xfa\x4b\x89\xcb" +
	"\x2e\xb7\x2f\xdf\xe5\xd6\xc9\xe6\xb8\xed\x49\x71\xdb\xbc\x38\xb6\x1d\xec\xc6\xac\x12\x9e\x28\xcb\x98\x0c\xfd\x40" +
	"\x83\x63\xa7\x4e\xb8\x09\xa4\x68\x51\xb1\x03\x00\x68\x00\x3c\xf6\xe4\x73\xd7\x94\xad\x11\xd6\x24\xde\x53\x5a\xab" +
	"\x88\xbf\x50\x77\xb0\xda\xb6\xdf\xac\x1a\x00\xc6\x40\x1d\xa0\xc7\x40\x16\xb3\x41\x4f\x29\xb7\x38\xaa\x94\x6f\xc7" +
	"\xfb\xb6\x30\xa0\xe3\x0a\xbb\x26\x47\x32\x85\x79\x9f\x64\x8c\x1d\xbc\x6d\x38\x31\x9f\xa3\x98\x2e\xf0\x61\x72\xf2" +
	"\x5c\x9d\x54\x3c\xfa\x31\xa1\x5f\xba\x6f\x00\xb2\x91\x48\x1d\x7c\x2c\x14\x11\x0d\xd9\x06\xe0\x88\xde\x59\x2c\x37" +
	"\x9e\x48\x25\x12\x7f\xf8\xe5\xf1\xd3\xb7\xcf\xe6\x40\x01\x27\x10\x20\x26\x89\x94\xd4\x5d\x7c\x97\x75\xa3\xf4\x15" +
	"\x03\xb0\x94\x4d\x72\xb1\x32\xc2\xf7\xeb\x9b\x3f\x00\x0f\x85\x79\x3a\x02\xb6\x48\x4d\x19\xf4\x40\x70\x9c\x30\xb2" +
	"\x90\xab\x57\x90\x01\xf4\xe0\x32\x24\x8a\x89\x32\xb1\xd6\x08\x67\x5c\x32\x00\x32\x48\xff\x07\x19\x6d\xe1\x99\x52" +
	"\x21\x81\x7c\x90\xd1\xdb\x92\xa0\x23\x25\x85\x44\x46\xf6\xec\xfe\xbe\x32\x67\x50\xa9\x2e\x3d\x2a\x65\x9d\x31\x3a" +
	"\x56\x4a\x8c\xbe\x68\x32\xd2\xd7\x80\x6c\x21\xe0\x09\x12\x15\x1f\x30\xf2\x0d\x5b\x35\xc9\x2d\xfc\x2c\x89\xc0\xf1" +
	"\x20\x1d\x1c\x54\x63\xee\x36\x9b\xbd\xd3\x4b\xa9\x19\x09\x61\x64\xa7\xa7\x4d\xad\x18\xd7\x8f\x2a\x29\x6f\x2c\x1d" +
	"\xc9\x6f\x30\xba\x75\x8d\x93\xb5\x96\x67\xb0\x5f\xa5\x73\x19\xe6\x87\x9b\xc0\xf4\x54\x92\x96\x35\x39\xde\x5f\xe1" +
	"\x9a\xfb\xf7\xaa\xfe\x93\x63\x0b\x2e\x03\x9e\x59\xa6\xe8\x5f\xc5\x2d\x50\xd1\xe4\xe9\xc7\xe7\x5f\xe1\x12\x43\x4d" +
	"\xc0\x5c\xf1\xaa\xf5\xeb\xb1\xfc\x2a\x7b\x91\xc9\xf1\x40\x69\x4a\xdb\x90\x24\x54\x46\x62\x1b\xc5\xb1\xd6\x8d\xf1" +
	"\x8e\x78\x2e\x79\x1e\xfb\xe0\xb4\xe4\xf9\xcf\x91\xb2\x96\xec\xb4\xb0\x43\x66\x51\xe8\x09\xc6\x68\x51\xc9\xb6\xf0" +
	"\xc8\xb0\xc3\x40\x7e\x87\x99\xfe\x6f\xd1\x8b\xbe\x79\x5d\x04\xfd\xb2\xec\xd7\x47\xe1\x33\xc3\x49\x9c\x2b\x7c\xe9" +
	"\xe8\xcb\xba\xd7\x3f\x65\x99\xd9\xf3\x73\xa7\x9d\xde\x0c\xa5\x2c\x62\xec\x3d\xdd\x37\xef\x45\x3c\xe1\xbc\x67\xa2" +
	"\x78\x67\x4e\x4b\x7b\xe2\x31\x2c\xb1\x35\x64\x2d\xdc\x9f\xc1\x46\x42\x44\xa3\xef\x8d\x30\x93\x27\xa3\x92\x96\xfc" +
	"\xb3\x7a\x7d\x78\x0c\x51\x92\x22\x6b\x07\x4f\x23\xc3\x2a\xe0\x0b\xad\x4a\xa7\x26\xda\x13\x53\x42\x25\x30\x62\x09" +
	"\x70\x50\x4a\x10\xc4\xba\xe1\x34\x55\x6d\xa9\x36\xe7\xe9\xe1\x6e\x40\x8b\xa4\x40\xad\x33\x97\x68\xd6\x3a\xeb\x6b" +
	"\x90\x33\x70\xd2\xf6\x8b\x79\x56\xd4\x31\xbf\x27\xd3\xe7\xd7\x78\x77\x1d\x1d\x4b\x49\xde\x3a\x38\xc9\x15\xbd\x9c" +
	"\x02\xb1\x1a\xe1\xc1\xed\xef\x98\xbc\x79\xe7\x25\xc3\x7f\x3d\x7b\x4f\xb3\x49\xa2\x1b\xce\x7f\xf9\x77\x8e\xf8\x7d" +
	"\x09\x5a\xc0\xc7\xcb\x24\x3f\x6e\xd1\xc7\x03\x6e\x9b\x57\xc1\xd1\x18\x8a\x4a\xf6\xe3\x72\x22\xae\x56\xb3\x31\x58" +
	"\xb7\x46\xd8\xd6\xb9\x9e\x3b\xf8\xed\xf7\x32\x0b\x55\x12\xd9\x73\xc3\x55\xf0\x9f\x00\x00\x00\xff\xff\x75\xf1\x8d" +
	"\xab\x39\x08\x00\x00")

func bindataCustomResourceDefinitionAlamedascalersCRDyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCustomResourceDefinitionAlamedascalersCRDyaml,
		"CustomResourceDefinition/alamedascalersCRD.yaml",
	)
}



func bindataCustomResourceDefinitionAlamedascalersCRDyaml() (*asset, error) {
	bytes, err := bindataCustomResourceDefinitionAlamedascalersCRDyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "CustomResourceDefinition/alamedascalersCRD.yaml",
		size: 2105,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAdmissioncontrollerCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x31\x6f\x84\x30\x0c\x85\x77\x7e\x45\x74\x3b\x54\xdd\x2a\xd6\x0e" +
	"\xdd\x3b\x74\xf7\x25\x06\x2c\x42\x1c\xd9\xce\x55\xed\xaf\xaf\x80\x0a\x18\x8a\x7a\x55\x99\x78\x91\x5f\xbe\xf7\x62" +
	"\xc8\xf4\x86\xa2\xc4\xa9\x75\x72\x05\xdf\x40\xb1\x81\x85\x3e\xc1\x88\x53\x33\x3e\x69\x43\xfc\x70\x7b\xac\x46\x4a" +
	"\xa1\x75\xcf\xb1\xa8\xa1\xbc\x72\xc4\x6a\x42\x83\x00\x06\x6d\xe5\x5c\x82\x09\x5b\xd7\x61\x40\x01\x63\x01\xaa\x21" +
	"\x4c\xa4\xf3\xbd\xb5\xe7\x64\xc2\x31\xa2\x54\x52\x22\xea\x3c\x5f\x3b\xc8\xf4\x22\x5c\xf2\x22\xe7\xaf\x76\x97\xcd" +
	"\x23\xd8\x93\x9a\x1c\x33\x5c\x96\x31\x41\xe5\x22\x1e\x0f\xae\xa9\x18\x18\xa5\xfe\x1d\xaf\x03\xf3\xe8\x39\x75\xd4" +
	"\x97\xd5\xab\xcb\xd4\x0d\xe5\x7a\x30\xf4\x68\xdb\xbf\x17\x04\xc3\x4d\x96\x1c\x56\xf9\x73\xbe\xd3\x0c\x99\xc3\xaf" +
	"\xa8\x48\xba\x8b\x0c\xe6\x87\x33\x0e\xe4\xac\x67\x24\xc1\x1c\xc9\x83\xa2\xe9\x76\x16\x30\x47\xfe\x98\x30\xd9\xbd" +
	"\x21\xfe\x58\xef\x1b\x3a\xbf\xe8\xbe\xcc\x7f\xb1\xe6\x8a\x0d\x67\x4c\x3a\x50\x67\x0d\xf1\x19\x7a\xef\xb6\x2e\xf6" +
	"\x2e\xea\x57\x00\x00\x00\xff\xff\x22\xc3\x4a\xb8\xd5\x02\x00\x00")

func bindataClusterRoleAdmissioncontrollerCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAdmissioncontrollerCRyaml,
		"ClusterRole/admission-controllerCR.yaml",
	)
}



func bindataClusterRoleAdmissioncontrollerCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAdmissioncontrollerCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/admission-controllerCR.yaml",
		size: 725,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAggregatealamedaadmineditalamedaCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x4f\xbd\x4e\xf4\x30\x10\xec\xfd\x14\xab\xeb\x93\x4f\x5f\x87\xdc\x52" +
	"\xd0\x53\xd0\xef\xd9\xa3\xdc\xea\x6c\x6f\xb4\x5e\x1f\x12\x4f\x8f\x2e\x21\xd0\x81\x90\xa8\x3c\xf2\xce\x2f\xaf\xf2" +
	"\x02\xeb\xa2\x2d\x92\x9d\x39\xcd\x3c\xfc\xa2\x26\x6f\xec\xa2\x6d\xbe\x3e\xf4\x59\xf4\xdf\xed\x7f\xb8\x4a\xcb\x91" +
	"\x1e\xcb\xe8\x0e\x7b\xd6\x82\x50\xe1\x9c\xd9\x39\x06\xa2\xc6\x15\x91\x78\x59\x0c\x0b\x3b\x26\x2e\x5c\x91\x79\xe2" +
	"\x5c\xa5\x4d\xc8\xe2\xc7\x57\x20\x2a\x7c\x46\xe9\x77\x19\x7d\x93\xf9\x65\xe6\xba\xfb\x44\x3a\xb9\x0d\x9c\x7e\x23" +
	"\xbc\x47\x7f\xea\x6c\x14\xf4\x18\x26\xe2\x55\x9e\x4c\xc7\xba\x95\x98\x88\x87\x6b\x4f\x5c\xa4\x2d\x73\xd2\xe6\x2c" +
	"\x0d\xd6\x67\x96\x40\x64\xe8\x3a\x2c\xe1\xa0\xee\x2b\xee\x6c\x58\x0f\x44\x37\xd8\xf9\xe3\xb6\xc0\xb7\xb7\x48\xdf" +
	"\x41\x32\xb0\x63\x83\x63\xcd\x07\xcc\x28\x70\xfc\x45\x0b\x43\xd2\x5a\xd1\xf2\xb6\xff\xa7\x36\xaf\xec\xe9\xf2\x1e" +
	"\x00\x00\xff\xff\x36\x9a\x6e\xc2\xf0\x01\x00\x00")

func bindataClusterRoleAggregatealamedaadmineditalamedaCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAggregatealamedaadmineditalamedaCRyaml,
		"ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml",
	)
}



func bindataClusterRoleAggregatealamedaadmineditalamedaCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAggregatealamedaadmineditalamedaCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml",
		size: 496,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAlamedadatahubCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x31\x4f\xc3\x40\x0c\x85\xf7\xfb\x15\x56\x99\x13\xc4\x86\xb2\x32" +
	"\xb0\x22\x06\x76\x37\xf7\xda\x58\xcd\x9d\x0f\xdb\x57\x09\x7e\x3d\x6a\xaa\x16\x75\xb2\xf4\xfc\xf4\x7d\xb2\xb9\xc9" +
	"\x17\xcc\x45\xeb\x44\xb6\xe7\x79\xe4\x1e\x8b\x9a\xfc\x72\x88\xd6\xf1\xf4\xea\xa3\xe8\xf3\xf9\x25\x9d\xa4\xe6\x89" +
	"\xde\xd6\xee\x01\xfb\xd4\x15\xa9\x20\x38\x73\xf0\x94\x88\x2a\x17\x4c\x74\x40\x86\x71\xa8\xb1\x0c\xbc\x72\x41\xe6" +
	"\xe1\xd2\x58\xfa\x3e\x59\x5f\xe1\x53\x7a\xa2\x0f\x58\x11\xbf\x18\xe9\xa0\x46\xdf\x1d\xf6\x43\xcd\xb4\x20\x16\x74" +
	"\xa7\x5e\x33\x6c\x03\x7a\xe3\x19\xa4\x0d\xd5\x17\x39\xc4\x50\xb4\x4a\xa8\x49\x3d\x52\x1a\x88\x9b\xbc\x9b\xf6\xe6" +
	"\x13\x25\xa2\x81\x76\xbb\x44\x64\x70\xed\x36\xe3\x16\xde\x31\x9e\x88\xce\xb0\xfd\x6d\x71\x44\x3c\x30\xb6\x90\x7b" +
	"\xa8\xcf\xbc\x4a\x3d\x8e\xb3\xd6\x60\xa9\x30\x1f\x59\x1e\xc8\xd7\xea\xf5\x3c\xc3\xac\xa5\xa0\xe6\xed\x5d\xff\x92" +
	"\xbb\xe3\x32\x7b\xcb\x1c\xf8\x0b\x00\x00\xff\xff\x44\xa5\x3d\x5d\x6a\x01\x00\x00")

func bindataClusterRoleAlamedadatahubCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAlamedadatahubCRyaml,
		"ClusterRole/alameda-datahubCR.yaml",
	)
}



func bindataClusterRoleAlamedadatahubCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAlamedadatahubCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-datahubCR.yaml",
		size: 362,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555062656, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAlamedaevictionerCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x31\x6b\x03\x31\x0c\x46\x77\xff\x0a\x91\xfd\xae\x74\x2b\x5e\x3b" +
	"\x74\xef\xd0\x5d\xb1\xbf\xa6\x22\xb6\x75\x48\x72\x86\xfe\xfa\x72\xe1\x86\xc2\x4d\x82\x87\xf4\x78\xe2\x4d\xbe\x60" +
	"\x2e\x3a\x32\xd9\x95\xcb\xca\x33\x7e\xd4\xe4\x97\x43\x74\xac\xf7\x37\x5f\x45\x5f\x1e\xaf\xe9\x2e\xa3\x66\x7a\x6f" +
	"\xd3\x03\xf6\xa9\x0d\xa9\x23\xb8\x72\x70\x4e\x44\x83\x3b\x32\x7d\xa3\xc2\x38\xd4\x58\x16\x6e\xdc\x51\x79\xc1\x43" +
	"\xca\xae\x82\x25\x9b\x0d\x9e\xd3\x42\xbc\xc9\x87\xe9\xdc\x7c\x3f\x5d\xe8\x72\x49\x44\x06\xd7\x69\x05\x07\xdb\xb4" +
	"\x7a\x22\x7a\xc0\xae\x07\xb9\x21\x9e\xb3\xa2\x21\x70\xb6\xf0\x0c\xf5\xc2\x4d\xc6\x6d\x2d\x3a\x82\x65\xc0\x7c\x65" +
	"\x39\xcb\x8f\xb6\x7d\x1b\xe6\xff\x91\xa1\x68\xef\x18\xf5\xf9\xfe\xb9\xe0\x2f\x00\x00\xff\xff\x1e\xb7\xab\xd4\x2f" +
	"\x01\x00\x00")

func bindataClusterRoleAlamedaevictionerCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAlamedaevictionerCRyaml,
		"ClusterRole/alameda-evictionerCR.yaml",
	)
}



func bindataClusterRoleAlamedaevictionerCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAlamedaevictionerCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-evictionerCR.yaml",
		size: 303,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555896018, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAlamedagrafanaCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xa1\x6e\xc5\x30\x0c\x46\x61\xee\xa7\xb0\x2e\x4f\xa7\xb1\x29\x74" +
	"\x60\x7c\x60\xfc\xbf\x8d\xdb\x59\x4d\xe3\xc8\x4e\x0a\xf6\xf4\xd3\x05\xa5\xe7\x48\x1f\xba\xfe\x88\x87\x5a\xcb\xec" +
	"\x4f\xac\x0b\xe6\xf8\x35\xd7\x3f\x0c\xb5\xb6\x1c\x1f\xb1\xa8\xbd\x5d\xef\x74\x68\x2b\x99\x3f\xeb\x8c\x21\xfe\x6d" +
	"\x55\xe8\x94\x81\x82\x81\x4c\xcc\x0d\xa7\x64\xde\xa4\x88\x63\x98\x43\x13\x2a\x4e\x29\x48\xbb\x63\x43\x03\xf9\xac" +
	"\x12\x99\x12\xa3\xeb\x97\xdb\xec\x91\x99\x98\x13\x3f\x1e\xc4\xec\x12\x36\x7d\x95\x3b\xbe\xbc\xe8\x58\x25\x88\xf9" +
	"\x12\x7f\xde\x63\x97\xf1\x1f\x00\x00\xff\xff\x37\xd4\xd9\xbf\xb3\x00\x00\x00")

func bindataClusterRoleAlamedagrafanaCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAlamedagrafanaCRyaml,
		"ClusterRole/alameda-grafanaCR.yaml",
	)
}



func bindataClusterRoleAlamedagrafanaCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAlamedagrafanaCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-grafanaCR.yaml",
		size: 179,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555896241, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleAlamedaoperatorCRyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x3d\x8f\xdb\x30\x0c\xdd\xfd\x2b\x84\xeb\x1c\x1f\xba\x15\x59\x3b" +
	"\x74\x2d\x3a\x74\xe7\x49\xcf\x0e\x11\x59\x54\x29\x2a\xd7\xbb\x5f\x5f\xf8\xe3\x9c\xb4\x36\xda\xe0\x86\x4e\x79\xa0" +
	"\x22\xbd\x47\xbe\x47\x53\xe6\xef\xd0\xc2\x92\x8e\x4e\x9f\xc8\xb7\x54\xed\x24\xca\xaf\x64\x2c\xa9\x3d\x7f\x2a\x2d" +
	"\xcb\xe3\xe5\x63\x73\xe6\x14\x8e\xee\x73\xac\xc5\xa0\xdf\x24\xa2\x19\x60\x14\xc8\xe8\xd8\x38\x97\x68\xc0\xd1\x75" +
	"\x08\x50\x32\x51\xe2\x03\x45\x1a\x10\xe8\x20\x79\x2e\x35\x5a\x23\xca\xb1\x39\x38\xca\xfc\x45\xa5\xe6\x32\x5e\x3c" +
	"\xb8\x87\x87\xc6\x39\x45\x91\xaa\x1e\x4b\x2d\x49\x40\x99\x50\x96\x30\x03\x45\x8e\xec\x27\x55\x5e\x92\xa9\xc4\x08" +
	"\x1d\x8f\x2e\xd0\xa7\xe5\x5a\x0f\x9b\x7e\x23\x97\x19\x3c\x93\xf9\xd3\x96\x92\x72\x2e\x5b\xd2\x85\xa1\xc0\x66\xc6" +
	"\x80\x1c\xe5\x65\x40\xb2\xfb\x68\x46\xe4\x15\x64\x98\x60\xcd\xe1\x0d\xe6\xf5\x3c\x20\xc2\xb0\xaf\xa8\x95\x8c\x54" +
	"\x4e\xdc\x59\xcb\xb2\x95\x77\x95\xe3\x25\x75\xdc\xbf\xb7\xf7\x6a\x52\x3c\x45\x4e\x7d\x3b\x0e\x92\x38\x41\x4b\x4b" +
	"\xbc\x65\x5c\x2c\x1c\xff\x3d\x8f\x7a\x2d\x29\xbc\x0c\x03\x52\x98\xfc\xf8\x0f\xe3\x79\xaf\xe8\xc7\x8e\x13\x45\x7e" +
	"\xdd\x44\x65\xa1\xff\xe0\xbe\x42\x07\x2e\xe3\x02\xb8\x4e\xd4\xfd\xa8\xd0\x17\x97\x55\x06\xd8\x09\xb5\xb8\x9a\x02" +
	"\x74\xca\x77\xc9\xe4\xe1\x56\x93\x0e\x83\x24\x36\x51\x4e\xbd\xfb\x4d\xb1\xdb\x8b\xf5\x5c\x5c\x9f\xb9\xaa\x71\xeb" +
	"\xcc\x76\x42\xc1\xf8\x69\x48\xa3\xb8\xb2\xac\xe2\xb6\x61\x5f\x8b\xc9\xf0\x56\x0c\xe8\x38\xf1\x5f\x5c\xd9\x5a\x70" +
	"\xd7\x46\x16\x78\xc5\x9f\x8b\x70\xf3\xd6\xd5\xe3\xc9\xf6\x6d\x2f\x61\x99\xb2\xa2\xe7\x62\x7a\xfb\x79\xd9\xb2\x5d" +
	"\x28\xf2\x98\xad\xd4\x3f\xe3\xe9\x24\x72\x9e\x23\x5f\x75\x2f\x6f\xff\x8a\xd7\xbe\xa0\xfd\x26\xf5\xc2\xb7\xe6\xdc" +
	"\xfd\xfe\xaf\x00\x00\x00\xff\xff\xf6\x73\x3e\x58\x47\x05\x00\x00")

func bindataClusterRoleAlamedaoperatorCRyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleAlamedaoperatorCRyaml,
		"ClusterRole/alameda-operatorCR.yaml",
	)
}



func bindataClusterRoleAlamedaoperatorCRyaml() (*asset, error) {
	bytes, err := bindataClusterRoleAlamedaoperatorCRyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRole/alameda-operatorCR.yaml",
		size: 1351,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAdmissioncontrollerSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\xaa\x42\x41\x0c\x05\xd0\x7e\x56\x91\x0d\xfc\xe2\xb7\xe9\x5c" +
	"\x83\x60\x7f\xc9\x5c\x21\xf8\x26\x79\x64\xe2\x5b\xbf\x08\xd6\x87\x83\xd3\x1f\xac\xed\x19\x2a\xd7\xff\x78\x79\x4c" +
	"\x95\x3b\xeb\x72\xe3\xcd\x2c\xdf\xd1\x63\xb1\x31\xd1\xd0\x21\x12\x58\x54\xc1\x5c\xbe\xbf\xe9\xcf\x32\xba\xf2\x38" +
	"\x58\x3f\xdc\x27\x8c\x2a\x4f\x4e\x16\x3a\x0b\xfe\x09\x00\x00\xff\xff\x7e\x31\x7e\x77\x63\x00\x00\x00")

func bindataServiceAccountAdmissioncontrollerSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAdmissioncontrollerSAyaml,
		"ServiceAccount/admission-controllerSA.yaml",
	)
}



func bindataServiceAccountAdmissioncontrollerSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAdmissioncontrollerSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/admission-controllerSA.yaml",
		size: 99,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAlamedaaiSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc8\x31\x0e\x02\x41\x08\x05\xd0\x7e\x4e\xc1\x05\x2c\x6c\xe9\x3c\x83" +
	"\x89\xfd\x0f\x7c\x13\xa2\xc3\x6c\x58\x9c\xf3\xdb\x6c\xfb\x70\xc4\x8b\x75\xc6\x4a\x95\x7d\x1f\x9f\x48\x57\x79\xb2" +
	"\x76\x18\x1f\x66\xeb\x97\x3d\x26\x1b\x8e\x86\x0e\x91\xc4\xa4\x0a\xbe\x98\x74\xdc\x10\x17\x9d\x07\x8c\x2a\x6f\x3a" +
	"\x0b\xbd\x0a\xf1\x0f\x00\x00\xff\xff\xaa\xc4\x7e\xde\x59\x00\x00\x00")

func bindataServiceAccountAlamedaaiSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAlamedaaiSAyaml,
		"ServiceAccount/alameda-aiSA.yaml",
	)
}



func bindataServiceAccountAlamedaaiSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAlamedaaiSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-aiSA.yaml",
		size: 89,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAlamedadatahubSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc8\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x78\x01\x0a\x5a\x77\xcc\x80" +
	"\x44\xff\x89\x3f\xc2\x82\x38\x27\x9f\x2f\xf3\x23\xa4\x6b\x1f\x36\x7f\x30\x77\x9f\xa1\xb2\xae\xed\xe3\x61\x2a\x77" +
	"\xe6\xf2\xce\x5b\xef\xf3\x88\x6a\x83\x05\x43\x41\x9b\x48\x60\x50\x05\x5f\x0c\x1a\x2e\x7f\x7d\x1f\xcf\xd3\xf7\x0d" +
	"\x9d\x2a\x2f\x1a\x13\x35\x13\xfe\x0b\x00\x00\xff\xff\x06\xa1\x23\x4a\x5e\x00\x00\x00")

func bindataServiceAccountAlamedadatahubSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAlamedadatahubSAyaml,
		"ServiceAccount/alameda-datahubSA.yaml",
	)
}



func bindataServiceAccountAlamedadatahubSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAlamedadatahubSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-datahubSA.yaml",
		size: 94,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAlamedaevictionerSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\x31\x0e\x02\x41\x08\x05\xd0\x7e\x4e\xc1\x05\x2c\x6c\xe9\x3c\x83" +
	"\x89\xfd\x0f\xf3\x4d\x88\x0e\x6c\x58\x9c\xf3\xdb\x6c\xfd\x70\xf8\x8b\x75\x7a\x86\xca\xbe\x8f\x8f\xc7\x54\x79\xb2" +
	"\xb6\x1b\x1f\x66\xf9\x8b\x1e\x8b\x8d\x89\x86\x0e\x91\xc0\xa2\x0a\xbe\x58\x9c\xb8\x71\xbb\xb5\x67\xb0\x2e\x3a\x0f" +
	"\x18\x55\xde\x9c\x2c\x74\x16\xfc\x1f\x00\x00\xff\xff\x58\x7c\x98\x9a\x61\x00\x00\x00")

func bindataServiceAccountAlamedaevictionerSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAlamedaevictionerSAyaml,
		"ServiceAccount/alameda-evictionerSA.yaml",
	)
}



func bindataServiceAccountAlamedaevictionerSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAlamedaevictionerSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-evictionerSA.yaml",
		size: 97,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAlamedagrafanaSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc8\xb1\x0d\xc2\x40\x0c\x05\xd0\xfe\xa6\xf0\x02\x14\xb4\xee\x98\x01" +
	"\x89\xfe\xcb\xfe\x41\x16\x9c\x2f\x72\x4c\xe6\xa7\x49\xfb\xb0\xc7\x8b\x75\xc4\x4a\x95\xf3\x3e\x3e\x91\xae\xf2\x64" +
	"\x9d\x61\x7c\x98\xad\x5f\xf6\x98\x6c\x38\x1a\x3a\x44\x12\x93\x2a\xf8\x62\xd2\x71\x7b\x17\x36\x24\x2e\x3f\x76\x18" +
	"\x55\x36\x3a\x0b\xbd\x0a\xf1\x0f\x00\x00\xff\xff\x5c\xef\x2c\xe0\x5e\x00\x00\x00")

func bindataServiceAccountAlamedagrafanaSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAlamedagrafanaSAyaml,
		"ServiceAccount/alameda-grafanaSA.yaml",
	)
}



func bindataServiceAccountAlamedagrafanaSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAlamedagrafanaSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-grafanaSA.yaml",
		size: 94,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555896241, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAccountAlamedaoperatorSAyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\x31\x0e\x02\x41\x08\x05\xd0\x7e\x4e\xc1\x05\x2c\x6c\xe9\x3c\x83" +
	"\x89\xfd\xcf\xf0\x4d\x88\x0e\x4c\x58\xdc\xf3\x5b\x68\xfb\x1e\xb6\x3f\x58\x87\x67\xa8\x9c\xd7\xf1\xf2\x30\x95\x3b" +
	"\xeb\xf4\xc9\xdb\x9c\xf9\x89\x1e\x8b\x0d\x43\x43\x87\x48\x60\x51\x05\x6f\x2c\x1a\x2e\xb9\x59\xe8\xac\x7f\x1c\x1b" +
	"\x93\x2a\x4f\xda\x8f\xe1\xdf\x00\x00\x00\xff\xff\x01\x08\xdb\x27\x5f\x00\x00\x00")

func bindataServiceAccountAlamedaoperatorSAyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAccountAlamedaoperatorSAyaml,
		"ServiceAccount/alameda-operatorSA.yaml",
	)
}



func bindataServiceAccountAlamedaoperatorSAyaml() (*asset, error) {
	bytes, err := bindataServiceAccountAlamedaoperatorSAyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ServiceAccount/alameda-operatorSA.yaml",
		size: 95,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingAdmissioncontrollerCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xb1\x4e\xc4\x30\x0c\xc6\xf1\x3d\x4f\xe1\x17\x68\x11\x1b\xca\x06" +
	"\x0c\xec\x45\x62\x77\x13\x17\x4c\x53\x3b\x72\x9c\x0e\x3c\x3d\xaa\x44\x07\x74\xa7\xd3\xcd\x9f\xbe\xff\x0f\x2b\x7f" +
	"\x90\x35\x56\x89\x60\x33\xa6\x11\xbb\x7f\xa9\xf1\x0f\x3a\xab\x8c\xeb\x53\x1b\x59\x1f\xf6\xc7\xb0\xb2\xe4\x08\xaf" +
	"\xa5\x37\x27\x9b\xb4\xd0\x0b\x4b\x66\xf9\x0c\x1b\x39\x66\x74\x8c\x01\x40\x70\xa3\x08\x0b\x65\x32\x74\x35\xe4\x01" +
	"\xf3\xc6\xed\xc8\x0f\x49\xc5\x4d\x4b\x21\x0b\xa6\x85\x26\x5a\x8e\x07\x56\x7e\x33\xed\xf5\x86\x1e\x00\x2e\xf0\xfb" +
	"\xad\xd6\xe7\x6f\x4a\xde\x0e\x6c\xf8\x0b\xbd\x93\xed\x9c\xe8\x39\x25\xed\xe2\x01\xe0\xac\x5d\x2d\x9c\x73\xab\x98" +
	"\xfe\x8b\xbf\x01\x00\x00\xff\xff\x96\x62\xb4\x2f\x3d\x01\x00\x00")

func bindataClusterRoleBindingAdmissioncontrollerCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingAdmissioncontrollerCRByaml,
		"ClusterRoleBinding/admission-controllerCRB.yaml",
	)
}



func bindataClusterRoleBindingAdmissioncontrollerCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingAdmissioncontrollerCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/admission-controllerCRB.yaml",
		size: 317,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingAlamedadatahubCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x31\xae\xc2\x30\x0c\xc6\xf1\x3d\xa7\xc8\x05\xda\xa7\xb7\xa1\x6c" +
	"\xc0\xc0\x5e\x24\x76\x37\x71\xa9\x69\x1a\x47\x8e\xd3\x81\xd3\xa3\x0a\x84\x04\x48\x88\xd5\xfa\xfc\xff\x41\xa6\x13" +
	"\x4a\x21\x4e\xce\x4a\x0f\xbe\x85\xaa\x23\x0b\x5d\x41\x89\x53\x3b\x6d\x4a\x4b\xfc\xb7\xfc\x9b\x89\x52\x70\x76\x1f" +
	"\x6b\x51\x94\x8e\x23\xee\x28\x05\x4a\x67\x33\xa3\x42\x00\x05\x67\xac\x4d\x30\xa3\xb3\x03\x06\x14\x50\x16\xa0\x06" +
	"\x22\xcc\x18\xa0\x59\x17\x63\xed\x8d\x70\xc4\x0e\x87\x75\x0c\x99\x0e\xc2\x35\x7f\x81\x8d\xb5\x1f\xee\x4f\x4c\xa9" +
	"\xfd\x05\xbd\x16\x67\x9a\x47\xe1\x88\xb2\x90\xc7\xad\xf7\x5c\x93\x3e\x23\xef\x8f\xf7\x7b\xc9\xe0\x5f\x85\x5b\x00" +
	"\x00\x00\xff\xff\xc4\x91\x85\x3b\x28\x01\x00\x00")

func bindataClusterRoleBindingAlamedadatahubCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingAlamedadatahubCRByaml,
		"ClusterRoleBinding/alameda-datahubCRB.yaml",
	)
}



func bindataClusterRoleBindingAlamedadatahubCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingAlamedadatahubCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-datahubCRB.yaml",
		size: 296,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingAlamedaevictionerCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x31\x0e\xc2\x30\x0c\x85\xe1\x3d\xa7\xc8\x05\x5a\xc4\x86\xb2\x01" +
	"\x03\x7b\x91\xd8\xdd\xc4\x05\xd3\x34\x8e\x1c\xa7\x03\xa7\x47\x15\x08\x09\x81\x10\xb3\xfd\xfe\x0f\x32\x9d\x50\x0a" +
	"\x71\x72\x56\x7a\xf0\x2d\x54\xbd\xb0\xd0\x0d\x94\x38\xb5\xe3\xa6\xb4\xc4\xab\x79\x6d\x46\x4a\xc1\xd9\x7d\xac\x45" +
	"\x51\x3a\x8e\xb8\xa3\x14\x28\x9d\xcd\x84\x0a\x01\x14\x9c\xb1\x36\xc1\x84\xce\x0e\x18\x50\x40\x59\x80\x1a\x88\x30" +
	"\x61\x80\x06\x67\xf2\x4b\x11\xc5\x08\x47\xec\x70\x58\xfe\x21\xd3\x41\xb8\xe6\x1f\xb6\xb1\xf6\x83\xfe\x57\x2a\xb5" +
	"\xbf\xa2\xd7\xe2\x4c\xf3\x8c\x1c\x51\x66\xf2\xb8\xf5\x9e\x6b\xd2\x57\xe7\xcb\xf6\x71\x2a\x19\xfc\xbb\x73\x0f\x00" +
	"\x00\xff\xff\x2e\xae\x54\xf5\x31\x01\x00\x00")

func bindataClusterRoleBindingAlamedaevictionerCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingAlamedaevictionerCRByaml,
		"ClusterRoleBinding/alameda-evictionerCRB.yaml",
	)
}



func bindataClusterRoleBindingAlamedaevictionerCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingAlamedaevictionerCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-evictionerCRB.yaml",
		size: 305,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingAlamedagrafanaCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x31\x4e\xc6\x30\x0c\xc5\xf1\x3d\xa7\xc8\x05\x5a\xc4\x86\xb2\x01" +
	"\x03\xfb\x87\xc4\xfe\x9a\xb8\xc5\x34\xb5\x23\xc7\xe9\xc0\xe9\x11\x02\x21\x01\x12\x62\xb5\xfc\xfe\x3f\x34\x7e\x22" +
	"\xeb\xac\x92\xa2\x2d\xc8\x33\x86\x3f\xab\xf1\x2b\x9c\x55\xe6\xfd\xa6\xcf\xac\x57\xe7\x75\xd8\x59\x4a\x8a\xf7\x75" +
	"\x74\x27\xbb\x68\xa5\x3b\x96\xc2\xb2\x85\x83\x1c\x05\x8e\x14\x62\x14\x1c\x94\xe2\x4a\x85\x0c\xae\x06\x9e\x50\x71" +
	"\x50\xc1\xb4\x19\x56\x08\x82\x69\xa5\x0b\xad\xef\xcf\x68\xfc\x60\x3a\xda\x1f\x70\x88\xf1\x97\xfb\x2f\xa6\x8f\xe5" +
	"\x85\xb2\xf7\x14\xa6\xcf\xc2\x23\xd9\xc9\x99\x6e\x73\xd6\x21\xfe\x15\xf9\x39\xfc\xb8\xf7\x86\xfc\x5d\x78\x0b\x00" +
	"\x00\xff\xff\x75\x1b\xd8\xd0\x28\x01\x00\x00")

func bindataClusterRoleBindingAlamedagrafanaCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingAlamedagrafanaCRByaml,
		"ClusterRoleBinding/alameda-grafanaCRB.yaml",
	)
}



func bindataClusterRoleBindingAlamedagrafanaCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingAlamedagrafanaCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-grafanaCRB.yaml",
		size: 296,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555896241, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusterRoleBindingAlamedaoperatorCRByaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xbd\x0a\xc2\x30\x10\xc0\xf1\x3d\x4f\x91\x17\x68\xc5\x4d\xb2\xa9" +
	"\x83\x7b\x05\xf7\x6b\x72\xd5\xb3\x69\x2e\x5c\x2e\x1d\x7c\x7a\x91\x8a\x20\x05\x71\xbd\x8f\xff\x0f\x32\x5d\x50\x0a" +
	"\x71\x72\x56\x7a\xf0\x2d\x54\xbd\xb1\xd0\x03\x94\x38\xb5\xe3\xae\xb4\xc4\x9b\x79\x6b\x46\x4a\xc1\xd9\x63\xac\x45" +
	"\x51\x3a\x8e\x78\xa0\x14\x28\x5d\xcd\x84\x0a\x01\x14\x9c\xb1\x36\xc1\x84\xce\x0e\x18\x50\x40\x59\x80\x1a\x88\x30" +
	"\x61\x80\x86\xf3\x32\x32\xc2\x11\x3b\x1c\x5e\xd7\x90\xe9\x24\x5c\xf3\x0f\xd9\x58\xbb\x82\xff\x73\x4a\xed\xef\xe8" +
	"\xb5\x38\xd3\xbc\x13\x67\x94\x99\x3c\xee\xbd\xe7\x9a\xf4\x53\x59\x7d\x2e\x8b\x92\xc1\x7f\x1b\xcf\x00\x00\x00\xff" +
	"\xff\xa8\xcd\x05\x0d\x2b\x01\x00\x00")

func bindataClusterRoleBindingAlamedaoperatorCRByamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusterRoleBindingAlamedaoperatorCRByaml,
		"ClusterRoleBinding/alameda-operatorCRB.yaml",
	)
}



func bindataClusterRoleBindingAlamedaoperatorCRByaml() (*asset, error) {
	bytes, err := bindataClusterRoleBindingAlamedaoperatorCRByamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ClusterRoleBinding/alameda-operatorCRB.yaml",
		size: 299,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSecretAdmissioncontrollertlsyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x3d\x0a\x82\x41\x0c\x04\xd0\x3e\xa7\xc8\x05\xbe\xc2\x36\x97\xb0" +
	"\x10\xec\x87\xdd\x11\x82\xfb\x67\x36\x0a\xde\x5e\x44\xfb\xf7\x04\xcb\xaf\x8c\xed\x73\x98\xbe\x4e\x72\xf7\x51\x4d" +
	"\x2f\x2c\xc1\x94\xce\x44\x45\xc2\x44\x75\xa0\xd3\x14\xb5\xfb\xfe\xe2\xa3\xcc\x91\x31\x5b\x63\x1c\xd9\xf6\x1f\xec" +
	"\x85\x42\xd3\x1b\x2b\x03\x39\x03\x2e\xbf\x9f\xef\x45\xd3\xf3\xc2\xe3\xc9\x4f\x00\x00\x00\xff\xff\xc0\x89\x2c\x4b" +
	"\x73\x00\x00\x00")

func bindataSecretAdmissioncontrollertlsyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSecretAdmissioncontrollertlsyaml,
		"Secret/admission-controller-tls.yaml",
	)
}



func bindataSecretAdmissioncontrollertlsyaml() (*asset, error) {
	bytes, err := bindataSecretAdmissioncontrollertlsyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Secret/admission-controller-tls.yaml",
		size: 115,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSecretAlamedainfluxdbyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\xa7\xf0\x05\x3a\xb0\xfa\x12\x0c" +
	"\x48\xec\x9f\xfa\x57\xb2\x48\xd2\xe0\xb8\x08\x6e\xcf\x40\xe7\xa7\x87\xe1\x77\xc6\xf4\xbd\xab\xbc\x2f\xe5\xe9\xdd" +
	"\x54\x6e\x5c\x83\x59\x1a\x13\x86\x84\x16\x91\x8e\x46\x15\x54\x34\x1a\x16\xef\x5b\x3d\x3e\xf6\x58\xb2\xce\x13\xe7" +
	"\xc0\x4a\x95\x8d\xc6\x40\xee\x01\x2f\xff\x9b\xdf\x41\x95\xeb\xc0\xeb\xe0\x2f\x00\x00\xff\xff\x82\xf8\x7a\xe9\x6e" +
	"\x00\x00\x00")

func bindataSecretAlamedainfluxdbyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSecretAlamedainfluxdbyaml,
		"Secret/alameda-influxdb.yaml",
	)
}



func bindataSecretAlamedainfluxdbyaml() (*asset, error) {
	bytes, err := bindataSecretAlamedainfluxdbyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Secret/alameda-influxdb.yaml",
		size: 110,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataConfigMapGrafanadatasourcesyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x7d\xf9\x73\xdb\x38\xf2\xef\xef\xfe\x2b\xb0\x4c\xde\x37\x76\x56\xb7" +
	"\x2d\x1f\xaa\xca\x56\x25\xce\x64\x26\xaf\x26\x89\x5f\x8e\xd9\x9a\x1d\xe5\x69\x21\x12\x92\x30\x26\x09\x2e\x00\x3a" +
	"\x76\x32\xde\xbf\xfd\x5b\x00\x29\x1e\x20\x28\x51\xa7\x65\x1b\xae\xda\x9d\x88\x38\x48\xa0\x1b\x8d\x0f\xba\x1b\xdd" +
	"\x30\xc0\xbf\x21\xca\x30\xf1\x7b\xe0\xaa\xbd\x77\x89\x7d\xa7\x07\xce\x89\x3f\xc2\xe3\x77\x30\xd8\xf3\x10\x87\x0e" +
	"\xe4\xb0\xb7\x07\x80\x0f\x3d\xd4\x03\x63\x0a\x47\xd0\x87\x75\xf1\x94\x91\x90\xda\x88\xc5\x65\x2c\x80\x36\xea\x81" +
	"\x11\x72\x10\x85\x9c\x50\x88\xf7\xa6\x4d\xd1\x35\xb2\x43\x8e\x06\x6c\x82\x5c\xb7\xc1\x26\x3d\xf0\x57\x7d\x0f\x00" +
	"\x00\x9e\xfc\xad\x19\x32\xda\x1c\x62\xbf\x89\xfc\x2b\xc0\x26\xd1\xd3\x6f\x13\xec\xa2\xe8\x9f\x0e\x91\xff\xbd\x82" +
	"\x6e\x88\x5e\xfc\xdb\x86\x1c\x34\xaf\x20\x6d\xd2\xd0\x6f\x32\x64\x53\xc4\x59\xf3\x32\x1c\x22\xea\x23\x8e\x58\x03" +
	"\x93\x26\x43\xf4\x0a\xdb\x08\xda\x36\x09\x7d\xde\xe4\xe4\x12\xf9\xff\xce\xf4\x61\xbd\x42\x90\x22\x0a\x9e\xfe\x90" +
	"\xbf\x6f\x2d\x59\x86\xec\x09\x01\x4f\xe5\x13\xf9\xdb\xbb\x74\x30\x05\xf5\x00\x34\x11\xb7\x9b\xf1\xa0\x9b\x01\x25" +
	"\x57\x58\x4c\x16\xf6\xc7\xcd\xcc\x0c\x34\x65\x1b\x3b\x00\x20\xfb\x30\xa0\xc4\x43\x7c\x82\x42\xd6\xb8\x81\x9e\x0b" +
	"\x2a\xf6\xa5\x34\x93\x5d\x33\xe4\x80\x3a\x06\xcf\x58\x33\xfa\xfa\xe6\x33\x2b\xfa\x58\xeb\x59\x73\xfc\x6c\x85\x8e" +
	"\xe5\x84\x2e\xdd\xfa\x89\x43\x7c\x31\x5f\x4a\x59\x42\xde\x1f\xf2\xff\xc5\x9f\x95\x32\x9a\xd5\x03\xed\x5a\x5a\x90" +
	"\x79\x87\xd5\x03\x7f\x24\x05\xf9\xf6\x49\x75\xc1\x69\x56\x0f\x58\x6f\xfd\x91\x1b\x5e\xbf\x7e\x65\xd5\xd4\x2a\x00" +
	"\x14\x5b\xf1\x9b\x40\xb6\xc2\xb2\x95\x33\xb4\x6a\xc5\x3a\xd0\xb6\x11\x13\xdf\x60\x05\x94\x5c\xdf\xe8\xaa\x84\xd4" +
	"\x15\xe5\x13\xce\x03\xd6\x6b\x36\xa1\x0b\x3d\xe4\xc0\xfa\xb4\xd7\x46\x86\xf7\x1b\xec\xca\xee\x9d\xb6\x4e\x8f\x75" +
	"\xfd\x04\x90\xb1\x6f\x84\x3a\xa2\x33\xe8\x78\xd8\x17\x0f\xb4\x2f\x64\x88\x26\x95\x74\x15\xc4\xec\x0d\x21\x93\x83" +
	"\x1b\x60\x9f\x23\xea\x43\x57\x57\x71\x08\x19\xb6\x5f\x86\x7c\x62\xf5\xc0\x08\xba\x0c\x69\xea\x60\xf6\x1a\x8d\x60" +
	"\xe8\xf2\x19\x75\xfe\x64\xc4\x7f\x0d\x39\xb4\x7a\x1a\xea\x88\x99\x76\xd9\xa7\x4b\x1c\xfc\x86\x28\x1e\xdd\x58\x3d" +
	"\xc0\x69\xbc\xa2\xb2\x7f\xb7\x9a\x8e\x29\x82\xce\x07\xdf\xbd\xd1\xbf\x5b\x69\x31\x83\x31\x2e\x12\x5e\xd4\x4d\xc3" +
	"\x94\x11\x82\x99\xb5\x16\x67\x85\xb4\xbf\xfa\xe5\x29\x6b\x90\x00\xf9\x6c\x82\x47\xbc\xee\x11\x1f\x73\x42\xb1\x3f" +
	"\x96\x1c\x71\xd6\x3a\x6b\xaf\x83\x3c\x62\x5a\xd7\x44\x9d\x62\x37\x20\x1a\xd7\x2f\x08\x3a\x88\xbe\x87\x1e\x6a\x8b" +
	"\xa1\x8a\xaf\x23\x14\x7f\x87\x5c\x2c\xe2\x62\x2b\x1d\x51\x19\xb2\x43\x8a\xfe\xef\x9c\xaf\x4a\x5f\xf6\x9b\x90\x69" +
	"\xf2\x6d\x91\x9c\xb3\xd6\xc1\x3a\xc9\xaf\xaf\xf2\x5f\xb7\xd1\x8f\x3d\x00\x6c\x37\x64\x1c\xd1\x09\x82\x2e\x9f\x34" +
	"\xc4\xdc\x15\x24\x97\x05\x7d\x9f\x70\x39\x64\x96\xfb\x7c\xcb\xc5\x8c\x2b\x02\x2b\x3f\x38\x6b\x18\x62\x97\xbf\x55" +
	"\xe4\x1d\xc8\xcb\x3c\x31\xd4\x7a\x1d\xfc\x1c\x49\x5f\x50\xaf\x2b\x13\x6b\x21\x1f\x0e\x5d\xa4\x25\x95\x35\xc1\x4e" +
	"\x49\x09\xb6\x89\x7f\x4e\x5c\x22\x85\x07\x1d\x0f\xe1\x7e\xab\x06\x3a\xed\x76\x0d\x74\xba\xdd\x1a\x68\x1f\xa8\xaf" +
	"\x99\xae\x9e\x97\xe9\x70\xc1\xff\x80\x97\x2e\xa2\x5c\x5d\x21\xc9\x1a\x72\x20\x9b\x0c\x09\xa4\x4e\x96\x4a\xea\x6c" +
	"\x67\x28\x66\x21\x07\x73\xcd\x68\xac\xb1\x8f\xf8\x5b\x21\x0c\xfd\xd0\x75\xd3\xa7\x14\x06\x93\xcf\x84\xb8\x1c\x07" +
	"\x56\x0f\xb4\x92\x02\xec\x64\xa7\xd4\x72\xb1\x7f\x29\xb7\x8e\xaf\xc9\xa3\x00\xfa\xc8\xcd\x6f\x27\x59\xda\x58\x36" +
	"\x71\x5d\x18\x30\xe4\xe8\x38\xc6\x1a\x53\xec\x5c\x10\x56\xe0\x56\x6b\xa2\x21\xe5\x37\xab\x07\x3a\x47\xca\xc3\xeb" +
	"\xec\xf7\xc6\xcf\x04\x77\xb6\xb2\x13\x95\x7b\xa7\x1c\xd3\x69\xee\x51\x3a\x88\xaf\xb9\xe7\x1c\x73\x39\x85\xd6\x79" +
	"\xc4\xbe\xe0\x17\xc9\xbf\xe0\x13\x87\x5c\x11\x67\x09\xa9\x28\xf9\x96\x12\x29\xf3\xe6\xfc\xac\x40\x7b\x82\x3e\x63" +
	"\x0f\x91\x90\x2b\xc4\x98\xce\x1a\xa1\xaf\xa0\x7d\x39\xa6\x24\xf4\xf5\x73\x27\xeb\xc8\x55\xac\x61\xcc\xa8\xb4\xb8" +
	"\xcd\x47\x1c\xda\x39\xea\xd6\x40\xf7\x28\xfa\x5f\xab\x71\x56\xe0\xd1\xa8\xd6\xe1\x49\x0d\xb4\x3b\x67\x35\x70\xd4" +
	"\x12\xd5\x4e\x4b\xea\x75\x5b\x35\xd0\x3e\xe9\xd4\x80\xe8\xb5\xd5\x38\x3b\x39\xc8\x72\x69\x7e\x46\xf3\xcb\xb1\x64" +
	"\x03\x29\xe3\x5e\x59\x36\x22\xd4\x83\x5c\x6e\x18\x88\xda\xc8\xe7\xa1\x8f\x79\xbe\xf9\x18\x86\x63\x54\xe4\x29\x0f" +
	"\x5e\x4f\xa7\x4b\x65\x2d\x0f\xfb\xd3\x22\x95\x99\xd8\x84\x7c\xd3\xaf\x7c\x3e\xa1\x88\x4d\x88\xeb\xfc\x0a\x87\x11" +
	"\xfb\xcc\xaa\xf4\x0e\xd2\x4b\x44\x59\x71\x9f\xbe\xad\xbe\x22\xba\x9a\x15\x51\x75\x41\xb4\x67\x2f\x88\xce\x71\xfe" +
	"\x99\xc0\x37\x57\xd0\xd5\x31\x67\x51\x0a\xc4\xd3\x1b\x04\xd8\x1f\x7f\x8e\xd6\x41\xbb\xac\x6c\x3e\xf4\x4c\x24\xa4" +
	"\x84\xdd\x80\x13\xc0\xd1\x35\x2f\x6c\x83\x51\xb1\x32\xb2\xb9\xf0\x25\xe9\x9c\x42\x7f\x5c\xa1\xf3\x4e\xc9\x06\xa7" +
	"\x32\xb6\x07\xaf\xc5\xbe\x7b\x41\xb0\xcf\xc5\x10\xdb\xad\x1c\x11\x2c\x31\x8b\xb2\xf0\x1d\x91\x3b\x89\x65\x13\xdf" +
	"\x47\x36\x47\x8e\x55\xa8\xf7\x59\x7c\x91\x66\xe2\x03\xc2\xf8\x08\x0b\x02\x5b\x96\xae\xe0\x0d\xf1\xf9\x27\xfc\x5d" +
	"\x76\xdf\x6d\xfd\x1f\xa5\x0e\x45\xfa\xb6\xf2\xf9\xcc\xa6\x72\xaa\xde\xc1\xa0\x02\xe9\x46\x94\x78\xa2\x0f\xf1\xed" +
	"\xc5\x49\xe5\xd1\xc0\xac\xf7\xcd\x97\x9a\x42\x92\x34\xac\x38\xe7\x2c\x80\xf4\xd2\xc5\xbe\x66\xad\x8f\xb0\xeb\xe6" +
	"\x77\xe5\xc3\x76\x0d\xb4\xdb\xa7\x35\xd0\x3e\x3d\x13\x62\xaa\x7d\x5a\x90\x66\x23\xf1\x6e\x2d\xb0\x11\x3c\x8f\xb2" +
	"\xfd\x45\xdd\x75\x84\xe4\x3b\x3b\x2c\x74\x14\xcb\x0c\xd9\x51\xe9\xb2\x93\x12\xee\x9c\xb8\xa1\xe7\x17\xa9\xc2\x21" +
	"\x1d\x23\x5e\x61\xc2\xd1\x75\x20\xbf\x69\x9f\x85\xde\x7e\x18\xfc\xf8\x93\x0c\x5f\xfc\xb7\x6f\x35\x9e\xc3\x00\x8b" +
	"\xf3\x39\xa2\x8d\xe7\x7d\xeb\x16\xbc\x78\x01\xda\x07\xa0\x09\xe4\x51\x7d\x46\xc5\x03\x75\x30\x39\x91\xcb\xb1\x87" +
	"\x06\x0c\x51\x8c\x8a\x60\x3e\x91\x19\x6f\xa0\xcd\xe5\x44\x75\x0a\x55\x28\x1a\x49\xf4\x61\x69\xe8\xcf\x38\x12\xe0" +
	"\xe3\xb8\xd5\xaa\x48\xfe\x44\xb4\xca\xe3\x43\xab\x21\x77\x9f\x53\x4b\xbf\x83\xbf\xbc\x78\x0b\x3e\xc9\x61\x32\xf0" +
	"\xe5\x42\xa9\x44\xa1\x2f\x78\x09\xf9\x3a\xbc\x9f\xec\xec\x0c\xfb\x63\x17\x31\x0e\x95\xed\x46\x8a\x8a\xec\x02\x3a" +
	"\x55\x17\x90\xac\x51\x6d\x01\x11\x31\x07\xd6\x8b\x05\xd7\xce\x54\x5a\x2d\xb4\x7c\x64\xa3\xf7\xb1\x38\x84\x57\xe3" +
	"\xf9\xb0\x05\xba\x18\xb2\xf3\x29\xb2\xf8\x91\xe7\xe7\x21\x94\x4f\x8b\x40\x45\x80\xd7\x5f\x91\x3f\x96\x27\xae\x76" +
	"\xab\x50\x86\xca\x9a\xad\x0a\x15\x10\xa5\x92\x0f\x8b\x7d\x0b\xf1\x50\xd8\xa4\xc4\xd6\x5b\x94\x24\x09\x97\xb5\xf3" +
	"\xf2\xa4\xd3\x3e\xae\x81\x4e\x4b\x80\xfd\x13\xc1\x78\x9d\x93\x82\x18\x48\x9a\x76\x94\xa6\x87\x47\x42\x16\x75\xe2" +
	"\xff\x6b\x35\x3a\x9d\x1c\x64\x5a\x11\x11\xb4\xd5\xed\xff\x5a\x03\x13\x2a\x40\x82\xc3\x4e\xfe\x19\x7b\x8f\xbe\x69" +
	"\x67\xd3\x45\x63\xe4\x6b\xa6\x0e\xba\x78\xec\xbf\x64\x9f\x63\xfa\xe8\xe4\xaa\x60\x3b\x7d\x89\x1d\xd2\x78\x41\xea" +
	"\x4a\xc5\x79\xec\x27\x2f\xe0\x25\x07\x51\x59\xfe\x2f\x44\x49\x49\xb1\x07\xaf\xcb\x4a\xb0\x5f\x52\x42\xf1\x78\xc2" +
	"\x3f\x45\xe7\x40\x5d\xf9\x0c\xa0\x48\x38\x2c\xdb\x58\xe4\x22\x64\x73\x37\x0b\xb1\xff\xe8\x10\xa6\x2c\xf8\x86\x1d" +
	"\x5e\x38\x30\x95\xc1\xb4\x02\x10\x29\x6c\xd5\x53\x60\x0d\xc7\xda\xa1\x5a\x81\x68\x4d\xa1\x83\x43\xa6\x72\x60\x54" +
	"\xa6\x5f\xcf\x14\xf9\x0e\xa2\x91\x92\x6d\xe4\x12\x45\x88\x46\x9b\xca\x87\x2b\x44\x29\x76\x90\xe6\xbb\xa5\xce\xbb" +
	"\x4c\x8c\x30\x0e\xed\x4b\xed\x5b\xc5\xae\x12\x20\xe7\xd7\x08\x25\x14\xcb\x17\xde\x68\x59\xe8\x81\xe1\xcd\x3e\xf6" +
	"\x19\x87\xbe\x8d\x0e\xc0\x3e\x85\x1c\xed\x27\xbb\xe8\x80\xa2\xff\x84\x88\xf1\x81\xdc\x69\x7f\xd8\xc4\x41\x62\x9f" +
	"\xed\x36\x1a\x7d\xeb\xf6\x8f\xae\xf7\xf5\x40\x6c\xc3\x8b\xf5\x12\x35\xdb\xe4\xc6\x1c\x2d\xe1\x37\x49\x7f\x3f\x7e" +
	"\x4c\x3f\xed\xf6\xb6\xd8\x61\xa5\x6d\x7c\x99\x5d\xbc\x70\xfe\xf6\xd0\x9b\x08\x51\x16\xc0\xb0\x28\xfb\x88\xc6\xb1" +
	"\xb6\x48\xd3\xf0\xd3\x04\x8f\xb4\x30\x5a\x83\x09\xc0\xc7\x68\xba\xc1\x4f\x62\xcb\x00\x1f\x21\x47\xea\xf1\x3e\xd1" +
	"\x8e\xa8\xa7\x4a\xf6\x11\x31\xe2\x86\x3c\xd2\xb7\xeb\x25\x03\xa4\x52\x01\xa2\x91\x0d\x8c\x50\xae\x39\xb1\x49\xb1" +
	"\x30\x48\x75\xe9\x0e\xbe\xc2\x4e\x08\xdd\xf2\x6d\x22\x0f\x62\x34\x8c\x1e\xf7\x25\x75\x3d\xf9\xb1\x5d\xc3\x6b\xac" +
	"\xd9\x5f\x86\xa1\x7d\x19\x2d\x0d\x75\x0a\xc5\xb0\x63\xe9\x21\x66\xba\x44\xc3\xa5\x69\x55\x2e\x23\x13\x39\xf8\xc7" +
	"\xd7\xd2\x21\xde\xc0\xeb\x2a\xc7\xc7\xf9\x1a\x02\x59\xcd\x25\xe3\x57\x91\x3a\xbf\x5d\x28\x8b\xf6\x07\xab\xa8\x3f" +
	"\xce\x8e\x20\xcf\xe0\x73\x8e\x9d\xe9\x47\xb1\x89\x20\xf9\x42\x9f\x53\xfa\xd2\xd2\x55\x75\xa3\x27\xa9\xdc\x91\xcb" +
	"\xb6\x62\x51\xf6\x2b\xba\x42\xd3\x43\xff\x9e\xee\x45\x3b\xaa\xd1\xd2\xe8\xa0\x56\x51\x69\x15\x15\x64\xa5\x33\x5d" +
	"\x0d\xa6\x3a\x88\xd9\x14\x07\xb1\x90\xb0\xce\x29\x64\x13\xec\x8f\xc1\x05\x71\x18\xc0\x3e\xb0\x89\xcf\x29\x71\x41" +
	"\xe0\x42\x1f\x81\xfd\xcb\x70\x88\xea\xec\x86\x71\xe4\x1d\x2c\xa3\x1a\xf3\x89\x8f\x16\xd6\x89\xb5\x54\x21\x34\x5f" +
	"\x2b\xa6\xe3\xa3\xa2\x5a\x6c\x66\xad\x4d\xe9\xc5\xd4\x67\x62\x41\xb7\x97\x40\xc1\x79\x8d\xb3\x51\x8c\x19\xc5\x58" +
	"\x5a\xc5\x28\xc6\x76\x5f\x31\x16\x29\xbc\xb0\x6f\x53\x04\x19\x92\x92\x75\x10\x10\x67\x20\x24\x2e\xc4\x3e\xa2\x03" +
	"\x26\xad\x39\x03\x8a\x18\x87\x94\xb3\x81\x3c\xae\xfd\x48\xfc\x6c\x04\x7a\xcf\xc8\x63\x81\xe2\xdb\x93\xaf\x07\xe0" +
	"\x1f\xa0\x7b\x5f\x75\x65\xed\x1a\x38\x2c\xd1\x93\x25\x3b\xd3\x79\xbc\x23\x5d\xc8\x1d\x49\xec\x53\xb3\x94\x66\xe5" +
	"\x78\x73\x37\xb4\x66\xad\x4d\xe8\xcc\xa6\x2a\x0a\x03\x8e\xca\xa6\x6b\x4d\xe0\x28\xb6\xbe\x8a\x55\xec\x86\x0e\x02" +
	"\x7c\x82\xf2\x88\xc9\x80\x24\xb0\x3e\x90\x74\xb6\x38\x48\xea\x76\x0c\x48\xd2\x75\x6e\x40\x92\x01\x49\x0f\x18\x24" +
	"\x3d\x0a\x20\x64\xa0\x4f\xa6\xd1\xdd\x43\x9f\x92\xe2\x87\xed\xea\xf4\xc8\xa0\x8a\xaa\xa6\x59\xc4\xcf\xe9\x78\x36" +
	"\x52\x39\x32\x7e\x4e\xda\xce\x0d\x52\x31\x48\xe5\xfe\x20\x95\xd8\x7f\x29\x52\xcc\xb8\x88\xf7\xad\xdb\xfb\x0a\x41" +
	"\x4a\xe0\xc7\x67\x81\xaf\xc0\x7b\xe2\x14\x0c\x91\xf7\x0a\x7c\x6c\xc8\x5b\xe9\xbe\x68\x5e\x76\x1d\x7d\x38\xc8\xc6" +
	"\x1e\x74\x75\x36\x5e\xe3\x84\xbd\x22\x38\xd1\xd9\x9a\xca\xc1\xc9\x04\x3b\x92\x4f\xa7\x1e\x30\x5a\x4e\x8c\x0c\x52" +
	"\x46\xd7\xa2\xed\xdc\x20\x18\x83\x60\xee\x03\x82\x61\xa1\x17\x29\x58\x7c\xe2\xa0\xa9\x5e\xc5\x26\xbe\x83\x39\x26" +
	"\xfe\x8f\xe4\x5f\x2f\xfa\xd6\x47\x04\x9d\x9b\xbe\x55\x8b\x2a\xbd\xe8\x5b\x42\x6a\x09\xac\x13\x79\x90\x2d\xd8\xcd" +
	"\x66\x21\x92\xea\x41\xb6\xa4\xd7\xd8\xf2\xce\xdf\xad\xc6\x59\x09\x96\x12\x28\x0a\xc8\x49\x30\x7e\xdf\x2a\x92\xf2" +
	"\xb0\x6f\x50\xd4\x8a\x28\xca\x20\xa5\xd5\x90\xd2\xe9\xe2\x6a\x9c\xce\xa9\x01\x41\xba\xce\x0d\x08\x32\x20\xe8\x3e" +
	"\x80\xa0\xec\x75\xb5\xac\x16\x47\x7f\x4f\x2d\xa7\xe7\xb9\xaf\x8a\x9e\x39\x17\xd4\xa4\xaa\xc7\x5c\x4d\xcb\x34\xba" +
	"\x4f\x10\x65\xf7\x5d\x6c\x8c\xa2\x47\xfe\x6d\x00\xbe\xb4\x3b\x9b\xd2\xf4\xb4\x0c\xc8\xd1\x75\x6e\x40\x8e\x01\x39" +
	"\xf7\x01\xe4\x2c\xa0\xa2\x79\x87\x3c\x42\x6f\x2e\x28\x62\x2c\xa4\x68\x75\x95\x8f\xda\xdf\x83\xd6\xfd\xb4\x6b\xad" +
	"\x46\x77\x96\xee\x27\x9a\x0d\x30\x9d\x0e\x03\xb1\x0a\x10\x0b\x5e\x1b\x88\xb5\x22\xc4\x32\x30\x6a\x45\x18\x75\xbc" +
	"\x21\x18\xd5\x6d\x1b\x18\xa5\xeb\xdc\xc0\x28\x03\xa3\x1e\x18\x8c\x7a\x8d\xd9\xe5\xfa\x40\x54\xbe\xb7\xc7\x0d\xa1" +
	"\xc4\x5c\x18\x00\x65\x00\x14\xd8\x1c\x80\x52\xae\x81\x5d\x24\x51\x68\x00\x19\x01\x5f\xaa\x47\xc9\x15\xa2\xc9\x75" +
	"\x30\x3e\x81\x1c\x4c\xe0\x15\x02\xa1\xcf\xec\x09\x72\x42\x17\x39\x80\x0c\xff\x44\x36\x37\xd8\x2c\xf9\xf6\x75\x60" +
	"\xb3\xce\x62\x9e\xd6\xd5\xb1\x59\xdb\x38\x33\x69\x3b\x37\xd8\xcc\x60\xb3\x7b\x88\xcd\x02\x64\x0f\x12\x61\x2c\x5e" +
	"\x74\x00\x66\xda\xf2\x1e\x34\xa2\x02\xb3\x21\x15\x03\x5f\xb2\x33\x75\x97\x98\x6a\x65\x60\x73\x47\x41\xbe\xdb\x73" +
	"\xa2\x7c\x77\xcf\xf2\x32\xa7\x6a\x98\xef\x8f\x28\x42\x2b\xe0\x0b\x83\x63\x95\x32\x8b\xc4\xf9\xde\xc1\x80\x99\x0a" +
	"\xca\xfa\xc2\xb1\x1b\x27\x1a\x00\x70\x0c\xb1\xcf\x38\x90\x77\x3b\x13\x98\x75\x7e\xf1\x05\xd0\x78\x42\xf2\x5d\x95" +
	"\x46\xd1\x2c\xa5\xb6\xaa\xe2\xf9\xa6\x33\x9f\x95\x52\x7b\xde\x25\xf4\x7c\xa4\x9e\xd2\xa8\x94\x4b\x86\x9c\x5c\x26" +
	"\x66\xa4\x89\x09\xf9\x28\x62\x42\x8a\xcd\xaf\x27\x77\x40\x3b\x08\x07\xa1\x58\x52\x4c\x2e\xa9\x1e\xbc\x1a\xb7\x3d" +
	"\xf0\x1c\xa4\x35\xfc\xd0\x13\xb5\x7a\x2c\xf4\x40\x13\x30\x1b\xba\x90\x4a\x6f\x18\x6d\x95\x15\xbc\x5d\xc4\x21\x32" +
	"\x78\x75\x53\x18\x85\x6e\x24\x11\x9d\x20\x85\x5e\x71\xd4\x49\xf9\xd3\xc1\x20\xc1\xe7\x9a\x1a\x5f\xd5\x2f\x00\x59" +
	"\x71\x29\xe3\x04\x16\x2a\x68\x52\x8c\x2c\xf5\x69\x45\xf8\x56\xe5\x9b\xa4\xfc\x2a\x7e\xd3\xde\x9c\x3e\x96\x8b\xa7" +
	"\x29\x28\xab\x8b\xa5\x49\xa8\x83\xe8\xab\x1b\x71\x5c\x92\x50\xe4\xd3\x79\xb1\x4e\x40\x5c\x6c\x0b\x4a\x5a\x4e\x9c" +
	"\x96\x66\x21\x2c\x43\x11\x0b\x5d\xfe\xa6\x1a\xdb\x30\xe4\x22\x5b\x4d\xb7\x12\xfd\xe9\x26\x5f\x47\xae\xf9\x04\x4b" +
	"\x4e\x3a\xda\x52\x2d\xd5\x72\x74\x43\xae\xa3\x6b\xaa\x61\xa7\x0a\x5f\x38\xef\x75\x1e\x82\xbe\xf6\x6d\x85\x67\x5f" +
	"\xe7\xb2\x0e\x87\xe3\x42\x90\xcb\x1d\x8d\x8e\x2a\xf6\xfd\x2f\xa9\x28\x53\x50\x50\x59\x38\xd4\xed\xc4\x3a\x35\xb1" +
	"\x4c\xf3\xd5\x5c\x38\x44\x3a\xa5\x49\x54\xb8\x54\xa0\xd3\x08\xd4\xe8\xa2\x47\x6c\x2e\x04\xea\x6a\xa3\xd0\x36\x8b" +
	"\x86\xa1\x2d\x2a\x39\x2e\xef\x54\x58\xd5\x87\x70\x80\xf0\x22\xef\x8b\xad\x9f\x21\xb4\x7e\x79\x73\x0f\x11\xc7\xe6" +
	"\x10\x01\xcc\x21\x22\x29\xbc\x8b\x43\x44\xb4\x60\x72\xe7\x08\x2a\xfe\x63\x8e\x02\xe6\x28\x60\x8e\x02\xc0\x1c\x05" +
	"\xb6\x7d\x14\x88\xfd\x27\xcd\x69\xc0\x9c\x06\xcc\x69\x20\x6d\x62\x4e\x03\x4b\x9c\x06\x1c\xcc\x2e\x77\xc4\x9e\x70" +
	"\x32\xe7\x28\xd0\x35\x47\x01\x60\x8e\x02\x49\xe1\x56\x73\x4c\xed\x7b\xf0\x5a\x9a\x04\x06\x23\xec\xa2\x28\xf4\xfc" +
	"\x80\xe1\xef\x68\x30\xbc\xe1\x88\xfd\x18\x31\xb1\xed\xbd\xf8\x6f\xdf\x42\xd7\xfc\x8f\xce\xe1\xd1\xd7\xbf\x86\x9c" +
	"\x8e\xd8\x5f\xd7\x23\xf6\xd7\xf7\x11\xeb\x5b\xb7\xa0\x0e\xd4\x0e\xe0\x15\xc4\x6e\xf5\x1e\x0e\xc0\xf0\x06\xec\x3b" +
	"\xe8\x0a\xdb\xa8\x16\x10\xa7\x96\x04\xc5\x3f\x88\x8a\xf2\xcf\xfa\x7e\xce\xa0\xb1\xfa\x08\x66\xbd\xff\xa0\xef\x3f" +
	"\x07\xc4\x07\xfb\xc9\xb3\x1a\x08\x88\x73\x00\xe4\x61\x67\xe0\xa2\x11\x07\xf2\xf5\x07\xd1\x2c\x24\xd5\x06\x01\x71" +
	"\x7a\x49\x84\x5b\xec\x8f\x48\xcf\x1c\xac\xcc\xc1\xca\x1c\xac\x80\x39\x58\x6d\xfb\x60\x25\xbd\xaa\xcf\x61\x00\x6d" +
	"\xcc\xd5\xe0\x44\xe6\x4c\x65\xce\x54\xe6\x4c\x15\x3f\x7e\x54\x67\xaa\xad\xdb\x44\xe6\x1d\x84\x4e\xcc\x41\x08\x98" +
	"\x83\x50\x52\x78\x17\x36\x11\x07\xb3\x4b\xd5\xb3\x6a\x80\x29\xe4\x28\xf5\xa2\xca\xa3\xfa\xc8\x25\x59\xfa\x1e\xf7" +
	"\x8c\x17\x95\x41\xf8\x06\xe1\x47\x4d\x0c\xc2\xdf\x3a\xc2\x7f\xfb\xc1\xd8\x4e\x0c\xce\x37\x38\x3f\xd3\x64\x73\x38" +
	"\x7f\x4f\x79\x9d\x10\xea\x62\xf9\xab\xbd\x5a\xcc\x9e\x20\x0f\xfe\x86\x28\x8b\x8c\x17\x69\x00\x0a\x8b\xf1\x9b\x68" +
	"\xf9\x3a\x90\x5e\x26\xd3\x9b\xca\x9d\xf4\x09\xf2\x02\x17\x72\xec\x8f\x73\x63\xb1\x5c\xcc\x78\x96\x6d\x6f\xd3\x16" +
	"\xd1\x16\x95\xa9\x9b\x5c\x5e\x23\xdf\xea\xed\xec\x22\x9c\xde\x4d\x4b\x6f\x9a\xe4\xbb\x09\xb0\x7d\x29\x21\x5e\xa6" +
	"\xb3\x78\xb0\x09\xc6\x50\x57\x86\xd5\x55\x0e\x1b\xed\x96\xf2\xe0\x50\x7d\xd0\xf6\xf2\xbf\xbb\xca\xef\xb6\xfa\xe0" +
	"\xb0\xa5\xd6\x50\x44\x4b\x47\xf9\xdd\xce\xec\x43\x5f\xb3\xe3\x17\x5b\x2c\x91\xc6\xa5\xe2\x38\xe6\x7d\x85\xfa\xd2" +
	"\x63\xf5\xa5\xea\x57\x74\x8e\xd4\x07\xca\x25\xc9\x13\x47\x1d\x67\xf6\xbb\xb5\x24\xfa\x4e\x24\x14\xb6\x32\x3c\xa4" +
	"\x5e\x36\xfa\x05\x41\x97\xa7\x6f\xb6\x42\x79\xe6\xb2\x3e\xa2\x13\xe7\xd4\xfb\xec\x3a\x8e\x77\x09\xd3\xd2\xab\x94" +
	"\x5d\xe5\x23\xc1\xee\x02\x14\x4d\x64\x2f\x8d\x3f\x19\xf1\x7b\xe0\xaf\xba\x2c\x9b\xb2\x85\x05\x7d\x9f\x70\x38\x9d" +
	"\x46\x0d\x9b\x66\x46\x55\x10\xf7\xd8\xe5\x6f\x7d\xcd\x4d\xad\xfc\x59\xb6\x5e\x07\x3f\x53\x38\x82\x3e\x04\xf5\xba" +
	"\x2a\xfa\x91\x5f\x72\xf9\x3a\xbe\x2b\xac\x2f\xc1\x36\xf1\xf3\x97\x29\x5b\x35\xd0\x69\xb7\x6b\xa0\xd3\xed\xd6\x40" +
	"\xbb\x70\xff\x71\x7a\xc7\xf6\x65\x3a\x5c\xf0\x3f\xe0\xa5\x8b\x28\x57\x21\x5a\xb2\xf1\x89\xc3\xfa\x90\x40\x9a\x43" +
	"\x42\xb7\x33\xa8\x5a\x72\x95\xdc\x1a\xfb\x88\x4b\xec\x98\x95\x90\xd1\xbe\xfa\x39\xd9\xe2\x93\x0d\x3b\x0e\xf0\x97" +
	"\xfe\xe4\x88\xc2\xd8\x88\xda\xee\x76\x3b\x47\xc7\xed\x93\xe3\xce\x69\x9a\xad\x4a\x73\xc2\xcc\xdc\x67\xdb\xd3\x51" +
	"\xef\xce\xae\xe5\xcd\xb9\x95\x97\xbf\xf2\x3d\xf7\x52\x5e\x1c\xbd\x7d\x4d\x37\xf2\xee\x30\x1f\xdd\x93\xce\xd9\x99" +
	"\x7d\x74\xbc\x6c\xd0\x85\x27\xce\xd1\x11\x3c\x84\x6b\x8e\xb2\xe0\x87\xde\x10\x51\x40\x46\xf2\x9e\x9f\x4d\xa8\x9a" +
	"\x6f\xe8\xd1\x26\xa1\xd3\xe9\xd4\x2a\x5f\x4c\x9d\xbd\x02\x8e\x4d\x12\x3a\x6d\xe7\x26\xea\x81\x89\x7a\x70\x1f\xa2" +
	"\x1e\x14\xe3\x47\xc5\x26\x3c\x79\xff\x53\x0a\x51\xa9\xa9\x7a\xd1\xb7\x9e\x8a\xff\xf6\x2d\x8d\xca\x6a\xd9\x48\x07" +
	"\xc5\x43\x5b\x46\x6b\x55\x91\x98\x95\x52\xd0\x89\x0d\xa1\xc4\x36\xf9\x18\x42\x3a\xc1\xab\xf1\xce\x87\x74\x5a\x21" +
	"\xe7\x89\x16\x85\x6c\x30\xec\x78\xa7\x04\x55\xc4\xda\x98\x6d\x00\x8b\x4a\x21\x97\xee\x04\x57\xe8\xf2\xf0\xeb\xf2" +
	"\xc7\x2d\x16\x01\xc1\xe0\x0a\x83\x2b\x92\x2a\x06\x57\xec\x3e\xae\x98\x13\x47\x42\xc5\x14\xe0\xb9\xe0\xd0\x5d\x46" +
	"\x16\x62\xdf\x39\x6d\xcd\xc0\x17\x33\x8e\xf3\x06\x5c\xec\xa0\x6b\x8a\xa2\x3d\xd0\xfa\xad\xb4\x56\xdb\x0b\xdb\xba" +
	"\xcd\xf0\x6c\xa1\xcd\x70\x82\xf0\x78\x22\xc9\xd7\x39\x6c\x05\xd7\x56\x71\xa7\x3c\x39\xcc\xef\x86\x65\x2e\x2d\x2e" +
	"\x1e\xfb\x2f\xd9\xe7\x72\xf5\x65\x15\xa7\x97\x12\xad\xe7\x4f\x5e\xc0\x6f\x4a\x1a\x8b\xf2\x7f\x21\x4a\xd6\xe8\x32" +
	"\x43\xc5\x9c\x7c\x2a\xd5\xb6\x96\x63\xa4\xd8\xd8\x98\x0c\x48\x53\xfc\x1a\x31\x7b\x05\x77\x9c\x99\x60\xaa\x92\x37" +
	"\x4e\xa7\x0a\xb8\x31\xde\x38\xab\x6d\x4f\x9c\x04\x97\xfb\xdd\x9a\x0c\xa1\x4c\x21\x47\xfb\x36\xf1\x39\xc4\x3e\xa2" +
	"\xd1\x7e\x25\x64\xf9\x80\x21\x9b\xf8\x0e\x1b\x48\xc2\xff\xc0\x1e\x1c\xa3\xbf\xbd\xe8\x5b\x7d\x4b\x3a\xef\xbf\xf8" +
	"\x6f\xdf\xfa\xff\x97\xa7\x6c\xd0\x78\xde\xb7\x6a\x69\x7b\x51\x26\xaa\x5d\x7c\x78\xdd\xb7\x6e\xff\xe8\x78\x5f\x0f" +
	"\xfa\x54\xef\xe1\x2f\xeb\xea\xdc\xfc\xa5\xd1\x73\x40\x51\xe0\x42\x1b\xed\xcf\x75\xfa\x57\x77\xd3\x1a\xe8\x5b\xd3" +
	"\xee\xfb\x96\xf8\xf5\xb4\x1d\xfd\x37\x20\x4e\xf4\x8f\xfd\xc6\xf3\x83\xbe\x75\x70\x00\xa6\x97\x1f\xa2\x6f\x59\x25" +
	"\x8c\x21\xe3\xb0\xcc\x31\x2e\x8f\xe0\x35\xf1\x0b\x97\xf2\xa0\x49\xa6\x10\xe8\xfc\x68\x3c\xc4\x29\xb6\x63\x68\x3b" +
	"\x9b\xb6\x8b\x79\xcf\xc4\xf1\x14\x8f\x96\x81\x11\xdb\xf5\xd8\xf8\xfc\xe1\x42\xea\xc2\x2f\x88\xa3\xa6\xde\x37\xae" +
	"\x1a\x5b\x71\xd5\x98\x91\xac\x0c\x80\xdd\x75\x7f\x30\x6e\x1c\xc9\xe3\xcd\xb9\x6b\x3f\x7a\xfb\x5d\xca\x34\xf2\x1a" +
	"\x9d\x31\xc8\xe5\x9e\x95\x19\xe4\xe6\x78\xb8\x1f\x9b\x74\xc2\xda\xce\x8d\xe2\xcc\x28\xce\xee\x83\xe2\xac\xdc\x20" +
	"\x17\xc7\x52\x8a\xae\x1c\xdf\x7f\x9b\xdc\xc7\x97\xef\x1e\xb3\x4d\x6e\xaa\x82\xd8\x3e\x4c\x30\x76\xb9\xcd\xe1\x8b" +
	"\xfb\x6f\x97\x9b\x77\x81\xce\xf8\xfb\x68\x3b\x37\xf0\xc2\xc0\x8b\xfb\x00\x2f\x66\x86\x66\xbc\x97\x56\xb9\x52\xa3" +
	"\xdc\x34\xd4\x9b\xb1\xcb\xdd\x2b\xbb\xdc\x96\x4d\x6f\xe5\xfb\x5d\x6a\x7a\x3b\x6c\x95\x98\xde\x2a\x86\xd5\xda\x94" +
	"\xe9\x6d\xab\xb6\x33\x63\xfe\x7a\x98\xe6\xaf\xd4\x3a\x32\xdd\x11\xa4\x81\x24\x3a\x66\x66\x8c\x5e\xb7\xf7\xc6\x86" +
	"\xd5\xf7\xd7\xb7\x65\x55\xb1\x43\x4d\xdf\xac\xb3\x42\x55\x30\x24\xb5\x97\xca\xcb\xb5\x65\x4b\x12\x09\x40\x77\x9a" +
	"\x7c\xfe\xad\xcf\x91\xcf\x90\x31\x2b\xed\xc0\x0d\x60\x07\xd9\x45\xe5\xb9\xac\x63\x2c\x47\xeb\x1d\x47\xe9\xb2\xdc" +
	"\xbe\xe1\xe8\xae\x72\xd4\x1d\x96\xf2\x6d\x04\x87\xf2\x87\xf9\x8a\xd7\xe1\x42\xdf\xc7\xfe\x18\x7c\x92\xda\xce\x15" +
	"\xae\xc3\xed\x20\x94\xcd\xe8\xa6\x5a\x1b\xc0\xb8\xd5\x09\x77\x34\x87\x70\x15\xa3\x22\x6d\x16\xc7\xea\x0a\xe4\x3a" +
	"\xd5\x14\x2c\xef\x01\x86\x1d\xf4\xcf\x29\xd4\xec\xaa\x93\xb5\xf3\x18\x17\x40\x06\xbe\x23\x4a\x0c\xd6\x5d\x3c\xaf" +
	"\xab\x80\x69\xb1\x4d\x25\x98\x40\x86\xca\xbc\xb2\x96\x8a\xbb\xaa\xc2\x57\xd1\x79\x1c\x58\x56\xbc\x6b\x79\xbf\xaa" +
	"\x49\x49\xd2\x69\x00\x36\xe5\x54\x25\xbe\x77\x8e\x47\x95\x76\x3e\x1f\x2c\xf8\x15\x38\x57\xd9\xa7\xc0\x39\x09\x55" +
	"\x8b\x82\x01\xbf\x5b\xf7\xa9\x6a\xcd\x58\x55\x5b\x87\x93\xeb\x0c\x8b\xb3\xab\x63\xbc\xbf\xce\x56\x52\x81\x5e\x81" +
	"\xbb\xa6\x5a\xd9\x97\x57\xe3\x19\x5a\xd9\x9c\x72\x75\xf6\x50\x97\xba\x8d\xf0\x9e\x70\xd4\x03\x2e\xf6\x30\x07\x1e" +
	"\xbc\x01\xe8\xda\x46\xc8\x61\x40\xea\x66\x00\xf6\x01\x14\x3b\x15\x70\x22\xbb\x17\x60\xc4\x43\x20\x51\xe4\x30\x40" +
	"\x46\x00\x73\x00\x1c\x82\x18\xf0\x09\x07\x13\x78\x85\xa2\xde\x58\x43\xf5\xc1\x4a\xb5\xdc\xed\x96\xaa\xe6\x9e\x09" +
	"\x49\x55\x6d\xea\x42\x90\xb4\x53\x1e\x59\x43\xec\x78\x9f\xb1\x87\xa6\xd8\x42\x87\xa6\x22\x57\xa7\x56\x15\x1c\x15" +
	"\xc0\x31\x8a\x47\x78\xaa\xe0\x9b\x00\x41\xad\xe4\x8f\x4a\x5e\x63\x8a\xec\x29\x41\xae\x14\xf4\x63\x53\x22\x21\x7c" +
	"\xe1\xcb\xc4\x62\xf8\x05\x41\x47\xe2\xa6\x62\x69\x24\xee\x95\xd9\xb4\x89\xab\x81\xf8\x4e\x74\x13\x61\xb6\x75\x48" +
	"\x86\x77\xaa\xc0\xd6\xf2\x74\x14\x6f\x66\x45\xbe\x96\x1e\x00\x31\xce\xd4\x2e\xf1\x12\x17\x81\x68\xb6\xf4\x76\x7d" +
	"\xb5\x8f\xca\x8e\x02\xb2\xea\x13\xbb\xdd\xb5\xdb\x27\x6a\x98\xbd\x62\x00\x3d\x07\x72\x94\xe2\x97\xdf\x7f\xff\xfd" +
	"\xf7\xfa\xbb\x77\xf5\xd7\xaf\xc1\x2f\xbf\xf4\x3c\xaf\xc7\x34\x90\xaa\xcc\x65\x00\x4c\xb9\xa8\x14\x6f\x89\xc2\x34" +
	"\x04\x8e\x06\x72\x89\x0a\x5f\x68\x09\x1e\x0b\x20\xe7\x88\x4a\x76\x9a\xaa\x0c\x35\x56\xa1\x1c\xce\x29\x4e\xcc\x61" +
	"\x71\x97\x01\xc0\x3a\x6d\xcd\x9f\xa9\xc4\xea\xc5\x29\xf6\x35\xc2\x4d\x46\x91\x4b\x3c\x53\xec\x9b\x2f\x9f\x5e\x5b" +
	"\x0b\x6d\x5a\x09\x8f\xdd\x2d\x83\xcd\xf7\x58\x01\xb3\x98\x71\xeb\x1c\x37\xc3\x21\x02\x28\x6c\xf3\xb9\x88\xc6\x66" +
	"\x43\x63\x90\x25\xfc\x04\x3b\x0e\xd2\xe8\xc6\xa7\x84\x8f\xd0\xc4\x72\x24\xd7\xdf\x80\x04\x86\xf6\x59\xda\x1f\xae" +
	"\x42\x7b\xe9\x79\x04\x9e\x68\xa2\xc1\x56\xa5\x7f\x14\x20\x69\x73\xf4\xff\x88\xfe\x13\x22\xa6\xc1\xa3\x86\x03\xd6" +
	"\xc9\x01\x3a\x9f\x98\x1d\xe1\x80\x5f\x05\xc4\x34\xf4\x57\x9b\xac\x97\xfe\xaf\x76\x93\xfe\xef\x90\x67\x76\x80\x79" +
	"\xf4\x2f\x1e\xe6\x17\xa7\xff\xeb\xcd\xd1\x3f\x32\x25\x2e\x4f\x7f\xb3\x03\x6c\x85\x03\x7e\xda\x5d\x0e\x30\x3b\xc0" +
	"\x16\xe8\xff\x66\x37\xe9\xff\x11\x31\x0e\x29\x07\x1a\x9d\xb1\x61\x81\x35\xb3\xc0\xcf\xdb\x05\x01\x7b\x25\xb3\xb1" +
	"\x9c\x39\x2e\x67\x48\x93\x7a\x90\x41\x3e\x7e\x42\x6f\xee\x95\xfd\x1e\x0b\xbd\x01\x85\x1c\xfd\x28\x46\x5e\x28\x0f" +
	"\xc7\x50\x9b\xbe\x6f\xea\xd2\xb6\xc3\x81\x19\x72\x3e\x6d\x33\xcd\x87\xd2\x1e\x5f\xa8\x30\xc7\x70\x38\x8d\xd6\x50" +
	"\xb4\xd5\x2c\xe8\xb9\x7d\xbe\x98\xb4\xc8\xf2\x41\x7e\x36\xfb\xbe\x78\x06\xaf\xc6\x03\x72\x85\xe8\x40\x48\x91\xd4" +
	"\x70\x9b\x12\x74\x9a\x70\x77\x40\x23\xb0\xc1\x32\x91\x2a\x93\x5a\x2a\x1b\xa4\x1c\xa0\x50\xe4\x8f\x76\xcb\xfb\x9a" +
	"\xce\xf6\x41\x0d\xf4\xfd\x1c\x8d\x62\x12\x4d\x29\x24\x08\xf4\x77\x41\xa0\xbe\x4f\x28\x08\x03\xf0\x1c\xb4\x12\x4b" +
	"\xef\x3d\xa0\x96\xea\x67\xbf\x35\x6a\x45\xd6\x07\x43\xab\x05\x68\xf5\x6a\x79\x5a\xcd\x74\xea\x2d\x13\x8e\x40\x27" +
	"\x4a\x77\x58\x46\x66\x7c\x2c\xee\x01\x35\x17\x54\xa6\x97\xaf\xbc\x35\x49\xcd\xdc\x75\xe2\x35\x2c\x46\xb1\x16\xf3" +
	"\x0c\x94\x5d\x91\x49\x49\x76\x5d\x2a\xa4\x5e\x66\xf9\xce\xf1\xf5\xbe\x5b\x92\xff\xb4\x1b\x24\x8f\x45\xaf\x21\xf8" +
	"\xc6\x09\xfe\x66\x5d\x04\xd7\x90\x33\x76\xb5\xa2\xd1\x21\x6b\x1a\x95\xac\x02\x1d\x03\xe2\x80\x58\x96\x2f\x26\x5b" +
	"\x37\xe6\x1c\xb7\xba\xd0\x5e\x9d\x66\xaa\xe7\xdb\x0c\xef\xb5\x9f\x2b\x1f\x86\x52\x3f\x34\xab\xfd\x4e\xbd\x96\x58" +
	"\xc5\xd5\xec\x3c\x72\x93\x05\x34\xf6\x36\x0b\x8a\x57\x2c\x28\xf4\x99\x98\x1f\xfd\xec\x44\xe5\x01\x2c\x4b\x52\x9a" +
	"\xe6\x5f\x94\x4d\xf7\xd4\x41\xe9\x72\x4d\x65\xd3\x26\x6d\x25\xd5\x54\xe6\x7b\x0b\x0e\x42\xee\xf4\x06\xbe\xc6\xfd" +
	"\x2c\x75\x32\x2e\x75\xeb\xb9\xf2\x34\x69\xcd\x12\xb7\x1e\x51\x3a\x6b\x05\x57\x73\xe6\x91\xa7\xfd\x11\xf6\xf1\xd4" +
	"\x79\x24\x5a\xdb\x91\x0b\xdc\x7e\x1a\xe0\x43\x3e\x66\xb5\x18\x30\x89\xe7\xd4\x47\x1c\xb1\x01\x26\x83\x09\x61\x5c" +
	"\xb7\x38\xa6\xa2\x4c\xf5\xa9\xc1\xbe\xed\x86\x0e\x7a\x59\x7e\x33\xb9\xd4\x27\xcc\xf2\x42\x97\xe3\x92\x66\xd3\x6b" +
	"\xf0\xe2\x83\xd5\x4f\xc9\xa4\xb3\x52\xb4\x0d\xd6\x7f\x42\x44\x6f\xd6\x3d\xf4\x94\x23\xd5\xd4\xbf\x14\x8d\x51\xf1" +
	"\xce\xba\x60\xc9\x4b\x1c\x7c\xa1\xee\xa7\x1b\xdf\x2e\x4b\xbf\xab\x77\xc0\xe4\x70\x2c\x19\x8d\xfd\xbf\xe9\x48\xd4" +
	"\xae\x0b\x6c\x9d\x79\x5e\xde\x28\x5e\x7d\xd1\xfc\x28\x85\x21\x43\x9f\xa3\x4e\x0b\x3e\x3f\xc9\xbf\x4d\x16\x36\x60" +
	"\xb2\xb0\xe9\xb3\xb0\xc9\xeb\x34\xe5\x29\xd8\x4e\x3d\xe4\x38\x5e\x46\x2e\xeb\xf2\xaf\x05\x14\x39\x58\x3a\xbd\x99" +
	"\xfc\x6b\xd6\xbd\xca\xbf\x76\x98\xfe\xce\x27\x60\x3b\x3c\x39\x3e\x3a\xe9\x1e\xb6\x5b\xc9\xc5\x8f\x07\x94\x80\xad" +
	"\xbd\x60\x06\xb6\x38\x53\x61\xfd\x9f\xd8\x41\xe0\x03\xb5\x27\x88\xf1\x68\xb2\xc0\x87\xe1\x9f\xc8\xe6\xab\xdc\x40" +
	"\xcb\xf8\x18\xcf\x72\x01\x7e\xeb\x8f\xdc\xf0\xfa\xf5\xab\x99\x0e\xc0\x6b\xf3\xd2\xd5\x06\x47\x38\xad\x38\xfb\xf3" +
	"\x92\x74\xe4\x1e\xcd\xf7\xbf\x2d\xe0\xde\x4d\xb8\xd1\xaa\xe3\x70\xd2\x80\xde\xa5\xa3\x59\xd8\x8b\x56\xef\x88\xb7" +
	"\x84\x59\x68\xbe\x73\x5f\xde\x79\x6f\x16\x3a\x35\x0e\x99\x5b\x77\xc8\xc4\x6c\x00\x5d\xe8\x21\x07\x6e\xce\x2d\xd3" +
	"\x41\xf6\x78\x15\xb3\xac\x21\xbe\xda\x64\x4d\xc4\xaf\xe2\xc0\x7d\x37\xde\xb8\x86\xe4\x6a\x93\x35\x91\x3c\x5e\xec" +
	"\x03\x66\x43\x37\x56\x7a\x4a\xa5\x97\x61\x03\x4d\xcd\x47\xc5\x06\x86\x03\x34\x35\x1f\x2e\x07\x54\xbd\xc0\x73\x37" +
	"\x64\x7f\x19\xf1\xe7\x27\xc9\x9e\xe0\xbd\xf6\x3b\x0d\x23\xac\x53\x14\x80\x48\x14\x2c\xcf\x0e\xf3\x6e\x65\xad\xc2" +
	"\x0e\x17\x94\x88\xb3\x2d\xd8\x7f\x3f\xdd\xaf\x34\x36\x17\xc3\x0f\x6b\x03\x85\x2b\x42\x82\x8d\xb2\x02\x71\x8c\x3c" +
	"\xd8\xf0\xc6\xb0\x9b\x94\x3f\x9f\x5a\x86\x0d\xfd\x37\x49\xff\xc4\x00\xbf\x9b\x5c\x20\x8d\x04\x86\x01\x36\xb9\x01" +
	"\x14\x2d\xa5\x3b\x72\x43\xeb\x82\xb8\xd8\x56\xad\x8e\x86\xf0\xeb\x93\xfc\xfa\xe9\xdd\x85\x65\xff\xc0\x89\x3e\x8b" +
	"\x82\x19\x0a\x35\x1b\xcf\x9b\xdb\x5d\x9a\x7b\x25\x9f\xbd\xf8\xbd\x09\x9b\x84\x3e\xdf\x0f\x83\x1f\x7f\x92\xe1\x8b" +
	"\xbe\x95\xba\x4c\xd4\x85\xc0\x61\x7d\xeb\x76\x19\x3f\x2a\xe9\xcc\xf5\xea\x46\x4b\x65\xf5\x53\xe2\xd9\xa4\xd0\xd3" +
	"\x73\x85\x2c\x7f\x3a\x48\x3c\x05\x54\xba\x15\x26\x21\x9d\x8c\xa9\x4f\x12\xf6\x50\xb1\xd5\x6d\xb1\xcd\x52\x9f\x56" +
	"\x8c\xa4\x5e\xe5\x9b\x64\xa8\xc6\xe2\x37\xcd\xe5\xc9\x0a\x2e\x68\x84\x3a\x88\xbe\xba\xf9\x8c\x63\x5b\xf3\x27\xcd" +
	"\xdd\xfe\x58\xa8\x48\x33\xc0\x08\x86\xae\xe6\x6e\x5d\xe2\x6b\xc3\x90\x2b\x4e\x79\x65\x3a\x4a\x00\x19\xc8\x38\xf3" +
	"\x69\xaa\x89\x1a\x7d\xe5\x44\xdb\xb7\x52\x6f\x6f\x51\x1e\x10\xa7\x06\xfa\x56\xe4\x41\x18\x35\xc8\xba\x7a\xa6\xce" +
	"\x80\xf2\x75\xc4\x41\x91\x77\xa1\x18\x85\x28\x4e\x0d\x26\x60\x44\x89\x97\x7c\x85\x1d\x19\x66\x63\x2f\xc7\x46\x23" +
	"\xe9\x33\xf2\x37\x04\xc3\x9b\xf4\xcb\x0a\x23\x8b\x3c\x17\x35\xa5\x89\x6f\x63\xe6\x57\xfc\xe5\x72\xf2\x45\xb7\x82" +
	"\xe9\x80\x83\x98\x1d\x87\x5b\xd2\xf8\x87\x51\xf8\x6d\xea\xd1\xa3\x75\x37\x9c\x15\xe7\x8e\x22\x16\xba\xfc\xcd\xbc" +
	"\x85\x18\xd1\x4e\xcb\xbc\x3a\x76\xd6\x2d\x80\xf9\x4b\x20\x71\x75\xd3\x96\x6a\xd7\x41\x6e\x25\x20\xd7\xd1\x35\xd5" +
	"\x2c\xd0\x0a\x5f\x38\xef\x75\x1e\x82\xbe\xf6\x6d\x85\x67\x5f\xe7\x2e\xc6\xc4\x57\xab\xaa\x74\x4e\x92\x54\xc5\x3e" +
	"\xd4\x8a\xaf\xc0\x39\xf1\x47\x78\x1c\xc6\xbf\xf6\xf3\xea\xb6\xf3\x8f\xec\x60\x3b\x3e\x9b\x69\xa5\xf5\xf9\x21\xac" +
	"\xd9\xd5\x40\x7d\x76\xad\x73\x3f\xa8\xe0\x6a\x90\xf3\x17\xd9\x15\x57\x03\xd5\x89\xc5\xb8\x1a\x3c\x78\xa4\x79\x87" +
	"\xae\x06\xfe\x74\x93\xdc\x4d\x9b\x43\x9c\x1c\x40\xae\x3f\xc3\x03\x4a\x93\x35\xea\x16\x72\xf7\x78\x36\x77\x9a\x49" +
	"\x12\x0b\x2c\xc7\x0d\xe7\x17\x5f\xc0\x39\xa1\xba\x2f\x34\xbc\xb0\x96\x40\x00\x92\x17\x92\xeb\xb4\xbb\xa9\x71\x32" +
	"\xda\xc6\xdd\xf6\x41\x32\x2a\x27\xa3\x72\x32\x2a\x27\xa3\x72\xca\x0f\x6a\x71\x95\xd3\xf3\xd9\xca\x1c\xbd\x49\xc4" +
	"\x68\x55\x1e\xab\x56\x25\xbe\x85\x01\x04\x3c\xd8\xd2\xf5\xd6\x72\x55\xc9\x9d\x5c\x6b\x99\x93\x65\xf9\x44\x51\x6b" +
	"\xcc\xbb\xd5\x92\x28\x4b\x13\x7d\x95\x8c\xc4\x08\xa0\xef\x80\x8f\xc8\x26\x9e\x87\x7c\x27\xba\x13\xa4\x9d\xad\x5d" +
	"\x4f\xb0\x54\xaf\x83\x77\xf8\x1a\x39\xea\x85\xb0\x25\x12\x29\x9d\xac\x42\xb6\xd3\x52\xb2\xa5\xc9\x42\xad\x22\x39" +
	"\xcf\xf2\x8f\x32\x49\x5b\xfe\x71\xac\x5e\x8e\x2c\x4d\xbe\x54\x21\xb5\x92\xae\x74\x82\x1d\xf4\x93\x17\xf0\x9b\x19" +
	"\xe5\xff\x42\x94\x94\x25\x12\x5d\x22\xc5\xe8\x8a\x39\x44\x67\x07\xbc\x7f\x8c\x49\x44\x2b\x22\xee\x0f\x43\x26\x18" +
	"\x4b\xea\xa4\x7b\x60\x5e\x44\x6e\xd1\xe2\x49\xb7\x7d\xd6\xb5\xd1\xd2\xf1\xfe\xb2\x92\x25\x7a\xa3\x3b\x23\xfe\xa3" +
	"\x7c\xe3\xa8\x63\x9f\x1d\x3b\x6b\x7c\x23\x9d\x19\x73\x54\xbe\xf3\x04\x0d\x3b\x4b\xbf\xf3\x22\xb9\x12\x1b\xbd\x2f" +
	"\x9c\x37\xa7\xa3\x33\xd4\x71\x3a\x3a\x95\x6d\x46\x12\x76\xb5\xc5\x5a\xce\x96\xa5\xf9\x6c\x5a\x47\x15\x77\xdc\xbb" +
	"\xce\xc1\xb5\xe8\x24\x56\x30\x50\x00\xe5\x0c\x51\x84\x25\x33\x83\xbd\x78\x08\xb2\x90\x22\x2f\x12\x98\x91\x12\x25" +
	"\xbd\xf4\x5c\x7c\xd3\x62\x80\x79\x6e\x77\x2a\x70\x96\x42\x2f\x02\xcf\xa9\x01\x33\xed\xa0\x6f\x35\x1a\x39\xfb\x2a" +
	"\xf8\x36\x41\x14\x81\x7e\x9c\x8b\xab\x6f\x81\x17\xe0\x59\x31\x44\x62\x2a\xb7\x9e\x49\x0c\x90\x58\x3d\x5f\x80\x67" +
	"\x4f\x93\xee\xa6\x65\xa9\x7d\x54\x96\x07\xc4\xc9\xb6\x8a\x2d\xac\xb2\xc8\x67\xcf\x00\x78\xf9\xfe\x35\x78\x2a\x43" +
	"\x9d\x60\x57\xab\x8d\xae\x0c\xec\x35\x94\x2d\x00\xfb\x59\xb9\xd1\xee\x35\xbc\x5f\x01\x70\x17\x9a\x6a\x0f\xa7\x97" +
	"\xe8\xa6\xd4\x1f\x4d\x56\x20\x01\xa2\x30\x3a\x29\x6a\xf2\xd3\x03\x90\x8d\x8c\x82\x83\x7a\xfb\xa4\x53\xef\x1c\xd6" +
	"\xdb\xf5\xb3\x76\x23\x64\x75\x04\x19\xaf\x77\x1a\x36\xf1\x82\x90\xa3\x86\x44\x35\xbe\xee\x08\x5e\xf5\x30\x2d\x58" +
	"\x37\x09\x99\xf2\xf2\x7d\x31\xcc\x75\x76\x54\x72\x7e\x57\x1e\x95\x1d\x84\x15\x0e\xda\x0b\xed\x1b\x15\x23\xc4\x64" +
	"\xd4\x2c\xed\x56\xab\x05\x9e\x83\xb5\x06\x45\x4d\x3a\x93\x51\x97\x58\xd6\x89\x43\x3c\x89\xa3\x3d\xe5\xfb\x17\x05" +
	"\x39\x57\x0e\x6d\x38\xc0\x99\x1a\x9f\x15\x12\x19\x4e\xe3\x39\xcd\x4e\x74\xb8\x40\x40\xa7\xca\x68\x68\xd9\x48\xa6" +
	"\xcb\xe0\xa0\x25\x36\xb8\x6a\x8b\xc7\x28\xc9\xa2\x6f\x9a\x2b\x43\x67\xb2\xe1\x86\xd4\x63\xf9\x48\x7c\x62\xf5\xaa" +
	"\x5b\x3e\xcd\xb1\x50\xf9\xb6\xbf\x93\xdb\x78\x15\xfd\xdc\x83\xdd\xc6\xef\xab\x96\x6e\x23\x47\x2e\x23\xde\x8a\xe5" +
	"\x8f\x48\xbc\xc5\x7c\xf1\xe0\x04\x9c\x26\xe3\x8a\x11\x70\x33\xbf\x70\x07\x04\xdc\x5e\x49\x9b\xbb\xcc\x24\x9d\x2a" +
	"\xea\x13\x3c\xda\x03\x19\xa0\x5a\x03\xa9\xa2\x44\xa3\xbc\x07\xfb\xd8\x97\x2d\x3d\xec\x62\x9b\x50\xa4\xfa\x99\xce" +
	"\xcd\x40\xbd\x40\x04\x44\x93\x82\x3a\xf9\x9b\x95\x9e\xb9\x98\xd1\x2b\x3d\x0f\xf9\xc4\xd7\x9c\x37\xee\x26\x3b\xf3" +
	"\xc2\x29\xa8\xd3\x61\x24\xae\x60\x3b\x32\x94\x9d\x4e\x34\x6d\xac\x64\xa0\xdd\x2d\x5d\x5f\x33\xcd\x64\xca\xb8\x8d" +
	"\x9d\xcc\xd8\xc9\x36\x6d\x27\xeb\x81\xc8\x9b\x76\xbe\x55\x67\xad\x96\xb2\xf8\xa5\xdb\x35\x96\xc5\x2f\xdd\xa6\xbd" +
	"\xac\xea\xe4\x1a\x93\xd9\x2a\xf3\x68\xac\x66\xcb\x58\xcd\x8a\x89\x71\x76\xda\x56\xf6\xa8\x95\x6c\x2b\x9c\x0a\x0b" +
	"\x4d\x8d\xad\x6c\xb9\x51\xed\x84\xad\x6c\x66\x5e\xab\x1d\x34\x7a\x6d\xd6\xae\x35\x6f\x63\x58\xbb\x65\x6b\x36\x6e" +
	"\x31\xda\xdf\x62\xf9\x76\xb5\xbf\xdb\xb1\x5f\xc5\x5c\xf0\x90\x34\xbc\x8f\xda\x13\xe5\xbe\x6a\x78\x37\x75\x10\x32" +
	"\x72\xac\x58\xfe\xb0\xe4\xd8\xd4\x50\xf5\x00\x25\x99\xb1\x55\x2d\xfa\x85\x3b\x20\xc9\x4a\xb5\x11\x3b\x61\xab\x8a" +
	"\x6f\xf6\xcf\x31\x57\xcd\xbf\x6c\x62\xac\x53\x5b\xb7\x4e\x69\xcd\x28\xe9\xd9\x65\xa7\xcc\x3a\xc6\x42\x95\xed\x69" +
	"\x0d\x16\xaa\x3d\xe5\x75\xd9\x94\x8e\xd9\xa4\x6c\xf7\x3d\xa7\x63\x69\x06\x96\x44\x77\x31\xad\x31\x8b\xbd\xaa\xc1" +
	"\x3e\x25\xb3\xa3\xa0\x37\xe0\x70\x1c\xa9\x24\x19\x20\x7e\xc9\x25\xd8\x08\x63\xa4\x51\xcd\xbe\x61\x3e\x01\x97\xe8" +
	"\xe6\xc5\xac\xa8\x66\xea\xbb\x57\xcd\xfd\x68\xbd\x2f\x09\x4e\x5d\x2d\x05\x64\x21\xf3\x59\x95\x04\x90\xdb\x9d\xa1" +
	"\x47\x9c\x22\xb2\xb6\xc9\x15\x86\x67\x2d\x2e\x7c\x6f\xd6\x55\x06\xbc\x97\xf3\xd4\x14\x95\xaf\x7d\xf5\xc5\x61\xe2" +
	"\xc0\x27\x5d\xaa\x80\x4a\x4b\x50\x9b\x64\xe0\x2e\x97\xe1\x4a\x13\x6a\x16\xab\xfc\xdb\xd0\x76\x58\x87\xb8\xee\x74" +
	"\x8f\x87\xa7\xc7\x5d\xfb\xb8\x3e\x61\xc1\xf8\xfb\xfc\x1d\x52\xd7\x68\x27\x17\x77\xe6\x7c\x5d\x9d\x01\xe3\x13\xb8" +
	"\x9e\x8f\x45\x9d\xe8\xc9\xfa\x57\x7e\x31\x29\x40\xa5\xe5\xae\x69\xb6\xad\xb5\xbe\xd5\xf9\x35\x82\x40\xfe\x6d\x4e" +
	"\x10\x54\x5a\xf8\xbb\xb9\xd0\x37\xc6\x84\xe5\x8a\xba\xb5\x2f\xff\xb2\x9c\x10\x95\x84\x40\x69\xe3\x6d\x89\x82\x1d" +
	"\xa0\xc0\x23\x16\x10\xc9\xbf\xd7\x94\xf9\xfd\xef\x87\x2d\xcf\x64\x7f\x2f\x8e\xe3\xbe\x67\x7f\xbf\x28\xfa\x4f\x4d" +
	"\x93\xbf\x9f\x38\xd0\xfb\xee\xa4\x6f\xcb\x64\x7e\x8f\xbc\xe2\x04\x93\x25\xd9\xcb\x03\x4a\xae\xb0\x83\x28\x6b\xdc" +
	"\x40\xcf\x4d\x32\xc0\xc3\x00\xc7\x0a\xa2\x69\xac\xe6\xa4\x62\x4f\xfe\xac\x03\x07\x33\x38\x74\xd1\x6b\xe4\xa2\xc8" +
	"\xd0\x96\x65\xe6\x69\xb2\xf3\x9c\x9e\x6f\x44\x5c\x07\xd1\xde\x54\x26\xc5\x4f\xe5\x65\x67\xe5\x59\x4c\xb6\x5e\x32" +
	"\x41\x01\xe4\x93\x1e\x68\x5e\x41\xda\x74\xf1\xb0\x39\x8e\x32\xc6\x37\x93\x61\xb0\xa6\xd2\x01\x1d\xbf\x75\xd2\x30" +
	"\xd3\x62\x39\xf6\xc0\x08\xbb\xe2\x53\x1c\xf2\xcd\x77\x09\x74\x06\x69\xeb\x06\x9b\x24\x43\x07\xe0\xc9\xdf\x9a\x21" +
	"\xa3\xcd\x21\xf6\x9b\xc8\xbf\x02\x6c\x12\x3f\x67\x88\x83\x3a\x0a\x47\xf1\x4f\xef\xd2\xc1\x14\xd4\x83\x8a\x9f\xb5" +
	"\x07\xc0\xff\x06\x00\x00\xff\xff\x0f\x96\x98\x97\x4a\x87\x01\x00")

func bindataConfigMapGrafanadatasourcesyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataConfigMapGrafanadatasourcesyaml,
		"ConfigMap/grafana-datasources.yaml",
	)
}



func bindataConfigMapGrafanadatasourcesyaml() (*asset, error) {
	bytes, err := bindataConfigMapGrafanadatasourcesyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "ConfigMap/grafana-datasources.yaml",
		size: 100170,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555896241, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimAdmissioncontrollerlogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x3b\x4e\x04\x41\x0c\x44\xf3\x3e\x85\x2f\x30\x48\x10\x76\x4a\x40" +
	"\x84\x40\x04\x43\x6c\xb9\x0b\x64\x6d\xff\xd6\xf6\xcc\xf9\x57\x2d\xcd\x86\xaf\xf4\x5e\xf1\xd4\x1d\xe6\x3a\x7a\xa6" +
	"\xf3\x35\xdd\xb4\x97\x4c\xdf\x6b\xf1\x40\x8f\x7d\xd4\xa3\xe1\xbd\xb2\xb6\xd4\x10\x5c\x38\x38\x27\xa2\xce\x0d\x99" +
	"\xb8\x34\xf5\xd5\x6e\x32\x7a\xd8\xa8\x15\xf6\x32\x4f\xb9\x04\x9f\x2c\xc8\xf4\x87\x02\xe3\x18\xc6\x9a\x7c\x42\x56" +
	"\xcf\x22\x70\xff\x1c\x05\xbe\x90\x68\xa3\x1f\x70\xf9\x35\x0d\x7c\x75\x41\x22\x32\xf8\x38\x4c\x9e\x82\xe1\x7e\xc0" +
	"\xe3\x22\x22\x5f\x87\xff\xc8\xf4\xf6\xa1\xf4\x08\x00\x00\xff\xff\x30\x6f\xb1\xba\xc6\x00\x00\x00")

func bindataPersistentVolumeClaimAdmissioncontrollerlogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimAdmissioncontrollerlogyaml,
		"PersistentVolumeClaim/admission-controller-log.yaml",
	)
}



func bindataPersistentVolumeClaimAdmissioncontrollerlogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimAdmissioncontrollerlogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/admission-controller-log.yaml",
		size: 198,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555895623, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimAlamedaailogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x3b\x0e\xc2\x30\x10\x44\x7b\x9f\x62\x2f\x10\x24\x28\xdd\x52\x50" +
	"\x21\x10\x45\xa8\x47\xf6\x80\x56\xc4\x1f\xbc\x4e\xce\x8f\x2c\x85\xf2\x3d\xcd\x3c\x54\x9d\xd9\x4c\x4b\xf6\xb2\x1d" +
	"\xdd\x47\x73\xf4\x72\x1f\xc6\x3a\x73\x9f\xcb\xb2\x26\x9e\x17\x68\x72\x89\x1d\x11\x1d\xde\x89\x64\x24\x7a\xc1\x82" +
	"\xc4\x88\x09\x7a\xa8\x5b\xd8\xb5\x55\x04\x7a\x79\x31\xb2\xa1\x97\x06\x75\x56\x19\xc6\x0b\x21\xd0\xec\x5a\x22\x6d" +
	"\xa0\xc8\x24\x0f\x22\x3e\x9b\x76\xde\x72\xa0\x13\x69\xb4\xb2\xb6\xf0\x1f\x34\x7e\x57\x5a\xdf\x49\xc4\x46\xf0\x4d" +
	"\x2f\xa7\x8b\xca\x2f\x00\x00\xff\xff\xe1\xcd\x6c\xef\xbc\x00\x00\x00")

func bindataPersistentVolumeClaimAlamedaailogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimAlamedaailogyaml,
		"PersistentVolumeClaim/alameda-ai-log.yaml",
	)
}



func bindataPersistentVolumeClaimAlamedaailogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimAlamedaailogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-ai-log.yaml",
		size: 188,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555895623, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimAlamedadatahublogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x3b\x0e\x02\x21\x14\x45\x7b\x56\x71\x37\x30\x26\x5a\xd2\x5a\x58" +
	"\x19\x8d\xc5\x58\x3f\xe1\xaa\xc4\xe1\x23\x0f\x66\xfd\x86\x64\x2c\xcf\xb9\x1f\x29\x61\x66\xd5\x90\x93\xc5\xba\x37" +
	"\x9f\x90\xbc\xc5\x75\x18\x6d\x4c\x6d\xce\x4b\x8f\x3c\x2e\x12\xa2\x89\x6c\xe2\xa5\x89\x35\x40\x92\x48\x0b\x59\x24" +
	"\xd2\xcb\x34\xec\xbb\x3f\x76\x65\x75\x5b\xa6\x45\x1c\x2d\x9e\xf4\xac\xd2\x72\x95\x60\xb4\xd0\x8d\xa9\x38\x47\xd5" +
	"\x73\xf6\xd4\x81\xc0\x84\x1b\xc5\xdf\x6b\x68\xbc\x24\x47\x03\x54\x6a\xee\xd5\xfd\x0b\x95\xdf\x4e\x6d\x1b\x01\x3a" +
	"\x0e\x5f\xb4\x38\x9c\x02\x7e\x01\x00\x00\xff\xff\xab\x25\x59\x81\xc1\x00\x00\x00")

func bindataPersistentVolumeClaimAlamedadatahublogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimAlamedadatahublogyaml,
		"PersistentVolumeClaim/alameda-datahub-log.yaml",
	)
}



func bindataPersistentVolumeClaimAlamedadatahublogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimAlamedadatahublogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-datahub-log.yaml",
		size: 193,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555895623, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimAlamedaevictionerlogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\xbb\x6e\xc3\x30\x0c\x45\x77\x7d\x05\x7f\xc0\x05\xda\x51\x6b\x87" +
	"\x4e\x45\x8b\x0c\xce\x4c\x50\x37\x01\x11\xeb\x11\x92\xf6\xf7\x07\x02\x9c\xf1\xdc\xc7\xe1\xa1\x2b\xcc\xb5\xb7\x4c" +
	"\xc7\x67\x7a\x68\x2b\x99\xfe\x67\xe2\x81\x16\x6b\xdf\xf6\x8a\xef\x8d\xb5\xa6\x8a\xe0\xc2\xc1\x39\x11\x35\xae\xc8" +
	"\xc4\x1b\x57\x14\x5e\x70\xa8\x84\xf6\x06\xfb\x18\x87\x9c\xb5\x0f\x16\x64\xba\xa1\xc0\x38\xba\xb1\x26\x1f\x90\xf9" +
	"\x66\x11\xb8\xff\xf6\x02\x9f\x48\xb4\xd0\x05\x5c\xae\xa6\x81\xbf\x26\x48\x44\x06\xef\xbb\xc9\x7b\x60\x78\xee\xf0" +
	"\x38\x89\xc8\xa7\xf0\x8e\x4c\x5f\x3f\x4a\xaf\x00\x00\x00\xff\xff\x8d\xd2\xa5\x96\xc4\x00\x00\x00")

func bindataPersistentVolumeClaimAlamedaevictionerlogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimAlamedaevictionerlogyaml,
		"PersistentVolumeClaim/alameda-evictioner-log.yaml",
	)
}



func bindataPersistentVolumeClaimAlamedaevictionerlogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimAlamedaevictionerlogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-evictioner-log.yaml",
		size: 196,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555895623, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimAlamedaoperatorlogyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\xbd\xae\xc2\x30\x14\x83\xf7\x3c\x85\x5f\xa0\x57\xba\x8c\x59\x19" +
	"\x98\x10\x88\xa1\xcc\x47\x89\x41\x11\xcd\x0f\x39\xa7\x7d\x7e\x14\x51\xc6\xcf\x9f\x6d\x69\x69\x66\xd7\x54\x8b\xc7" +
	"\xf6\xef\x5e\xa9\x44\x8f\xeb\x48\xd4\x58\x6c\xae\xcb\x9a\x79\x5c\x24\x65\x97\x69\x12\xc5\xc4\x3b\xa0\x48\xa6\x87" +
	"\x2c\x92\x19\x65\xaa\x8d\x5d\xac\xf6\xbf\xb6\x85\x5d\x6a\x93\x40\x8f\x07\xe3\x57\x49\x72\xda\x18\xc6\x56\x42\xa0" +
	"\xea\xb9\x46\xea\x40\x60\xc2\x8d\x12\xef\x3d\x19\x2f\x25\xd0\x01\x9d\x5a\xd7\x1e\x7e\x85\xce\xf7\x4a\xb5\x9d\x00" +
	"\x1d\x87\x4f\x7a\x1c\x4e\x09\x9f\x00\x00\x00\xff\xff\x85\x2e\x8c\x16\xc2\x00\x00\x00")

func bindataPersistentVolumeClaimAlamedaoperatorlogyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimAlamedaoperatorlogyaml,
		"PersistentVolumeClaim/alameda-operator-log.yaml",
	)
}



func bindataPersistentVolumeClaimAlamedaoperatorlogyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimAlamedaoperatorlogyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/alameda-operator-log.yaml",
		size: 194,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555895623, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimMyalamedagrafanaPVCyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x3b\x6a\xc4\x30\x14\x45\x7b\xad\xe2\x6d\xc0\x86\xa4\x54\x9b\x22" +
	"\x55\x48\x48\xe1\xa9\x2f\xd2\xb5\x11\x63\x7d\xe6\x3d\xd9\x30\xbb\x1f\x04\x9e\xf2\xdc\xcf\x41\x4b\x0b\xd5\x52\x2d" +
	"\x5e\xce\x0f\x77\x4f\x25\x7a\xf9\x1b\x89\x75\x96\xbe\xd4\xfd\xc8\xfc\xda\x91\xb2\xcb\xec\x88\xe8\xf0\x4e\xa4\x20" +
	"\xd3\x4b\x7e\x4e\xd8\x91\x19\x31\x6f\x8a\x15\x05\x73\x3b\xc3\x55\x5b\x43\xa0\x97\x95\x91\x8a\x5e\x15\xc9\x59\x63" +
	"\x18\x6f\x84\x40\xb3\x9f\x1a\x69\x03\x45\x26\xf9\x27\xe2\x4d\x53\xe7\x6f\x09\x74\x22\x4a\xab\x87\x86\xf7\x40\xf9" +
	"\x38\x68\xfd\x22\x11\x1b\xc2\x8d\x5e\x3e\xbf\x93\xbc\x02\x00\x00\xff\xff\x05\x22\x1e\x79\xc4\x00\x00\x00")

func bindataPersistentVolumeClaimMyalamedagrafanaPVCyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimMyalamedagrafanaPVCyaml,
		"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml",
	)
}



func bindataPersistentVolumeClaimMyalamedagrafanaPVCyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimMyalamedagrafanaPVCyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/my-alamedagrafanaPVC.yaml",
		size: 196,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555895548, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPersistentVolumeClaimMyalamedainfluxdbPVCyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\xbb\x6e\xc3\x30\x0c\x45\x77\x7d\x05\x37\x4f\x36\xea\x55\x6b\x87" +
	"\x4e\x45\x8b\x0e\xee\xcc\x48\xd7\x01\x11\xbd\x22\x4a\x46\xf2\xf7\x81\x00\x67\x3c\xf7\x71\xb8\xc8\x86\xaa\x92\x93" +
	"\xa5\x63\x35\x37\x49\xde\xd2\xef\x48\xb4\x21\xb5\x2d\x87\x1e\xf1\x19\x58\xa2\x89\x68\xec\xb9\xb1\x35\x44\x89\x23" +
	"\x2c\xc5\xe7\xcc\x81\x23\x3c\x2f\x92\xf6\xd0\x1f\xfe\xb2\x94\xc3\x9d\xbd\x16\x76\xb0\xb4\xc3\xa3\x72\xcb\x95\xc5" +
	"\x68\x81\x1b\x77\x76\x0e\xaa\xdf\xd9\x43\x07\x12\xcd\xf4\x07\xf6\xff\x55\x1a\x7e\x92\x83\x21\xaa\xd0\xdc\xab\x7b" +
	"\x0f\x2a\xee\x1d\xda\x4e\x22\xd2\x21\xbc\xc2\xd2\xb4\x7e\x7c\xc9\xf4\x0a\x00\x00\xff\xff\x1f\xa2\x03\x61\xc7\x00" +
	"\x00\x00")

func bindataPersistentVolumeClaimMyalamedainfluxdbPVCyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPersistentVolumeClaimMyalamedainfluxdbPVCyaml,
		"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml",
	)
}



func bindataPersistentVolumeClaimMyalamedainfluxdbPVCyaml() (*asset, error) {
	bytes, err := bindataPersistentVolumeClaimMyalamedainfluxdbPVCyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml",
		size: 199,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555895548, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAdmissioncontrollerSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x41\xaa\xc3\x30\x0c\x44\xf7\x3e\xc5\x5c\x20\x90\xcf\xcf\xa2\xf8" +
	"\x14\x85\x42\xf7\xaa\x3d\x2d\xa6\x8e\x6d\x24\x91\xf3\x97\xf8\x00\xed\xee\x21\x31\xf3\x46\x46\xb9\x53\xad\xf4\x16" +
	"\x71\xfc\x85\x77\x69\x39\xe2\x46\x3d\x4a\x62\xd8\xe9\x92\xc5\x25\x06\xa0\xca\x83\xd5\x4e\x02\x64\x8c\x08\xc9\x7b" +
	"\xb1\x33\xb8\xa4\xde\x5c\x7b\xad\xd4\x00\x34\xd9\xf9\xf5\x69\x43\x12\x23\x9e\xcc\x54\xf1\xae\x52\x82\x0d\xa6\xb3" +
	"\x79\x74\xf5\xa9\x58\x26\x46\x6c\xdb\xff\x14\xba\xe8\x8b\x7e\x9d\xb7\xcb\xba\xae\x01\x30\x56\x26\xef\xfa\x63\xd1" +
	"\x27\x00\x00\xff\xff\xf4\xe7\x31\xb4\xe0\x00\x00\x00")

func bindataServiceAdmissioncontrollerSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAdmissioncontrollerSVyaml,
		"Service/admission-controllerSV.yaml",
	)
}



func bindataServiceAdmissioncontrollerSVyaml() (*asset, error) {
	bytes, err := bindataServiceAdmissioncontrollerSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/admission-controllerSV.yaml",
		size: 224,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAlamedadatahubSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\x0e\xc3\x20\x14\x43\x77\x4e\xe1\x0b\x44\x4a\x87\x2c\x5c\xa3" +
	"\x52\x77\x07\xdc\x16\x95\x04\xf4\xa1\x39\x7f\x45\xd4\x35\x9b\x65\x5b\xcf\x66\x4d\x0f\x59\x4b\x65\xf7\x38\x6e\xee" +
	"\x93\xf6\xe8\x71\x97\x1d\x29\xc8\x6d\xea\x8c\xec\xf4\x0e\xc8\x5c\x95\xdb\x50\x00\x6b\xf5\x60\xe6\xa6\xc8\x69\x14" +
	"\xde\xdf\xd5\x01\x3b\x37\x5d\xf9\xad\x32\xc8\xe3\xa9\x28\x63\x2f\xc6\xe4\x5a\x55\x18\xbc\x5a\xac\x9f\xe0\xe9\x4f" +
	"\x78\x59\x0d\xe7\xce\x48\x3c\x96\x79\x5e\x66\x07\x34\x65\x85\x5e\xec\xfa\xc3\x2f\x00\x00\xff\xff\x17\x03\xde\x3c" +
	"\xcd\x00\x00\x00")

func bindataServiceAlamedadatahubSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAlamedadatahubSVyaml,
		"Service/alameda-datahubSV.yaml",
	)
}



func bindataServiceAlamedadatahubSVyaml() (*asset, error) {
	bytes, err := bindataServiceAlamedadatahubSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/alameda-datahubSV.yaml",
		size: 205,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAlamedagrafanaSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\xaa\xc3\x30\x10\x44\x7b\x9d\x62\x2f\x60\xf0\xe7\x77\x3a\x45" +
	"\x20\x90\x7e\x22\x8d\x8d\x88\x2c\x2d\xab\xc5\xe7\x0f\x56\x95\xc6\xdd\xe3\x15\x6f\x06\x5a\x5e\xb4\x51\x7a\x8b\x72" +
	"\xfe\x85\x4f\x69\x39\xca\x93\x76\x96\xc4\x70\xd0\x91\xe1\x88\x41\xa4\xe2\xcd\x3a\x2e\x12\x81\x6a\x14\x54\x1c\xcc" +
	"\x58\x76\xc3\x86\x86\x20\xd2\x70\xf0\xce\x0f\x45\x62\x94\x8d\x99\x06\xef\x86\x12\x86\x32\x5d\x3d\xed\xe6\x33\xbc" +
	"\x4c\x8c\xf2\xbf\xae\xeb\xdc\x71\xd8\x4e\x7f\xfc\xca\xc1\xca\xe4\xdd\xee\x8f\xc8\x37\x00\x00\xff\xff\x1d\x9d\x3e" +
	"\xc2\xd3\x00\x00\x00")

func bindataServiceAlamedagrafanaSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAlamedagrafanaSVyaml,
		"Service/alameda-grafanaSV.yaml",
	)
}



func bindataServiceAlamedagrafanaSVyaml() (*asset, error) {
	bytes, err := bindataServiceAlamedagrafanaSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/alameda-grafanaSV.yaml",
		size: 211,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataServiceAlamedainfluxdbSVyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x41\x0a\xc2\x30\x14\x44\xf7\x39\xc5\xbf\x40\x41\x37\x52\x72\x0a" +
	"\x41\x70\x3f\x4d\xa6\x12\x4c\x93\xf0\xf3\x2d\x1e\x5f\x9a\x95\x1b\xdd\x3d\x66\xe0\xcd\xa0\xa5\x3b\xb5\xa7\x5a\xbc" +
	"\xec\x67\xf7\x4c\x25\x7a\xb9\x51\xf7\x14\xe8\x36\x1a\x22\x0c\xde\x89\x64\x2c\xcc\xfd\x20\x11\xb4\xe6\x05\x19\x1b" +
	"\x23\xa6\x54\xd6\xfc\x7a\xc7\xc5\x89\x14\x6c\xfc\x59\xf4\x86\x40\x2f\x2b\x23\x15\x56\x15\xc9\xf5\xc6\x70\x18\x5b" +
	"\x55\x1b\xea\x69\xa0\x97\xf9\x34\x5f\xc6\x92\x41\x1f\xb4\xeb\x77\xd8\x99\x19\xac\xea\x9f\x2b\x9f\x00\x00\x00\xff" +
	"\xff\x1e\x34\xee\x61\xd5\x00\x00\x00")

func bindataServiceAlamedainfluxdbSVyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataServiceAlamedainfluxdbSVyaml,
		"Service/alameda-influxdbSV.yaml",
	)
}



func bindataServiceAlamedainfluxdbSVyaml() (*asset, error) {
	bytes, err := bindataServiceAlamedainfluxdbSVyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Service/alameda-influxdbSV.yaml",
		size: 213,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAdmissioncontrollerDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xcf\x6e\xe2\x48\x10\xc6\xef\x3c\x45\x69\x2e\x73\xb2\x61\xb4\xcb" +
	"\xac\xb6\x6f\x1e\xec\xd1\x46\x0b\x04\x01\x1b\x29\x27\x54\x69\x97\x71\x2b\xfd\x2f\xdd\x6d\x47\xd6\x6a\xdf\x7d\xe5" +
	"\x80\x89\x9d\x40\xc8\x70\x42\xd5\xfe\x7e\xf5\x55\x75\x57\xa1\x15\x77\xe4\xbc\x30\x9a\x01\x5a\xeb\xc7\xf5\xb7\xd1" +
	"\xa3\xd0\x39\x83\x94\xac\x34\x8d\x22\x1d\x46\x8a\x02\xe6\x18\x90\x8d\x00\x34\x2a\x62\x80\xb9\x12\xbe\x55\x45\xdc" +
	"\xe8\xe0\x8c\x94\xe4\x8e\x87\xde\x22\x27\x06\x05\xe5\xe4\x30\x18\x87\x62\x04\x20\xf1\x81\xa4\x6f\xf5\xd0\xa6\x61" +
	"\x80\x12\x15\xe5\xf8\x12\xe0\x46\x59\xa3\x49\x87\x8b\x5c\xd4\xda\x04\x0c\xc2\xe8\x23\x23\x27\xcf\x9d\xb0\xe1\xc5" +
	"\x77\x4a\x85\xd0\xe4\xa1\x34\xcf\x10\x0c\xe4\x2f\xc6\x21\x94\x74\x09\x07\x10\x48\x59\x89\x81\x62\x94\xb6\xc4\xd8" +
	"\x58\xd2\xbe\x14\x45\x88\x85\x19\x3f\xa3\x08\x51\x61\x5c\xe4\x08\xf3\x86\xc1\xd7\xe0\x2a\xfa\x3a\xf2\x96\x78\x9b" +
	"\xdc\x91\x95\x82\xa3\x67\xf0\x6d\x04\xe0\x49\x12\x0f\xc6\x1d\x6c\x29\x0c\xbc\x9c\xf7\x6a\xed\xaa\x3d\xef\xa3\x73" +
	"\x71\x14\xf7\xba\xdc\xfe\x3e\xec\x74\xfb\x93\x83\x44\x1f\xa7\x02\xe8\xfc\x1f\x3a\xae\x03\x0a\x4d\xee\xa4\x8e\xae" +
	"\xa7\x03\x10\x0a\xf7\xc4\xe0\xa9\xc2\xa6\x6d\x94\x75\xc6\x96\x14\x7c\x30\x6e\x7c\xbc\xcf\xe8\x55\xef\x4a\x92\xac" +
	"\x9e\xc4\xbf\xc5\xdf\x87\x80\x55\x25\xe5\xca\x48\xc1\x1b\x06\x37\xc5\xd2\x84\x95\x23\xdf\x3e\xb3\xee\x2b\x47\xde" +
	"\x54\x8e\x53\xaf\x34\x00\x29\x94\x08\x83\x08\x00\xb7\x15\x83\xef\x13\x35\x08\x2a\x52\xc6\x35\x0c\xfe\x9c\x2c\x44" +
	"\xef\xc0\xd1\x53\x45\xfe\x2c\xe1\xf7\xe9\x79\xc2\x1f\xd3\x1e\x81\x74\xfd\x2a\xed\xba\x95\xcc\x93\x45\x96\x26\xbb" +
	"\x24\x5d\xcc\xb6\xf3\x5d\x9a\xad\xe6\xb7\xf7\x59\xba\x5b\x26\x8b\x6c\xb3\x4a\x66\x59\x8f\x5b\xa3\xac\xe8\xa7\x33" +
	"\x6a\xe8\xa0\x10\x24\xf3\x35\x15\xc3\xe8\x31\xbe\xc2\x50\xb2\xd3\xc3\x88\x4f\xe3\x75\xd5\x48\xb2\x4d\xfe\xfa\xe7" +
	"\xc7\x2e\x49\xd3\x75\xb6\xd9\xbc\x75\xc1\xe0\x4b\x77\x5f\x2d\xb7\xac\x1e\xe2\xde\xb8\xc6\xbe\xe6\x6c\x3a\x99\x4c" +
	"\x27\x5f\xae\xe5\xc9\x96\xc9\x8f\xf9\xbb\x22\x4f\x23\x73\x45\xbd\x9d\x6f\x76\xb3\x6c\xbd\xdd\xfd\xbc\x39\x07\x19" +
	"\x53\xe0\xe3\x20\x7d\xc4\xc9\x05\xdf\xfe\x8b\xb9\x0b\x9f\x81\xae\xd6\x37\x77\xc9\x36\xdb\xfd\x9d\xdd\x7f\x9e\xfd" +
	"\x48\xcd\x35\xf6\x2c\xf9\x05\xbf\x1c\x07\x76\x6b\x23\x2b\x45\x0b\x53\xe9\xfe\x1b\x8c\x40\xb5\x91\xc3\x3d\x0f\x01" +
	"\xbd\x04\x07\x33\xe7\x4e\xda\x15\x75\xab\x65\xc3\xa0\x40\xe9\xe9\x02\xb7\x46\x37\x96\x66\x3f\xee\x2f\xdd\x3e\xf9" +
	"\xec\xd4\x47\xd2\xec\xa3\x76\xb6\x71\xdf\x71\x0f\x35\x78\x06\x6f\x96\xc6\x67\xf5\x00\xa4\x6c\x68\x52\xe1\x18\xfc" +
	"\xfb\xdf\x1b\xc8\xfb\xf2\x3c\x71\x47\xa1\x3f\x18\x87\xc8\xf2\xe2\xa6\x8a\x82\xec\xe4\x9e\x5c\x2d\x38\x25\x9c\xb7" +
	"\x8d\xf8\x70\xb1\x0d\x3f\xbd\x4c\xff\x3f\x00\x00\xff\xff\x2c\x26\x8b\xc7\x2c\x07\x00\x00")

func bindataDeploymentAdmissioncontrollerDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAdmissioncontrollerDMyaml,
		"Deployment/admission-controllerDM.yaml",
	)
}



func bindataDeploymentAdmissioncontrollerDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAdmissioncontrollerDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/admission-controllerDM.yaml",
		size: 1836,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555895623, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedaaiDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcd\x6e\xdb\x30\x10\x84\xef\x7e\x8a\x45\xee\xb6\x95\x34\xee\x81" +
	"\x37\x17\x0a\xd0\x02\x4d\x62\x38\x69\xaf\xc5\x86\x5a\x5b\x44\x49\x2e\x43\xae\x54\x18\x45\xdf\xbd\xa0\x64\x3b\x92" +
	"\xed\xfe\xf0\xb8\xe4\x7c\x1c\x0d\x47\x18\xcc\x57\x8a\xc9\xb0\x57\x80\x21\xa4\x79\x7b\x3d\xf9\x6e\x7c\xa5\xa0\xa4" +
	"\x60\x79\xe7\xc8\xcb\xc4\x91\x60\x85\x82\x6a\x02\xe0\xd1\x91\x02\xb4\xe8\xa8\xc2\x29\x9a\xfd\x28\x05\xd4\xa4\x60" +
	"\x43\x15\x45\x14\x8e\xdd\x86\xc5\x17\xb2\x29\xab\x20\xc3\x8f\xb2\x6e\xa0\xd9\x05\xf6\xe4\xe5\x84\x86\xde\xb3\xa0" +
	"\x18\xf6\x7b\x65\x45\x49\x47\x13\xa4\xf3\x58\xd2\xc6\x78\x4a\x50\xf3\x0f\x10\x86\xaa\x33\x09\x52\x53\xbe\xc0\x1a" +
	"\xdd\x09\x8f\x40\x0e\xbd\x9b\x49\x0a\xa4\x33\x2d\x52\x77\x28\x29\xb8\x9e\x00\x24\xb2\xa4\x85\x63\x7f\x8f\x43\xd1" +
	"\xf5\xe7\x81\xe5\xb1\xe9\xde\x9d\x90\x0b\x16\x85\xf6\x92\x41\x30\x79\x5d\x08\x27\x2f\x3b\x82\x5e\xc2\x02\x1c\x1c" +
	"\xf6\xd1\x78\x41\xe3\x29\x1e\x35\xd3\x33\xf4\x94\xfc\xd6\x78\x3a\x32\x8d\xc3\x2d\x29\x78\x6d\x70\x37\x33\x3c\x0f" +
	"\x91\x43\x4d\x92\x84\xe3\xfc\x4d\xa4\xda\x62\xf6\x6e\xf6\x7e\x2c\x5a\x35\xd6\xae\xd8\x1a\xbd\x53\xf0\x69\xf3\xc0" +
	"\xb2\x8a\x94\xf2\xb3\x1f\x4e\x45\x4a\xdc\x44\x4d\x83\x2f\x00\xb0\xc6\x19\x19\x4d\x00\x74\x68\x14\xdc\x16\x45\xe1" +
	"\x46\x63\x47\x8e\xe3\x4e\xc1\xed\xa2\xb8\x37\x83\x9d\x48\xaf\x0d\xa5\x8b\x90\x9b\x3f\x42\x6e\x46\x10\xf2\xed\x9b" +
	"\xfa\x10\xd2\xe3\xea\x6e\xbd\x7c\x7e\x5c\x7f\x5b\x96\xe5\xfa\xee\xe9\x69\xc0\x69\xd1\x36\xa4\xe0\xea\xb4\x20\xb3" +
	"\x41\x71\x67\xa9\xd5\x6a\x51\x14\x8b\xe2\xea\x0c\x5d\x2e\x9f\x97\x1f\xbf\x7c\xf8\x0f\x72\xae\x45\xdd\xbc\xfc\x0b" +
	"\xdc\xb2\x6d\x1c\xdd\x73\xe3\xc7\x39\x4c\xc1\xe5\xd9\x0a\xa5\x56\x30\x6f\x31\xce\x2d\x6f\x47\x81\x9c\x15\xc2\xf2" +
	"\x76\x9a\xdf\x1b\xb7\x87\x56\xf4\xf0\x74\x9e\xd0\x5f\x55\x5d\xae\x2e\xc8\xae\x34\x51\xc1\xcf\x5f\xfb\x71\xa2\xd8" +
	"\x1a\x4d\x4b\xad\xb3\xb1\x0b\x2d\x1f\x1f\x78\x38\xfd\x15\x7e\x07\x00\x00\xff\xff\x55\x5e\xfb\x52\x6a\x04\x00\x00" +
	"")

func bindataDeploymentAlamedaaiDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedaaiDMyaml,
		"Deployment/alameda-aiDM.yaml",
	)
}



func bindataDeploymentAlamedaaiDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedaaiDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-aiDM.yaml",
		size: 1130,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555895623, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedadatahubDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xda\x4c\x10\xbe\xf3\x2b\xe6\x96\x93\xc1\xe8\x55\xa2\x64" +
	"\x6f\x8e\xcc\xab\x44\x02\x82\x20\xb4\xbd\xa1\xc9\x7a\xc0\xab\xec\x57\x76\xc7\x4e\x51\xd5\xff\x5e\x99\x00\xb1\x13" +
	"\x68\xb3\xc7\x87\x7d\x3e\xf6\x61\xc6\xe8\xd5\x37\x0a\x51\x39\x2b\x00\xbd\x8f\x83\x7a\xd8\x7b\x56\xb6\x10\x90\x93" +
	"\xd7\x6e\x6b\xc8\x72\xcf\x10\x63\x81\x8c\xa2\x07\x60\xd1\x90\x00\xd4\x68\xa8\xc0\xa4\x41\xcb\xea\x69\x8f\x47\x8f" +
	"\x92\x04\xac\xa9\xa0\x80\xec\x02\xaa\x1e\x80\xc6\x27\xd2\xb1\xa1\x42\xe3\x70\xe4\xee\x00\xe9\x8c\x77\x96\x2c\x9f" +
	"\x92\x44\x6b\x1d\x23\x2b\x67\xf7\xf4\x82\xa2\x0c\xca\xf3\x2e\x6d\x4e\x6b\x65\x29\x42\xe9\x5e\x81\x1d\x14\xbb\xb8" +
	"\xc0\x25\x35\x2e\x5a\xc9\x1d\xf1\x84\x2a\x00\x93\xf1\x1a\x99\xfa\xa8\x7d\x89\x7d\xe7\xc9\xc6\x52\xad\xb9\xaf\xdc" +
	"\xe0\x15\x15\x27\x6b\x17\x92\x40\x58\x6c\x05\x5c\x70\xa8\xe8\xa2\x17\x3d\xc9\x26\x43\xa0\x9d\x74\x14\x30\xec\x01" +
	"\x44\xd2\x24\xd9\x85\xb7\x74\x06\x59\x96\xe3\xd6\x6b\xbb\xef\x6d\x45\x38\x04\xd8\xf3\x5a\xed\x36\xe7\x5c\xc3\xcd" +
	"\xd1\x1d\xf9\xb3\x06\x00\x87\xc0\x6f\x25\x5b\x46\x65\x29\x1c\x89\xc9\x5f\x4d\x00\x94\xc1\x0d\x09\x78\xa9\x70\xdb" +
	"\x94\xe2\x83\xf3\x25\x71\x64\x17\x06\x1f\x28\x49\x28\x49\x8b\x3a\xed\xff\xd7\xbf\xea\xd2\x67\x95\xd6\x33\xa7\x95" +
	"\xdc\x0a\xb8\x5f\x4f\x1d\xcf\x02\xc5\x66\x9a\x0e\xb7\x02\x45\x57\x05\x49\xad\xe7\x00\x68\x65\x14\x77\x10\x00\xe9" +
	"\x2b\x01\xc3\x34\x35\x1d\xd4\x90\x71\x61\x2b\x60\x78\x99\x4e\x54\xeb\x97\x40\x2f\x15\xc5\x93\x1a\x97\xe7\x24\xd2" +
	"\xb6\x04\xd9\xfa\x9d\x7b\x68\x2a\x1b\x67\x93\x51\x9e\xad\xf2\xec\x31\xbb\x5b\xde\xae\xee\xa7\xff\x8f\x97\x3f\xf2" +
	"\xdb\x55\x96\xe7\xf3\xd1\x62\xd1\xd2\xad\x51\x57\x24\xa0\x64\xf6\x51\x0c\x8e\x85\x29\xbb\xd6\xd5\xcf\xe2\xa9\xdf" +
	"\x5a\x8f\x7e\xac\xa5\xb8\x4e\xaf\xaf\xbe\xee\xb7\x5c\x8c\xe6\xd3\x6c\x32\xfa\x6c\x88\x85\x51\xf6\xeb\x42\xb3\x6c" +
	"\xb1\xf8\xfe\x30\xcf\xcf\x08\x79\x8c\xf1\x9f\x62\xb3\xf9\xc3\x64\xf4\x78\x37\x5a\x2e\x56\xcb\xf9\xf8\x7c\x07\x3e" +
	"\x38\x43\x5c\x52\x15\x93\xe7\xeb\xf8\xbe\x71\x89\x71\x56\xb1\x0b\xca\x6e\x76\x55\xdc\xa4\x37\xc3\xa3\x4a\xed\x74" +
	"\x65\x68\xe2\x2a\xdb\xfd\x33\x13\x30\x0d\x36\x43\x2e\x05\x0c\x6a\x0c\x03\xed\x36\x83\xf6\x57\xe5\x70\xde\x42\x7f" +
	"\x9c\xf2\x44\xbb\x4d\xd2\xcc\x32\x6e\xa8\xd7\xb6\xfa\xb4\x1e\x5f\x60\x02\x90\xf1\xbc\xcd\x55\x10\xf0\xeb\xf7\x1e" +
	"\x8c\x14\x6a\x25\x29\x93\xb2\x09\x7a\x6e\xcd\xba\xb7\xa6\xa7\x16\xf2\x4f\x00\x00\x00\xff\xff\x91\xd7\x63\x8a\x9e" +
	"\x05\x00\x00")

func bindataDeploymentAlamedadatahubDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedadatahubDMyaml,
		"Deployment/alameda-datahubDM.yaml",
	)
}



func bindataDeploymentAlamedadatahubDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedadatahubDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-datahubDM.yaml",
		size: 1438,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555895623, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedaevictionerDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x5d\x4f\xdb\x3c\x14\xbe\xcf\xaf\x38\xe2\x86\xab\xa4\x45\xef\x5b" +
	"\xa6\xf9\x2e\x2c\x95\x86\x04\x5d\x05\x8c\xdb\xea\xe0\x9c\x36\xd6\xfc\x85\x7d\x12\x14\x4d\xfb\xef\x93\xa1\x81\x44" +
	"\x94\x0e\x5f\xb5\xc7\x7e\x3e\xfc\xe4\x31\x7a\x75\x4f\x21\x2a\x67\x05\xa0\xf7\x71\xd6\x9d\x65\xbf\x94\xad\x05\x54" +
	"\xe4\xb5\xeb\x0d\x59\xce\x0c\x31\xd6\xc8\x28\x32\x00\x8b\x86\x04\xa0\x46\x43\x35\xe6\xd4\x29\xc9\xca\x59\x0a\xfb" +
	"\xad\xe8\x51\x92\x80\x2d\xd5\x14\x90\x5d\x40\x95\x01\x68\x7c\x20\x1d\x13\x1a\x92\xc8\x2b\xfc\x79\x20\x9d\xf1\xce" +
	"\x92\xe5\x0f\x58\xd1\x5a\xc7\x98\xfe\xee\x19\x6a\x8a\x32\x28\xcf\xcf\x9e\x2b\xda\x2a\x4b\x11\x1a\xf7\x04\xec\xa0" +
	"\x7e\x36\x0d\xdc\xd0\x61\x32\x00\x26\xe3\x35\x32\x15\xa8\x7d\x83\x85\xf3\x64\x63\xa3\xb6\x5c\x28\x37\x7b\x42\xc5" +
	"\xf9\xd6\x85\x3c\x10\xd6\xbd\x80\x53\x0e\x2d\x9d\x66\xd1\x93\x4c\xd2\x81\xbc\x56\x12\xa3\x80\xb3\x0c\x20\x92\x26" +
	"\xc9\x2e\xbc\x98\x32\xc8\xb2\xb9\x1a\xdd\x73\x7a\xd3\xa9\x8b\xc1\xc3\x1e\x3a\x4a\x37\xad\x23\x09\xa7\xa5\x27\x22" +
	"\xc7\x64\x00\x06\xe7\x2f\x39\x5b\x46\x65\x29\xbc\x62\xf3\x7f\x49\x01\x28\x83\x3b\x12\xf0\xd8\x62\x9f\x02\xf2\xc1" +
	"\xf9\x86\x38\xb2\x0b\xb3\xf7\xa8\x3c\x34\xa4\x45\x37\x2f\xfe\x2b\xce\xa7\x0c\xeb\x56\xeb\xb5\xd3\x4a\xf6\x02\x2e" +
	"\xb7\x2b\xc7\xeb\x40\x31\x35\x6b\x38\x15\x28\xba\x36\x48\x1a\xdd\x0b\x40\x2b\xa3\x78\x32\x01\x90\xbe\x15\x70\x3e" +
	"\x37\x93\xa1\x21\xe3\x42\x2f\xe0\xeb\xfc\x5a\x8d\x36\x02\x3d\xb6\x14\x0f\x32\xfc\xbf\x38\xcc\xf0\x65\x31\x62\x20" +
	"\xdb\xbd\x41\x87\xb0\xca\xab\xf2\x7a\x59\x95\x9b\xe5\xfd\xe5\xb7\xbb\xcb\x1f\xab\xe5\xcd\xa6\x2a\xef\xca\xef\x3f" +
	"\x2f\x36\x65\x55\xdd\x2c\x6f\x6f\x47\xc4\x1d\xea\x96\x04\x9c\x0c\x59\xa5\xcf\xdc\xb4\x0f\xc5\xe8\x79\x14\xb1\x93" +
	"\x62\x31\x9f\x2f\xe6\x27\x9f\xd1\x1a\x7e\x6e\x96\xab\xf2\xe2\x6a\x79\x40\x2b\x75\xf6\x8d\xaa\x73\xba\x35\x74\xed" +
	"\x5a\x3b\xce\x21\x07\x93\x26\x6b\xe4\x46\xc0\xac\xc3\x30\xd3\x6e\x37\x1b\xbf\xca\x71\x15\x0f\x14\x24\xd7\x6e\x97" +
	"\xa7\x1a\xe0\x8e\xb2\xb1\xd2\xbb\x72\x7d\x0e\x0c\x40\xc6\x73\x5f\xa9\x20\xe0\xf7\x9f\xfd\x30\x52\xe8\x94\xa4\x52" +
	"\xca\x64\xf6\x48\x4f\xa7\x07\x57\x1f\x94\xfa\x6f\x00\x00\x00\xff\xff\x33\xa3\x09\xd6\xeb\x04\x00\x00")

func bindataDeploymentAlamedaevictionerDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedaevictionerDMyaml,
		"Deployment/alameda-evictionerDM.yaml",
	)
}



func bindataDeploymentAlamedaevictionerDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedaevictionerDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-evictionerDM.yaml",
		size: 1259,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555895623, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedagrafanaDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x3d\x8f\xe3\x36\x10\xed\xfd\x2b\x06\x6e\xae\x89\x2c\xef\xdd\xa5" +
	"\x61\x17\xdc\x36\x01\xb2\x07\x17\x41\x9a\x20\x08\x66\xa9\x91\xc5\x2c\xc9\x61\xc8\x91\x2f\x46\x90\xff\x1e\x48\x2b" +
	"\xc9\x92\x2d\x69\xbd\xc5\xa9\x31\xcc\x79\xef\xcd\x27\x07\xc4\x60\x7e\xa3\x98\x0c\x7b\x05\x18\x42\xca\x4f\x0f\x9b" +
	"\x17\xe3\x0b\x05\x8f\x14\x2c\x9f\x1d\x79\xd9\x38\x12\x2c\x50\x50\x6d\x00\x3c\x3a\x52\x80\x16\x1d\x15\x98\x1d\x23" +
	"\x96\xe8\xb1\x3b\x4f\x01\x35\x29\x28\xa9\xa0\x88\xc2\x11\xcd\x06\xc0\xe2\x33\xd9\xd4\x50\xa1\xf1\x30\x70\xdb\x03" +
	"\xcd\x2e\xb0\x27\x2f\x73\x92\xe8\x3d\x0b\x8a\x61\xdf\xd1\x0b\x4a\x3a\x9a\x20\x6d\xb4\x8f\x54\x1a\x4f\x09\x2a\xfe" +
	"\x06\xc2\x50\xb4\xe1\x82\x54\xd4\x78\xb1\x46\xb7\x44\xb8\xa8\x01\x08\xb9\x60\x51\x68\x87\x36\x54\xb8\xe3\x40\x3e" +
	"\x55\xa6\x94\x9d\xe1\xfc\x1b\x1a\xc9\x4a\x8e\x59\x24\x2c\xce\x0a\x3e\x48\xac\xe9\xc3\x26\x05\xd2\x8d\xef\x48\xad" +
	"\x64\x52\xf0\xb0\x01\x48\x64\x49\x0b\xc7\xd7\xa8\x1c\x8a\xae\x7e\x19\x65\x79\x9d\xe9\x28\xa5\x3e\x84\x8e\x39\xaa" +
	"\x6b\xf3\xd9\xfb\x44\x00\xfa\xb0\x9a\xcf\x78\x23\x5f\xd8\x0b\x1a\x4f\x71\x20\x67\x5d\xa3\x8e\x24\xc2\x2f\xe4\x07" +
	"\x4d\xe3\xf0\x48\x0a\xb6\x68\x83\xf1\xb4\x1d\xce\x35\x3b\x87\x4d\xdf\x7f\xdf\xa6\x6a\xfb\xc3\x36\x4f\x15\x59\x9b" +
	"\xd3\x3f\xa4\x6b\xa1\x3f\xdb\x7f\xbb\x54\x6d\xff\x18\x18\x27\xb6\xb5\xa3\x27\xae\xbd\x8c\x62\xce\xc0\x35\x27\x07" +
	"\x94\x4a\xc1\xab\xc8\x60\xeb\xa7\xa7\x13\xcd\xa6\xd6\x29\xb3\xa9\x4b\xe2\x3a\x6a\x4a\x37\xfc\x39\xdb\x94\x4d\xa2" +
	"\xf3\xae\x60\x79\x88\x7c\x32\xcd\x84\x1b\x7f\x5c\x95\x0d\x91\x1d\x49\x45\x75\xca\x2e\xb0\x4d\x5f\x9e\xc5\x0a\x8f" +
	"\xfa\x32\x2a\x70\xef\xbd\xfb\x55\x3f\xee\x3e\xef\x3e\x4d\x41\x87\xda\xda\x03\x5b\xa3\xcf\x0a\x7e\x2e\xbf\xb2\x1c" +
	"\x22\xa5\xe6\xbe\xf5\xa8\xc0\x71\x5c\xda\xc6\xe7\x10\xc7\x81\xa3\x28\xf8\xb4\xdf\xef\x47\xf6\x3e\x93\x4a\x24\x4c" +
	"\x8e\x43\x64\x61\xcd\x56\xc1\xaf\x5f\x0e\x83\x25\x52\x57\x8a\xb1\x0f\x6b\x9c\x99\x7a\x05\xd0\xa1\x56\xf0\x71\xbf" +
	"\x77\x93\x53\x47\x8e\xe3\xb9\x35\x3c\x99\x91\x25\xd2\xdf\x35\xa5\x59\x8d\x87\x25\x8d\x87\x89\xc6\xfc\x68\x5d\x37" +
	"\xf9\x84\x31\xb7\xe6\x39\xbf\xee\xc0\xa5\x0e\x9d\x25\x4b\xcd\x32\x3a\xd2\x04\x91\xea\xe7\xd0\xea\xdc\xd2\x57\xdd" +
	"\xe4\x05\xa6\xea\x99\x31\x16\x29\x1f\xaf\xb2\xa9\xe7\x0b\x28\xfb\x2b\xb1\x5f\x14\x7f\xe7\xa0\xde\x33\xaa\xef\x72" +
	"\xd2\x47\xb9\x96\x42\x4b\x29\x28\x26\xd8\x8c\xdb\x33\xb9\xf4\xf7\x85\x45\x2e\xc8\xf9\xd1\x44\x05\xff\xfe\x77\x43" +
	"\x5e\x6e\xd6\x02\x4d\xb3\x2f\xcd\xf1\x09\xc3\x74\xd0\x8c\x90\xbb\x9a\xbd\x0c\x5e\xe8\x3c\xec\x9d\x61\x99\x4d\x30" +
	"\x00\xaf\xe3\xb0\x0a\x9a\x46\xba\xb6\x4c\x96\x76\xdc\x42\xd0\x05\x95\x58\x5b\x79\xe2\x82\x14\x7c\xfe\xb8\xbf\x33" +
	"\xa3\x4b\xc1\x77\x67\x74\x76\x36\xa1\x35\xcc\xfd\xf9\xcc\xef\xdc\x85\x6c\xee\x91\x5d\x4b\x4b\xdb\x3a\x09\xc5\x8a" +
	"\xd0\x4a\xb5\xbb\xba\x40\x97\xcc\xde\x80\x75\x62\x9e\x0b\x7a\x4b\x69\x0d\x33\x94\x9a\x0a\xa3\x9b\x47\xc5\xb2\xcc" +
	"\x32\x66\x7d\x2b\x7c\xb7\x42\xde\xde\xe1\xe5\x39\x79\x1b\xbb\xb4\x17\x3a\x48\xa2\x78\x32\x9a\x7e\xd2\xba\xd9\x3d" +
	"\xf3\x2f\x97\x6b\xd4\xd7\xb9\xe7\xe4\xff\x01\x00\x00\xff\xff\xcf\xe9\x0c\xbe\x95\x0a\x00\x00")

func bindataDeploymentAlamedagrafanaDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedagrafanaDMyaml,
		"Deployment/alameda-grafanaDM.yaml",
	)
}



func bindataDeploymentAlamedagrafanaDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedagrafanaDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-grafanaDM.yaml",
		size: 2709,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555896241, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedainfluxdbDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x4f\x4f\xe3\x3a\x14\xc5\xf7\xfd\x14\x57\xbc\x05\xab\xb6\x74\xf5" +
	"\x24\xef\x02\x09\x8f\xe8\x41\x89\xda\x94\x99\x59\x55\xb7\xc9\x0d\xb5\x70\x6c\xcb\xbe\x29\x44\xa3\xf9\xee\x23\x87" +
	"\x16\x42\x69\x01\xcd\x78\x51\x55\xf6\x3d\xbf\x73\x4f\xfc\x07\xad\xbc\x23\xe7\xa5\xd1\x02\xd0\x5a\x3f\xde\x4c\x06" +
	"\x0f\x52\x97\x02\x62\xb2\xca\xb4\x35\x69\x1e\xd4\xc4\x58\x22\xa3\x18\x00\x68\xac\x49\x00\x2a\xac\xa9\xc4\xa1\xd4" +
	"\x95\x6a\x9e\xca\xd5\x76\xc1\x5b\x2c\x48\x40\x45\x25\x39\x64\xe3\x50\x0e\x00\x14\xae\x48\xf9\xa0\x85\x60\xf1\x22" +
	"\xee\x26\x0a\x53\x5b\xa3\x49\xf3\x41\x26\x6a\x6d\x18\x59\x1a\xbd\xd5\x97\xe4\x0b\x27\x2d\x77\xfd\xc6\x54\x49\x4d" +
	"\x1e\xd6\xe6\x11\xd8\x40\xd9\x35\x0c\xbc\xa6\x60\xa3\x64\xd1\x09\xa1\x87\x03\x60\xaa\xad\x42\xa6\x11\x2a\xbb\xc6" +
	"\x91\xb1\xa4\xfd\x5a\x56\x3c\x92\x66\xfc\x88\x92\x87\x95\x71\x43\x47\x58\xb6\x02\x4e\xd9\x35\x74\x3a\xf0\x96\x8a" +
	"\x60\xee\xa8\x63\x7a\x01\x93\x01\x80\x27\x45\x05\x1b\xf7\xdc\x56\x8d\x5c\xac\xaf\x7b\x39\xf7\xb3\xf6\x43\xed\x7a" +
	"\xd8\x4a\x7b\xdf\x36\x0c\xf5\x45\x0a\xc0\xae\xb1\x30\xfe\x01\x4f\x45\xe3\x24\xb7\x17\x46\x33\x3d\xf1\xeb\x02\x80" +
	"\x6b\x74\xe4\x17\x9e\x9c\x80\xc9\xd9\xd9\xd9\x76\xa5\x30\x9a\x51\x6a\x72\x2f\x66\xc3\xed\xe6\xbe\x71\x09\x43\xd6" +
	"\x78\xdf\x9b\x17\x93\xd1\xbf\x43\x54\x56\x6a\x7a\x5b\x92\x35\x4a\x65\x46\xc9\xa2\x15\x90\x56\x53\xc3\x99\x23\x1f" +
	"\x0e\xd0\xae\x8a\xf4\xe6\x35\xd9\xce\x2e\x9d\x5e\x5e\x2f\xbe\xc7\xe7\xcb\x59\x92\xdd\xce\xf2\x74\xfa\xdf\x32\x4e" +
	"\xe7\xd1\xf9\x75\x12\xbf\xd4\x02\x6c\x50\x35\x24\xe0\x24\x6c\xca\xc9\x71\xc6\x55\x9e\x67\xdd\xcf\x7c\x99\x4c\xff" +
	"\x9e\x71\x91\xcc\xf2\xf4\x32\xbd\x88\xf2\xe4\x00\x67\x4c\x5c\x8c\x59\xf9\xb1\x75\x72\x83\x4c\xe1\xff\xa8\x70\xfc" +
	"\x35\x76\x36\x4b\xef\xa2\x3c\x59\xfe\x9f\xfc\xf8\x2a\xfb\x81\xda\xcf\xd8\xd1\x22\xbf\xfa\xf3\xe8\x51\x7c\x93\x4e" +
	"\x97\x8b\x79\x32\x3b\xa0\xc5\xb2\x96\xfa\x53\x71\x16\xcd\xe7\xdf\x6e\x67\x87\xcc\x3b\x80\x45\xef\x3f\x80\x1c\xf1" +
	"\x6e\x3c\xb9\x4f\x54\x1f\x39\x07\xf9\x5b\xe3\x8d\x51\x4d\x4d\x37\xa6\xd1\xec\xfb\x67\xb2\x0e\x33\x19\xf2\x5a\xc0" +
	"\xfe\x16\xf4\xb8\x87\x5f\xc1\x21\x2b\xdf\x2b\x0a\xef\xc8\xad\x56\xad\x80\x0a\x95\xa7\x23\x26\x1b\x74\x63\x25\x57" +
	"\xe3\x77\xb7\x0e\xf6\xae\xe3\xd0\x87\x17\xf5\xbe\xdf\x86\x6f\x56\xcf\x94\x3d\xf1\x73\xb8\xa3\x17\xfb\x1d\x89\x6a" +
	"\xcb\x6d\x2c\x9d\x80\x9f\xbf\xf6\x34\x1f\x66\xf4\x54\x38\x62\xd1\xef\xa8\x9b\x99\x1e\x95\xfe\x0e\x00\x00\xff\xff" +
	"\x64\x59\x19\x56\x70\x06\x00\x00")

func bindataDeploymentAlamedainfluxdbDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedainfluxdbDMyaml,
		"Deployment/alameda-influxdbDM.yaml",
	)
}



func bindataDeploymentAlamedainfluxdbDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedainfluxdbDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-influxdbDM.yaml",
		size: 1648,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554806736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDeploymentAlamedaoperatorDMyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x0c\x7c\xc9\x49\x92\x93\xdd\xec" +
	"\x81\x37\x2d\x14\xa0\x01\xf2\x61\x38\x69\xaf\xc1\x84\x1a\x59\x44\xf9\x15\x92\x92\x21\x14\xfd\xef\x05\x2d\x2b\xa5" +
	"\x1a\x3b\x28\x8f\xc3\x79\x6f\xde\xbc\x99\x41\x2b\xbe\x91\xf3\xc2\x68\x06\x68\xad\x2f\x87\xcb\xec\xbb\xd0\x0d\x83" +
	"\x9a\xac\x34\xa3\x22\x1d\x32\x45\x01\x1b\x0c\xc8\x32\x00\x8d\x8a\x18\xa0\x44\x45\x0d\xe6\xc6\x92\xc3\x60\xdc\xf1" +
	"\xc3\x5b\xe4\xc4\xa0\xa5\x66\x0a\xa3\xc8\x00\x24\xbe\x92\xf4\x11\x0b\xb1\xc4\x3b\xf8\x10\xe0\x46\x59\xa3\x49\x87" +
	"\x93\x9c\xa8\xb5\x09\x18\x84\xd1\x47\x7c\x43\x9e\x3b\x61\xc3\x41\x6f\x4d\xad\xd0\xe4\xa1\x33\x7b\x08\x06\x9a\x83" +
	"\x60\x08\x1d\xc5\x32\x52\xf0\x03\xf0\x14\x2d\x40\x20\x65\x25\x06\x2a\x50\xda\x0e\x0b\x63\x49\xfb\x4e\xb4\xa1\x10" +
	"\xa6\xdc\xa3\x08\x79\x6b\x5c\xee\x08\x9b\x91\xc1\x45\x70\x3d\x5d\x64\xde\x12\x8f\x22\x1c\x1d\xb8\x3d\x83\xcb\x0c" +
	"\xc0\x93\x24\x1e\x8c\x9b\xe4\x29\x0c\xbc\xbb\x4b\xfa\x5d\x76\x9c\x6a\x98\x15\x1c\x81\x89\xc3\xf1\x9d\x75\x39\x3e" +
	"\xb9\x28\x70\xbe\x04\xc0\xac\x79\x72\x5a\x07\x14\x9a\xdc\x3b\x32\xff\xbc\x0c\x80\x50\xb8\x23\x06\x6f\x3d\x8e\xd1" +
	"\x18\xeb\x8c\xed\x28\xf8\x60\x5c\xf9\x27\x26\x77\x1d\x49\x36\xac\x8b\x7f\x8a\xff\x96\xf8\x4d\x2f\xe5\xc6\x48\xc1" +
	"\x47\x06\xb7\xed\x83\x09\x1b\x47\x3e\x6e\xd5\x9c\xe5\xc8\x9b\xde\x71\x4a\x3a\x02\x90\x42\x89\xb0\x88\x00\x70\xdb" +
	"\x33\xb8\x5a\xab\x45\x50\x91\x32\x6e\x64\xf0\xef\xfa\x5e\x24\x1f\x8e\xde\x7a\xf2\x27\x19\x2e\xcf\x30\x5c\xa5\x0c" +
	"\xa4\x87\xdf\xd0\xd9\xa8\xea\xae\xba\xbf\xa9\xab\x97\xc7\xcd\xcd\xb6\x7a\x7e\xdc\xbe\xd4\xd5\x73\xf5\xe5\xeb\xff" +
	"\x2f\x55\x5d\x6f\x6f\x9e\x9e\x12\xda\x01\x65\x4f\x0c\x56\xb3\x4f\x71\xb8\x5d\xff\x5a\x24\xa7\x51\xf8\x81\xb3\xeb" +
	"\xf5\xfa\x7a\xbd\x7a\x07\x0e\x46\xf6\x8a\xee\x4d\xaf\x53\xe9\x73\x7d\x6b\x1a\xa1\x5b\x93\x94\x51\x31\x73\x83\xa1" +
	"\x63\x50\x52\xe0\xe5\xc7\x8c\xb8\xc4\x8f\x5a\x8e\x0c\x5a\x94\x9e\x12\xce\x14\x3b\xa0\x2b\xa5\xd9\x95\xe9\x69\x4e" +
	"\x6f\xaa\xfc\x61\x47\x72\x69\x76\x79\xdc\x04\xdc\xcd\x9c\x93\xf6\x0f\xdb\xf5\x37\x50\x00\x52\x36\x8c\xb5\x70\x0c" +
	"\x7e\xfc\xcc\x3e\xef\xba\x31\x7b\xbd\x47\xd7\x54\x9b\xdb\x74\xba\x22\x90\x5a\x8c\x3b\x07\x7b\x68\x6e\x35\xdd\xcb" +
	"\x6a\x31\xf4\x56\x90\x6c\xb6\xd4\x2e\xf7\xe3\x18\x9f\x4c\x99\x6f\xb2\x98\xf0\xc7\x44\x4f\x6e\x10\x9c\x2a\xce\xa3" +
	"\x7d\x67\x8f\x67\x99\xf6\x70\xf2\xce\x62\xde\xaf\x00\x00\x00\xff\xff\xb6\x67\x86\xf2\x80\x05\x00\x00")

func bindataDeploymentAlamedaoperatorDMyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDeploymentAlamedaoperatorDMyaml,
		"Deployment/alameda-operatorDM.yaml",
	)
}



func bindataDeploymentAlamedaoperatorDMyaml() (*asset, error) {
	bytes, err := bindataDeploymentAlamedaoperatorDMyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "Deployment/alameda-operatorDM.yaml",
		size: 1408,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555895623, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"CustomResourceDefinition/alamedarecommendationsCRD.yaml": bindataCustomResourceDefinitionAlamedarecommendationsCRDyaml,
	"CustomResourceDefinition/alamedascalersCRD.yaml":         bindataCustomResourceDefinitionAlamedascalersCRDyaml,
	"ClusterRole/admission-controllerCR.yaml":                 bindataClusterRoleAdmissioncontrollerCRyaml,
	"ClusterRole/aggregate-alameda-admin-edit-alamedaCR.yaml": bindataClusterRoleAggregatealamedaadmineditalamedaCRyaml,
	"ClusterRole/alameda-datahubCR.yaml":                      bindataClusterRoleAlamedadatahubCRyaml,
	"ClusterRole/alameda-evictionerCR.yaml":                   bindataClusterRoleAlamedaevictionerCRyaml,
	"ClusterRole/alameda-grafanaCR.yaml":                      bindataClusterRoleAlamedagrafanaCRyaml,
	"ClusterRole/alameda-operatorCR.yaml":                     bindataClusterRoleAlamedaoperatorCRyaml,
	"ServiceAccount/admission-controllerSA.yaml":              bindataServiceAccountAdmissioncontrollerSAyaml,
	"ServiceAccount/alameda-aiSA.yaml":                        bindataServiceAccountAlamedaaiSAyaml,
	"ServiceAccount/alameda-datahubSA.yaml":                   bindataServiceAccountAlamedadatahubSAyaml,
	"ServiceAccount/alameda-evictionerSA.yaml":                bindataServiceAccountAlamedaevictionerSAyaml,
	"ServiceAccount/alameda-grafanaSA.yaml":                   bindataServiceAccountAlamedagrafanaSAyaml,
	"ServiceAccount/alameda-operatorSA.yaml":                  bindataServiceAccountAlamedaoperatorSAyaml,
	"ClusterRoleBinding/admission-controllerCRB.yaml":         bindataClusterRoleBindingAdmissioncontrollerCRByaml,
	"ClusterRoleBinding/alameda-datahubCRB.yaml":              bindataClusterRoleBindingAlamedadatahubCRByaml,
	"ClusterRoleBinding/alameda-evictionerCRB.yaml":           bindataClusterRoleBindingAlamedaevictionerCRByaml,
	"ClusterRoleBinding/alameda-grafanaCRB.yaml":              bindataClusterRoleBindingAlamedagrafanaCRByaml,
	"ClusterRoleBinding/alameda-operatorCRB.yaml":             bindataClusterRoleBindingAlamedaoperatorCRByaml,
	"Secret/admission-controller-tls.yaml":                    bindataSecretAdmissioncontrollertlsyaml,
	"Secret/alameda-influxdb.yaml":                            bindataSecretAlamedainfluxdbyaml,
	"ConfigMap/grafana-datasources.yaml":                      bindataConfigMapGrafanadatasourcesyaml,
	"PersistentVolumeClaim/admission-controller-log.yaml":     bindataPersistentVolumeClaimAdmissioncontrollerlogyaml,
	"PersistentVolumeClaim/alameda-ai-log.yaml":               bindataPersistentVolumeClaimAlamedaailogyaml,
	"PersistentVolumeClaim/alameda-datahub-log.yaml":          bindataPersistentVolumeClaimAlamedadatahublogyaml,
	"PersistentVolumeClaim/alameda-evictioner-log.yaml":       bindataPersistentVolumeClaimAlamedaevictionerlogyaml,
	"PersistentVolumeClaim/alameda-operator-log.yaml":         bindataPersistentVolumeClaimAlamedaoperatorlogyaml,
	"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml":         bindataPersistentVolumeClaimMyalamedagrafanaPVCyaml,
	"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml":        bindataPersistentVolumeClaimMyalamedainfluxdbPVCyaml,
	"Service/admission-controllerSV.yaml":                     bindataServiceAdmissioncontrollerSVyaml,
	"Service/alameda-datahubSV.yaml":                          bindataServiceAlamedadatahubSVyaml,
	"Service/alameda-grafanaSV.yaml":                          bindataServiceAlamedagrafanaSVyaml,
	"Service/alameda-influxdbSV.yaml":                         bindataServiceAlamedainfluxdbSVyaml,
	"Deployment/admission-controllerDM.yaml":                  bindataDeploymentAdmissioncontrollerDMyaml,
	"Deployment/alameda-aiDM.yaml":                            bindataDeploymentAlamedaaiDMyaml,
	"Deployment/alameda-datahubDM.yaml":                       bindataDeploymentAlamedadatahubDMyaml,
	"Deployment/alameda-evictionerDM.yaml":                    bindataDeploymentAlamedaevictionerDMyaml,
	"Deployment/alameda-grafanaDM.yaml":                       bindataDeploymentAlamedagrafanaDMyaml,
	"Deployment/alameda-influxdbDM.yaml":                      bindataDeploymentAlamedainfluxdbDMyaml,
	"Deployment/alameda-operatorDM.yaml":                      bindataDeploymentAlamedaoperatorDMyaml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"ClusterRole": {Func: nil, Children: map[string]*bintree{
		"admission-controllerCR.yaml": {Func: bindataClusterRoleAdmissioncontrollerCRyaml, Children: map[string]*bintree{}},
		"aggregate-alameda-admin-edit-alamedaCR.yaml": {Func: bindataClusterRoleAggregatealamedaadmineditalamedaCRyaml, Children: map[string]*bintree{}},
		"alameda-datahubCR.yaml": {Func: bindataClusterRoleAlamedadatahubCRyaml, Children: map[string]*bintree{}},
		"alameda-evictionerCR.yaml": {Func: bindataClusterRoleAlamedaevictionerCRyaml, Children: map[string]*bintree{}},
		"alameda-grafanaCR.yaml": {Func: bindataClusterRoleAlamedagrafanaCRyaml, Children: map[string]*bintree{}},
		"alameda-operatorCR.yaml": {Func: bindataClusterRoleAlamedaoperatorCRyaml, Children: map[string]*bintree{}},
	}},
	"ClusterRoleBinding": {Func: nil, Children: map[string]*bintree{
		"admission-controllerCRB.yaml": {Func: bindataClusterRoleBindingAdmissioncontrollerCRByaml, Children: map[string]*bintree{}},
		"alameda-datahubCRB.yaml": {Func: bindataClusterRoleBindingAlamedadatahubCRByaml, Children: map[string]*bintree{}},
		"alameda-evictionerCRB.yaml": {Func: bindataClusterRoleBindingAlamedaevictionerCRByaml, Children: map[string]*bintree{}},
		"alameda-grafanaCRB.yaml": {Func: bindataClusterRoleBindingAlamedagrafanaCRByaml, Children: map[string]*bintree{}},
		"alameda-operatorCRB.yaml": {Func: bindataClusterRoleBindingAlamedaoperatorCRByaml, Children: map[string]*bintree{}},
	}},
	"ConfigMap": {Func: nil, Children: map[string]*bintree{
		"grafana-datasources.yaml": {Func: bindataConfigMapGrafanadatasourcesyaml, Children: map[string]*bintree{}},
	}},
	"CustomResourceDefinition": {Func: nil, Children: map[string]*bintree{
		"alamedarecommendationsCRD.yaml": {Func: bindataCustomResourceDefinitionAlamedarecommendationsCRDyaml, Children: map[string]*bintree{}},
		"alamedascalersCRD.yaml": {Func: bindataCustomResourceDefinitionAlamedascalersCRDyaml, Children: map[string]*bintree{}},
	}},
	"Deployment": {Func: nil, Children: map[string]*bintree{
		"admission-controllerDM.yaml": {Func: bindataDeploymentAdmissioncontrollerDMyaml, Children: map[string]*bintree{}},
		"alameda-aiDM.yaml": {Func: bindataDeploymentAlamedaaiDMyaml, Children: map[string]*bintree{}},
		"alameda-datahubDM.yaml": {Func: bindataDeploymentAlamedadatahubDMyaml, Children: map[string]*bintree{}},
		"alameda-evictionerDM.yaml": {Func: bindataDeploymentAlamedaevictionerDMyaml, Children: map[string]*bintree{}},
		"alameda-grafanaDM.yaml": {Func: bindataDeploymentAlamedagrafanaDMyaml, Children: map[string]*bintree{}},
		"alameda-influxdbDM.yaml": {Func: bindataDeploymentAlamedainfluxdbDMyaml, Children: map[string]*bintree{}},
		"alameda-operatorDM.yaml": {Func: bindataDeploymentAlamedaoperatorDMyaml, Children: map[string]*bintree{}},
	}},
	"PersistentVolumeClaim": {Func: nil, Children: map[string]*bintree{
		"admission-controller-log.yaml": {Func: bindataPersistentVolumeClaimAdmissioncontrollerlogyaml, Children: map[string]*bintree{}},
		"alameda-ai-log.yaml": {Func: bindataPersistentVolumeClaimAlamedaailogyaml, Children: map[string]*bintree{}},
		"alameda-datahub-log.yaml": {Func: bindataPersistentVolumeClaimAlamedadatahublogyaml, Children: map[string]*bintree{}},
		"alameda-evictioner-log.yaml": {Func: bindataPersistentVolumeClaimAlamedaevictionerlogyaml, Children: map[string]*bintree{}},
		"alameda-operator-log.yaml": {Func: bindataPersistentVolumeClaimAlamedaoperatorlogyaml, Children: map[string]*bintree{}},
		"my-alamedagrafanaPVC.yaml": {Func: bindataPersistentVolumeClaimMyalamedagrafanaPVCyaml, Children: map[string]*bintree{}},
		"my-alamedainfluxdbPVC.yaml": {Func: bindataPersistentVolumeClaimMyalamedainfluxdbPVCyaml, Children: map[string]*bintree{}},
	}},
	"Secret": {Func: nil, Children: map[string]*bintree{
		"admission-controller-tls.yaml": {Func: bindataSecretAdmissioncontrollertlsyaml, Children: map[string]*bintree{}},
		"alameda-influxdb.yaml": {Func: bindataSecretAlamedainfluxdbyaml, Children: map[string]*bintree{}},
	}},
	"Service": {Func: nil, Children: map[string]*bintree{
		"admission-controllerSV.yaml": {Func: bindataServiceAdmissioncontrollerSVyaml, Children: map[string]*bintree{}},
		"alameda-datahubSV.yaml": {Func: bindataServiceAlamedadatahubSVyaml, Children: map[string]*bintree{}},
		"alameda-grafanaSV.yaml": {Func: bindataServiceAlamedagrafanaSVyaml, Children: map[string]*bintree{}},
		"alameda-influxdbSV.yaml": {Func: bindataServiceAlamedainfluxdbSVyaml, Children: map[string]*bintree{}},
	}},
	"ServiceAccount": {Func: nil, Children: map[string]*bintree{
		"admission-controllerSA.yaml": {Func: bindataServiceAccountAdmissioncontrollerSAyaml, Children: map[string]*bintree{}},
		"alameda-aiSA.yaml": {Func: bindataServiceAccountAlamedaaiSAyaml, Children: map[string]*bintree{}},
		"alameda-datahubSA.yaml": {Func: bindataServiceAccountAlamedadatahubSAyaml, Children: map[string]*bintree{}},
		"alameda-evictionerSA.yaml": {Func: bindataServiceAccountAlamedaevictionerSAyaml, Children: map[string]*bintree{}},
		"alameda-grafanaSA.yaml": {Func: bindataServiceAccountAlamedagrafanaSAyaml, Children: map[string]*bintree{}},
		"alameda-operatorSA.yaml": {Func: bindataServiceAccountAlamedaoperatorSAyaml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
